<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgcn_1_1ImageLoader" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>gcn::ImageLoader</compoundname>
    <derivedcompoundref refid="classgcn_1_1SDLImageLoader" prot="public" virt="non-virtual">gcn::SDLImageLoader</derivedcompoundref>
    <includes refid="imageloader_8h" local="no">imageloader.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgcn_1_1ImageLoader_1a894b75f8f25ebfa9e0962c2d499ca7ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual gcn::ImageLoader::~ImageLoader</definition>
        <argsstring>()</argsstring>
        <name>~ImageLoader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imageloader.h" line="79" column="17" bodyfile="src/guichan/include/guichan/imageloader.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageLoader_1a4daabf5c6645601be6914489bf882291" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::ImageLoader::prepare</definition>
        <argsstring>(const std::string &amp;filename)=0</argsstring>
        <name>prepare</name>
        <reimplementedby refid="classgcn_1_1SDLImageLoader_1a3662ac487054734fae28c233f0f84aa8">prepare</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepares an image for reading. After you have called this function you can retrieve information about it and edit it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the image file to prepare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgcn_1_1Exception" kindref="compound">Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when called without having finalized or disposed to last image or when unable to load the image. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imageloader.h" line="89" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageLoader_1a929d9d08f40a1ec16e6476121d31b9c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::ImageLoader::free</definition>
        <argsstring>(Image *image)=0</argsstring>
        <name>free</name>
        <reimplementedby refid="classgcn_1_1SDLImageLoader_1a698af2a7a767d2e3255d4b3f6e7e86d6">free</reimplementedby>
        <param>
          <type><ref refid="classgcn_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function frees an image.</para>
<para>NOTE: There is generally no reason to call this function as it is called upon by the <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> object when destroying an <ref refid="classgcn_1_1Image" kindref="compound">Image</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>the image to be freed and removed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgcn_1_1Exception" kindref="compound">Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when image points to NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imageloader.h" line="100" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageLoader_1a49fb1ffda9e4eeda976131ab643eebb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
        <definition>virtual void* gcn::ImageLoader::getRawData</definition>
        <argsstring>()=0</argsstring>
        <name>getRawData</name>
        <reimplementedby refid="classgcn_1_1SDLImageLoader_1aefc8ee795479cc1834fc542854894dc2">getRawData</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rreturns a pointer of raw data of an image. The raw data is in 32 bit RGBA format. The funcion will not free a prepared image, so finalize or discard should be used afterwards.</para>
<para><simplesect kind="return"><para>a pointer to the raw image data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imageloader.h" line="109" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageLoader_1aa43a9488443697421be2e12bca87a6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
        <definition>virtual void* gcn::ImageLoader::finalize</definition>
        <argsstring>()=0</argsstring>
        <name>finalize</name>
        <reimplementedby refid="classgcn_1_1SDLImageLoader_1a1fedf352b8864a6d07256096c8b78d32">finalize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finalizes an image meaning it will return the image data. If the image contains pixels with &quot;magic pink&quot; (0xff00ff) they will be treated as transparent pixels.</para>
<para><simplesect kind="return"><para>a pointer to the image data. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgcn_1_1Exception" kindref="compound">Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when no image has been prepared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imageloader.h" line="119" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageLoader_1abc6d63fd34827e52431577be57d3ed9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::ImageLoader::discard</definition>
        <argsstring>()=0</argsstring>
        <name>discard</name>
        <reimplementedby refid="classgcn_1_1SDLImageLoader_1a788499c7bd31f55082dee07e37778d38">discard</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Discards a prepared image.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgcn_1_1Exception" kindref="compound">Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when no image has been prepared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imageloader.h" line="126" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageLoader_1aaf09dbde0504436761b886359ec5f012" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int gcn::ImageLoader::getHeight</definition>
        <argsstring>() const =0</argsstring>
        <name>getHeight</name>
        <reimplementedby refid="classgcn_1_1SDLImageLoader_1ad17e315e68f940dcb39ac358bce6e22e">getHeight</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the height if the image.</para>
<para><simplesect kind="return"><para>the height of the image. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgcn_1_1Exception" kindref="compound">Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if no image have been prepared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imageloader.h" line="134" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageLoader_1a868e7446825d4ab1b41b1e968546e132" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int gcn::ImageLoader::getWidth</definition>
        <argsstring>() const =0</argsstring>
        <name>getWidth</name>
        <reimplementedby refid="classgcn_1_1SDLImageLoader_1aa91730438c3e490792a2bdf4f4d0b432">getWidth</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the width of an image.</para>
<para><simplesect kind="return"><para>the width of the image. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgcn_1_1Exception" kindref="compound">Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if no image have been prepared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imageloader.h" line="142" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageLoader_1a605f2c02226446d6b70f55f5533e6344" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classgcn_1_1Color" kindref="compound">Color</ref></type>
        <definition>virtual Color gcn::ImageLoader::getPixel</definition>
        <argsstring>(int x, int y)=0</argsstring>
        <name>getPixel</name>
        <reimplementedby refid="classgcn_1_1SDLImageLoader_1adf260888fd0e6ec036b11ec3efc6d385">getPixel</reimplementedby>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the color of a pixel at coordinate x and y.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the color of the pixel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imageloader.h" line="151" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageLoader_1afc4dbd4b254b6be2ac2465f5b5ac4390" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::ImageLoader::putPixel</definition>
        <argsstring>(int x, int y, const Color &amp;color)=0</argsstring>
        <name>putPixel</name>
        <reimplementedby refid="classgcn_1_1SDLImageLoader_1a52d840c7ceaf1deaaaae8a372e0033a2">putPixel</reimplementedby>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classgcn_1_1Color" kindref="compound">Color</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Puts a pixel with a certain color at coordinate x and y.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>the color of the pixel to put. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imageloader.h" line="160" column="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ImageLoaders base class. Contains basic image loading functions every image loader should have. <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> loaders should inherit from this class and impements it&apos;s functions. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>gcn::ImageLoader</label>
        <link refid="classgcn_1_1ImageLoader"/>
      </node>
      <node id="2">
        <label>gcn::SDLImageLoader</label>
        <link refid="classgcn_1_1SDLImageLoader"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="src/guichan/include/guichan/imageloader.h" line="73" column="1" bodyfile="src/guichan/include/guichan/imageloader.h" bodystart="72" bodyend="161"/>
    <listofallmembers>
      <member refid="classgcn_1_1ImageLoader_1abc6d63fd34827e52431577be57d3ed9e" prot="public" virt="pure-virtual"><scope>gcn::ImageLoader</scope><name>discard</name></member>
      <member refid="classgcn_1_1ImageLoader_1aa43a9488443697421be2e12bca87a6eb" prot="public" virt="pure-virtual"><scope>gcn::ImageLoader</scope><name>finalize</name></member>
      <member refid="classgcn_1_1ImageLoader_1a929d9d08f40a1ec16e6476121d31b9c0" prot="public" virt="pure-virtual"><scope>gcn::ImageLoader</scope><name>free</name></member>
      <member refid="classgcn_1_1ImageLoader_1aaf09dbde0504436761b886359ec5f012" prot="public" virt="pure-virtual"><scope>gcn::ImageLoader</scope><name>getHeight</name></member>
      <member refid="classgcn_1_1ImageLoader_1a605f2c02226446d6b70f55f5533e6344" prot="public" virt="pure-virtual"><scope>gcn::ImageLoader</scope><name>getPixel</name></member>
      <member refid="classgcn_1_1ImageLoader_1a49fb1ffda9e4eeda976131ab643eebb9" prot="public" virt="pure-virtual"><scope>gcn::ImageLoader</scope><name>getRawData</name></member>
      <member refid="classgcn_1_1ImageLoader_1a868e7446825d4ab1b41b1e968546e132" prot="public" virt="pure-virtual"><scope>gcn::ImageLoader</scope><name>getWidth</name></member>
      <member refid="classgcn_1_1ImageLoader_1a4daabf5c6645601be6914489bf882291" prot="public" virt="pure-virtual"><scope>gcn::ImageLoader</scope><name>prepare</name></member>
      <member refid="classgcn_1_1ImageLoader_1afc4dbd4b254b6be2ac2465f5b5ac4390" prot="public" virt="pure-virtual"><scope>gcn::ImageLoader</scope><name>putPixel</name></member>
      <member refid="classgcn_1_1ImageLoader_1a894b75f8f25ebfa9e0962c2d499ca7ba" prot="public" virt="virtual"><scope>gcn::ImageLoader</scope><name>~ImageLoader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
