<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classCUDPSocket" kind="class" language="C++" prot="public">
    <compoundname>CUDPSocket</compoundname>
    <includes refid="netsockets_8h" local="no">netsockets.h</includes>
      <sectiondef kind="user-defined">
      <header>netsockets.cpp - TCP and UDP sockets.</header>
      <memberdef kind="function" id="classCUDPSocket_1aef5d2a06cf56ee8887f320e60078a82a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CUDPSocket::CUDPSocket</definition>
        <argsstring>()</argsstring>
        <name>CUDPSocket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/netsockets.h" line="60" column="1" bodyfile="src/network/netsockets.cpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classCUDPSocket_1a39013172842e53b7ea8ab7c4b6a9db34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CUDPSocket::~CUDPSocket</definition>
        <argsstring>()</argsstring>
        <name>~CUDPSocket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/netsockets.h" line="61" column="1" bodyfile="src/network/netsockets.cpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classCUDPSocket_1afd9ed81f556cd9cd251069aceb472dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CUDPSocket::Open</definition>
        <argsstring>(const CHost &amp;host)</argsstring>
        <name>Open</name>
        <param>
          <type>const <ref refid="classCHost" kindref="compound">CHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/netsockets.h" line="62" column="6" bodyfile="src/network/netsockets.cpp" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classCUDPSocket_1aee637e71f27e93ade5b9374394ed6ec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CUDPSocket::Close</definition>
        <argsstring>()</argsstring>
        <name>Close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/netsockets.h" line="63" column="6" bodyfile="src/network/netsockets.cpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classCUDPSocket_1a091db05b035447e6e59f000160a016b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CUDPSocket::Send</definition>
        <argsstring>(const CHost &amp;host, const void *buf, unsigned int len)</argsstring>
        <name>Send</name>
        <param>
          <type>const <ref refid="classCHost" kindref="compound">CHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/netsockets.h" line="64" column="6" bodyfile="src/network/netsockets.cpp" bodystart="138" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classCUDPSocket_1a56c6d50ccebb520c5501640668bd2c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CUDPSocket::Recv</definition>
        <argsstring>(void *buf, int len, CHost *hostFrom)</argsstring>
        <name>Recv</name>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="classCHost" kindref="compound">CHost</ref> *</type>
          <declname>hostFrom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/netsockets.h" line="65" column="5" bodyfile="src/network/netsockets.cpp" bodystart="148" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classCUDPSocket_1acc9fac5a0fd0a6b82160b8e74e700438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CUDPSocket::SetNonBlocking</definition>
        <argsstring>()</argsstring>
        <name>SetNonBlocking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/netsockets.h" line="66" column="6" bodyfile="src/network/netsockets.cpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classCUDPSocket_1abf7759886f4686f78184bd62d387bab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CUDPSocket::HasDataToRead</definition>
        <argsstring>(int timeout)</argsstring>
        <name>HasDataToRead</name>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/netsockets.h" line="68" column="5" bodyfile="src/network/netsockets.cpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classCUDPSocket_1a2f74968108fbebe11dae1c0f2eba2f5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CUDPSocket::IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/netsockets.h" line="69" column="6" bodyfile="src/network/netsockets.cpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classCUDPSocket_1ac814e04f2a6ab056e70c89defea3e31e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CUDPSocket::GetSocketAddresses</definition>
        <argsstring>(unsigned long *ips, int maxAddr)</argsstring>
        <name>GetSocketAddresses</name>
        <param>
          <type>unsigned long *</type>
          <declname>ips</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxAddr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/netsockets.h" line="70" column="5" bodyfile="src/network/netsockets.cpp" bodystart="179" bodyend="181"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCUDPSocket_1a2ddb1b92d1a2930d5f6d714275c15809" prot="private" static="no" mutable="no">
        <type><ref refid="classCUDPSocket__Impl" kindref="compound">CUDPSocket_Impl</ref> *</type>
        <definition>CUDPSocket_Impl* CUDPSocket::m_impl</definition>
        <argsstring></argsstring>
        <name>m_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/netsockets.h" line="98" column="17" bodyfile="src/include/network/netsockets.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/include/network/netsockets.h" line="58" column="1" bodyfile="src/include/network/netsockets.h" bodystart="57" bodyend="99"/>
    <listofallmembers>
      <member refid="classCUDPSocket_1aee637e71f27e93ade5b9374394ed6ec7" prot="public" virt="non-virtual"><scope>CUDPSocket</scope><name>Close</name></member>
      <member refid="classCUDPSocket_1aef5d2a06cf56ee8887f320e60078a82a" prot="public" virt="non-virtual"><scope>CUDPSocket</scope><name>CUDPSocket</name></member>
      <member refid="classCUDPSocket_1ac814e04f2a6ab056e70c89defea3e31e" prot="public" virt="non-virtual"><scope>CUDPSocket</scope><name>GetSocketAddresses</name></member>
      <member refid="classCUDPSocket_1abf7759886f4686f78184bd62d387bab1" prot="public" virt="non-virtual"><scope>CUDPSocket</scope><name>HasDataToRead</name></member>
      <member refid="classCUDPSocket_1a2f74968108fbebe11dae1c0f2eba2f5f" prot="public" virt="non-virtual"><scope>CUDPSocket</scope><name>IsValid</name></member>
      <member refid="classCUDPSocket_1a2ddb1b92d1a2930d5f6d714275c15809" prot="private" virt="non-virtual"><scope>CUDPSocket</scope><name>m_impl</name></member>
      <member refid="classCUDPSocket_1afd9ed81f556cd9cd251069aceb472dbb" prot="public" virt="non-virtual"><scope>CUDPSocket</scope><name>Open</name></member>
      <member refid="classCUDPSocket_1a56c6d50ccebb520c5501640668bd2c79" prot="public" virt="non-virtual"><scope>CUDPSocket</scope><name>Recv</name></member>
      <member refid="classCUDPSocket_1a091db05b035447e6e59f000160a016b7" prot="public" virt="non-virtual"><scope>CUDPSocket</scope><name>Send</name></member>
      <member refid="classCUDPSocket_1acc9fac5a0fd0a6b82160b8e74e700438" prot="public" virt="non-virtual"><scope>CUDPSocket</scope><name>SetNonBlocking</name></member>
      <member refid="classCUDPSocket_1a39013172842e53b7ea8ab7c4b6a9db34" prot="public" virt="non-virtual"><scope>CUDPSocket</scope><name>~CUDPSocket</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
