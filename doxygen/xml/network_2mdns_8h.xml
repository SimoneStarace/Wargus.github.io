<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="network_2mdns_8h" kind="file" language="C++">
    <compoundname>mdns.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">netinet/in.h</includes>
    <includedby refid="mdns_8h" local="yes">src/include/mdns.h</includedby>
    <includedby refid="mdns_8cpp" local="yes">src/network/mdns.cpp</includedby>
    <includedby refid="netconnect_8cpp" local="yes">src/network/netconnect.cpp</includedby>
    <incdepgraph>
      <node id="9">
        <label>netinet/in.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>src/include/network/mdns.h</label>
        <link refid="network_2mdns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>fcntl.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>unistd.h</label>
      </node>
      <node id="8">
        <label>sys/socket.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>src/network/netconnect.cpp</label>
        <link refid="netconnect_8cpp"/>
      </node>
      <node id="1">
        <label>src/include/network/mdns.h</label>
        <link refid="network_2mdns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/include/mdns.h</label>
        <link refid="mdns_8h"/>
      </node>
      <node id="3">
        <label>src/network/mdns.cpp</label>
        <link refid="mdns_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structmdns__string__t" prot="public">mdns_string_t</innerclass>
    <innerclass refid="structmdns__string__pair__t" prot="public">mdns_string_pair_t</innerclass>
    <innerclass refid="structmdns__record__srv__t" prot="public">mdns_record_srv_t</innerclass>
    <innerclass refid="structmdns__record__txt__t" prot="public">mdns_record_txt_t</innerclass>
    <innerclass refid="structmdns__header__t" prot="public">mdns_header_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="network_2mdns_8h_1a2f3723bb1bea5c7e20d220eb1537fade" prot="public" static="no">
        <name>MDNS_INVALID_POS</name>
        <initializer>((size_t)-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="37" column="9" bodyfile="src/include/network/mdns.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="network_2mdns_8h_1ac54c97079c5353bc63940228750e2036" prot="public" static="no">
        <name>MDNS_STRING_CONST</name>
        <param><defname>s</defname></param>
        <initializer>(s), (sizeof((s)) - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="39" column="9" bodyfile="src/include/network/mdns.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="network_2mdns_8h_1a2ac87e5851a970c2aabff02215d09410" prot="public" static="no">
        <name>MDNS_STRING_FORMAT</name>
        <param><defname>s</defname></param>
        <initializer>(int)((s).length), s.str</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="40" column="9" bodyfile="src/include/network/mdns.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="network_2mdns_8h_1a10ce59f01e176e4f80689d21fce0b449" prot="public" static="no">
        <name>MDNS_POINTER_OFFSET</name>
        <param><defname>p</defname></param>
        <param><defname>ofs</defname></param>
        <initializer>((<ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref>*)((char*)(p) + (ptrdiff_t)(ofs)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="42" column="9" bodyfile="src/include/network/mdns.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="network_2mdns_8h_1a0e5c2d66699604e9a0f0626fda922e0a" prot="public" static="no">
        <name>MDNS_POINTER_OFFSET_CONST</name>
        <param><defname>p</defname></param>
        <param><defname>ofs</defname></param>
        <initializer>((const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref>*)((const char*)(p) + (ptrdiff_t)(ofs)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="43" column="9" bodyfile="src/include/network/mdns.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="network_2mdns_8h_1a9a2423d25a64a349d45abb70c878599f" prot="public" static="no">
        <name>MDNS_POINTER_DIFF</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((size_t)((const char*)(a) - (const char*)(b)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="44" column="9" bodyfile="src/include/network/mdns.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="network_2mdns_8h_1ab16900c77e60e00f401b684c45a37c34" prot="public" static="no">
        <name>MDNS_PORT</name>
        <initializer>5353</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="46" column="9" bodyfile="src/include/network/mdns.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="network_2mdns_8h_1aea47ab7d18d51b7de50494cc0b8d0226" prot="public" static="no">
        <name>MDNS_UNICAST_RESPONSE</name>
        <initializer>0x8000U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="47" column="9" bodyfile="src/include/network/mdns.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="network_2mdns_8h_1a0381a056b80b2e89594a152cfa7b2b86" prot="public" static="no">
        <name>MDNS_CACHE_FLUSH</name>
        <initializer>0x8000U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="48" column="9" bodyfile="src/include/network/mdns.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="network_2mdns_8h_1a799bbe55ac49762d43543bc5f0dcfa3f" prot="public" static="no" strong="no">
        <type></type>
        <name>mdns_record_type</name>
        <enumvalue id="network_2mdns_8h_1a799bbe55ac49762d43543bc5f0dcfa3fa9dc919c2522dba980d7e5b93575bf87b" prot="public">
          <name>MDNS_RECORDTYPE_IGNORE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="network_2mdns_8h_1a799bbe55ac49762d43543bc5f0dcfa3fad811897dbc830b8b9b959472999c605c" prot="public">
          <name>MDNS_RECORDTYPE_A</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="network_2mdns_8h_1a799bbe55ac49762d43543bc5f0dcfa3faf6e08040c5c8439fd0090bf01a701348" prot="public">
          <name>MDNS_RECORDTYPE_PTR</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="network_2mdns_8h_1a799bbe55ac49762d43543bc5f0dcfa3fac07ca4f9ccf9296b2cb5ec8e5241c5f7" prot="public">
          <name>MDNS_RECORDTYPE_TXT</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="network_2mdns_8h_1a799bbe55ac49762d43543bc5f0dcfa3faabb09f4e829bb77542ed10b753056843" prot="public">
          <name>MDNS_RECORDTYPE_AAAA</name>
          <initializer>= 28</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="network_2mdns_8h_1a799bbe55ac49762d43543bc5f0dcfa3fa9036837e429aa54daed2a35ebacd1e27" prot="public">
          <name>MDNS_RECORDTYPE_SRV</name>
          <initializer>= 33</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="50" column="22" bodyfile="src/include/network/mdns.h" bodystart="50" bodyend="62"/>
      </memberdef>
      <memberdef kind="enum" id="network_2mdns_8h_1ab7635068303cd41bda681972a6e0f5c3" prot="public" static="no" strong="no">
        <type></type>
        <name>mdns_entry_type</name>
        <enumvalue id="network_2mdns_8h_1ab7635068303cd41bda681972a6e0f5c3a7425d8d7dff20c73f78526fbb460571f" prot="public">
          <name>MDNS_ENTRYTYPE_QUESTION</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="network_2mdns_8h_1ab7635068303cd41bda681972a6e0f5c3ae0304e854ab980bc4a342af305fc9193" prot="public">
          <name>MDNS_ENTRYTYPE_ANSWER</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="network_2mdns_8h_1ab7635068303cd41bda681972a6e0f5c3ae626952e2822108f31cd24a85b786e26" prot="public">
          <name>MDNS_ENTRYTYPE_AUTHORITY</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="network_2mdns_8h_1ab7635068303cd41bda681972a6e0f5c3a8cbc6f5dd6bcee2303aa52a4190c34c2" prot="public">
          <name>MDNS_ENTRYTYPE_ADDITIONAL</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="64" column="21" bodyfile="src/include/network/mdns.h" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="enum" id="network_2mdns_8h_1a74b6b6e12096882c959a143a49ca0711" prot="public" static="no" strong="no">
        <type></type>
        <name>mdns_class</name>
        <enumvalue id="network_2mdns_8h_1a74b6b6e12096882c959a143a49ca0711aebd9c4f3a3d825eadf45664e6a54fbe9" prot="public">
          <name>MDNS_CLASS_IN</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="71" column="16" bodyfile="src/include/network/mdns.h" bodystart="71" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="network_2mdns_8h_1a7d410a6546a7662f2f72933240fb53aa" prot="public" static="no">
        <type>enum <ref refid="network_2mdns_8h_1a799bbe55ac49762d43543bc5f0dcfa3f" kindref="member">mdns_record_type</ref></type>
        <definition>typedef enum mdns_record_type mdns_record_type_t</definition>
        <argsstring></argsstring>
        <name>mdns_record_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="1" column="0" bodyfile="src/include/network/mdns.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="network_2mdns_8h_1a980c1fc84cc6714d5ca0e0de1aa8247a" prot="public" static="no">
        <type>enum <ref refid="network_2mdns_8h_1ab7635068303cd41bda681972a6e0f5c3" kindref="member">mdns_entry_type</ref></type>
        <definition>typedef enum mdns_entry_type mdns_entry_type_t</definition>
        <argsstring></argsstring>
        <name>mdns_entry_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="1" column="0" bodyfile="src/include/network/mdns.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="network_2mdns_8h_1a55f9caf4dfde6e49b914a6af4def72f8" prot="public" static="no">
        <type>enum <ref refid="network_2mdns_8h_1a74b6b6e12096882c959a143a49ca0711" kindref="member">mdns_class</ref></type>
        <definition>typedef enum mdns_class mdns_class_t</definition>
        <argsstring></argsstring>
        <name>mdns_class_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="1" column="0" bodyfile="src/include/network/mdns.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="network_2mdns_8h_1ab3ace251e18a71c62d3f39fb33369f8c" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* mdns_record_callback_fn) (int sock, const struct sockaddr *from, size_t addrlen, mdns_entry_type_t entry, uint16_t query_id, uint16_t rtype, uint16_t rclass, uint32_t ttl, const void *data, size_t size, size_t name_offset, size_t name_length, size_t record_offset, size_t record_length, void *user_data)</definition>
        <argsstring>)(int sock, const struct sockaddr *from, size_t addrlen, mdns_entry_type_t entry, uint16_t query_id, uint16_t rtype, uint16_t rclass, uint32_t ttl, const void *data, size_t size, size_t name_offset, size_t name_length, size_t record_offset, size_t record_length, void *user_data)</argsstring>
        <name>mdns_record_callback_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="77" column="9" bodyfile="src/include/network/mdns.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="network_2mdns_8h_1a6a8b52730bce8c7e0e57794ab7f5e611" prot="public" static="no">
        <type>struct <ref refid="structmdns__string__t" kindref="compound">mdns_string_t</ref></type>
        <definition>typedef struct mdns_string_t mdns_string_t</definition>
        <argsstring></argsstring>
        <name>mdns_string_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="77" column="9" bodyfile="src/include/network/mdns.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="network_2mdns_8h_1ac1dcc146062ce06d5ff7d89d574e11c6" prot="public" static="no">
        <type>struct <ref refid="structmdns__string__pair__t" kindref="compound">mdns_string_pair_t</ref></type>
        <definition>typedef struct mdns_string_pair_t mdns_string_pair_t</definition>
        <argsstring></argsstring>
        <name>mdns_string_pair_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="77" column="9" bodyfile="src/include/network/mdns.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="network_2mdns_8h_1a4a4299f5ed16b03645e8b5b0eea41256" prot="public" static="no">
        <type>struct <ref refid="structmdns__record__srv__t" kindref="compound">mdns_record_srv_t</ref></type>
        <definition>typedef struct mdns_record_srv_t mdns_record_srv_t</definition>
        <argsstring></argsstring>
        <name>mdns_record_srv_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="77" column="9" bodyfile="src/include/network/mdns.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="network_2mdns_8h_1a381cd3ff4e89187b5179cf4122068f3f" prot="public" static="no">
        <type>struct <ref refid="structmdns__record__txt__t" kindref="compound">mdns_record_txt_t</ref></type>
        <definition>typedef struct mdns_record_txt_t mdns_record_txt_t</definition>
        <argsstring></argsstring>
        <name>mdns_record_txt_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="77" column="9" bodyfile="src/include/network/mdns.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="network_2mdns_8h_1aa828f15d731c0e9c531b6001d691d54f" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t mdns_size_t</definition>
        <argsstring></argsstring>
        <name>mdns_size_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="91" column="16" bodyfile="src/include/network/mdns.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="network_2mdns_8h_1a87807e1b687ba2d1853c3b2ceba67aff" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t mdns_services_query[]</definition>
        <argsstring>[]</argsstring>
        <name>mdns_services_query</name>
        <initializer>= {
    
    0x00, 0x00,
    
    0x00, 0x00,
    
    0x00, 0x01,
    
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    0x09, &apos;<ref refid="translate_8h_1a6554a5ea005e85d0f84f2f34c11de938" kindref="member">_</ref>&apos;, &apos;s&apos;, &apos;e&apos;, &apos;r&apos;, &apos;v&apos;, &apos;i&apos;, &apos;c&apos;, &apos;e&apos;, &apos;s&apos;, 0x07, &apos;<ref refid="translate_8h_1a6554a5ea005e85d0f84f2f34c11de938" kindref="member">_</ref>&apos;, &apos;d&apos;, &apos;n&apos;, &apos;s&apos;, &apos;-&apos;, &apos;s&apos;, &apos;d&apos;,
    0x04, &apos;<ref refid="translate_8h_1a6554a5ea005e85d0f84f2f34c11de938" kindref="member">_</ref>&apos;, &apos;u&apos;, &apos;d&apos;, &apos;p&apos;, 0x05, &apos;l&apos;, &apos;o&apos;, &apos;c&apos;, &apos;a&apos;, &apos;l&apos;, 0x00,
    
    0x00, <ref refid="network_2mdns_8h_1a799bbe55ac49762d43543bc5f0dcfa3faf6e08040c5c8439fd0090bf01a701348" kindref="member">MDNS_RECORDTYPE_PTR</ref>,
    
    0x80, <ref refid="network_2mdns_8h_1a74b6b6e12096882c959a143a49ca0711aebd9c4f3a3d825eadf45664e6a54fbe9" kindref="member">MDNS_CLASS_IN</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="671" column="22" bodyfile="src/include/network/mdns.h" bodystart="671" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="network_2mdns_8h_1a00b058af07cf3ab720d543c8bf1dabda" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_socket_open_ipv4</definition>
        <argsstring>(struct sockaddr_in *saddr)</argsstring>
        <name>mdns_socket_open_ipv4</name>
        <param>
          <type>struct sockaddr_in *</type>
          <declname>saddr</declname>
        </param>
        <briefdescription>
<para><ref refid="structOpen" kindref="compound">Open</ref> and setup a IPv4 socket for mDNS/DNS-SD. To bind the socket to a specific interface,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="262" column="1" bodyfile="src/include/network/mdns.h" bodystart="262" bodyend="271" declfile="src/include/network/mdns.h" declline="134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a527485fb78e9131af8452400b2df6a49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_socket_setup_ipv4</definition>
        <argsstring>(int sock, struct sockaddr_in *saddr)</argsstring>
        <name>mdns_socket_setup_ipv4</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>struct sockaddr_in *</type>
          <declname>saddr</declname>
        </param>
        <briefdescription>
<para>Setup an already opened IPv4 socket for mDNS/DNS-SD. To bind the socket to a specific interface,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="274" column="1" bodyfile="src/include/network/mdns.h" bodystart="274" bodyend="323" declfile="src/include/network/mdns.h" declline="142" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a991b0282501f3e3e215c41646b755b75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_socket_open_ipv6</definition>
        <argsstring>(struct sockaddr_in6 *saddr)</argsstring>
        <name>mdns_socket_open_ipv6</name>
        <param>
          <type>struct sockaddr_in6 *</type>
          <declname>saddr</declname>
        </param>
        <briefdescription>
<para><ref refid="structOpen" kindref="compound">Open</ref> and setup a IPv6 socket for mDNS/DNS-SD. To bind the socket to a specific interface,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="326" column="1" bodyfile="src/include/network/mdns.h" bodystart="326" bodyend="335" declfile="src/include/network/mdns.h" declline="150" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1ab1069ea3951df8a0aeda61ffd2bda105" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_socket_setup_ipv6</definition>
        <argsstring>(int sock, struct sockaddr_in6 *saddr)</argsstring>
        <name>mdns_socket_setup_ipv6</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>struct sockaddr_in6 *</type>
          <declname>saddr</declname>
        </param>
        <briefdescription>
<para>Setup an already opened IPv6 socket for mDNS/DNS-SD. To bind the socket to a specific interface,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="338" column="1" bodyfile="src/include/network/mdns.h" bodystart="338" bodyend="387" declfile="src/include/network/mdns.h" declline="158" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a3e311a0c46142494866f015317d49db0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>static void mdns_socket_close</definition>
        <argsstring>(int sock)</argsstring>
        <name>mdns_socket_close</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
<para>Close a socket opened with mdns_socket_open_ipv4 and mdns_socket_open_ipv6. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="390" column="1" bodyfile="src/include/network/mdns.h" bodystart="390" bodyend="396" declfile="src/include/network/mdns.h" declline="162" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a5bf726242fd870eb5436cd7711aed2d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t mdns_socket_listen</definition>
        <argsstring>(int sock, void *buffer, size_t capacity, mdns_record_callback_fn callback, void *user_data)</argsstring>
        <name>mdns_socket_listen</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type><ref refid="network_2mdns_8h_1ab3ace251e18a71c62d3f39fb33369f8c" kindref="member">mdns_record_callback_fn</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Listen for incoming multicast DNS-SD and mDNS query requests. The socket should have been. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="788" column="1" bodyfile="src/include/network/mdns.h" bodystart="788" bodyend="848" declfile="src/include/network/mdns.h" declline="168" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a3b7caf4a77fdbdac6aa30a42918c729a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_discovery_send</definition>
        <argsstring>(int sock)</argsstring>
        <name>mdns_discovery_send</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
<para>Send a multicast DNS-SD reqeuest on the given socket to discover available services. Returns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="689" column="1" bodyfile="src/include/network/mdns.h" bodystart="689" bodyend="691" declfile="src/include/network/mdns.h" declline="174" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a6ca81f5e80a2bb6b57ae58569aeab5e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t mdns_discovery_recv</definition>
        <argsstring>(int sock, void *buffer, size_t capacity, mdns_record_callback_fn callback, void *user_data)</argsstring>
        <name>mdns_discovery_recv</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type><ref refid="network_2mdns_8h_1ab3ace251e18a71c62d3f39fb33369f8c" kindref="member">mdns_record_callback_fn</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Recieve unicast responses to a DNS-SD sent with mdns_discovery_send. Any data will be piped to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="694" column="1" bodyfile="src/include/network/mdns.h" bodystart="694" bodyend="785" declfile="src/include/network/mdns.h" declline="179" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a41fb18a66395424052d49022f86a6785" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_discovery_answer</definition>
        <argsstring>(int sock, const void *address, size_t address_size, void *buffer, size_t capacity, const char *record, size_t length)</argsstring>
        <name>mdns_discovery_answer</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>address_size</declname>
        </param>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>record</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Send a unicast DNS-SD answer with a single record to the given address. Returns 0 if success,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="851" column="1" bodyfile="src/include/network/mdns.h" bodystart="851" bodyend="887" declfile="src/include/network/mdns.h" declline="185" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a5d73f36c8420e154c2dc94a899ec63fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_query_send</definition>
        <argsstring>(int sock, mdns_record_type_t type, const char *name, size_t length, void *buffer, size_t capacity, uint16_t query_id)</argsstring>
        <name>mdns_query_send</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="network_2mdns_8h_1a7d410a6546a7662f2f72933240fb53aa" kindref="member">mdns_record_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>query_id</declname>
        </param>
        <briefdescription>
<para>Send a multicast mDNS query on the given socket for the given service name. The supplied buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Optional unicast response based on local port, class IN</para>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="890" column="1" bodyfile="src/include/network/mdns.h" bodystart="890" bodyend="934" declfile="src/include/network/mdns.h" declline="195" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1afe9eb2635f4f15a77c6a72898382d7e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t mdns_query_recv</definition>
        <argsstring>(int sock, void *buffer, size_t capacity, mdns_record_callback_fn callback, void *user_data, int query_id)</argsstring>
        <name>mdns_query_recv</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type><ref refid="network_2mdns_8h_1ab3ace251e18a71c62d3f39fb33369f8c" kindref="member">mdns_record_callback_fn</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>query_id</declname>
        </param>
        <briefdescription>
<para>Receive unicast responses to a mDNS query sent with mdns_discovery_recv, optionally filtering. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="937" column="1" bodyfile="src/include/network/mdns.h" bodystart="937" bodyend="991" declfile="src/include/network/mdns.h" declline="203" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1ac6863ba0390c5b13dab1f257d607813a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_query_answer</definition>
        <argsstring>(int sock, const void *address, size_t address_size, void *buffer, size_t capacity, uint16_t query_id, const char *service, size_t service_length, const char *hostname, size_t hostname_length, uint32_t ipv4, const uint8_t *ipv6, uint16_t port, const char *txt, size_t txt_length)</argsstring>
        <name>mdns_query_answer</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>address_size</declname>
        </param>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>query_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>service</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>service_length</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>hostname</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hostname_length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ipv4</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>ipv6</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>txt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>txt_length</declname>
        </param>
        <briefdescription>
<para>Send a unicast or multicast mDNS query answer with a single record to the given address. The. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="994" column="1" bodyfile="src/include/network/mdns.h" bodystart="994" bodyend="1154" declfile="src/include/network/mdns.h" declline="212" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1af73bc0ac1427c04942760fc4e84fc6f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmdns__string__t" kindref="compound">mdns_string_t</ref></type>
        <definition>static mdns_string_t mdns_string_extract</definition>
        <argsstring>(const void *buffer, size_t size, size_t *offset, char *str, size_t capacity)</argsstring>
        <name>mdns_string_extract</name>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="490" column="1" bodyfile="src/include/network/mdns.h" bodystart="490" bodyend="524" declfile="src/include/network/mdns.h" declline="220" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a851514effd855e4500c0a4d16cb5ee97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_string_skip</definition>
        <argsstring>(const void *buffer, size_t size, size_t *offset)</argsstring>
        <name>mdns_string_skip</name>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="433" column="1" bodyfile="src/include/network/mdns.h" bodystart="433" bodyend="449" declfile="src/include/network/mdns.h" declline="223" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a3e87733d511cf65cc97a84dee5bc1148" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_string_equal</definition>
        <argsstring>(const void *buffer_lhs, size_t size_lhs, size_t *ofs_lhs, const void *buffer_rhs, size_t size_rhs, size_t *ofs_rhs)</argsstring>
        <name>mdns_string_equal</name>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer_lhs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size_lhs</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>ofs_lhs</declname>
        </param>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer_rhs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size_rhs</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>ofs_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="452" column="1" bodyfile="src/include/network/mdns.h" bodystart="452" bodyend="487" declfile="src/include/network/mdns.h" declline="226" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a4f17b5bcdfed5d67cd73eb7d937d4831" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
        <definition>static void * mdns_string_make</definition>
        <argsstring>(void *data, size_t capacity, const char *name, size_t length)</argsstring>
        <name>mdns_string_make</name>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="538" column="1" bodyfile="src/include/network/mdns.h" bodystart="538" bodyend="571" declfile="src/include/network/mdns.h" declline="230" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a59cb21fff298019fd706c2f14766202b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
        <definition>static void * mdns_string_make_ref</definition>
        <argsstring>(void *data, size_t capacity, size_t ref_offset)</argsstring>
        <name>mdns_string_make_ref</name>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ref_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="574" column="1" bodyfile="src/include/network/mdns.h" bodystart="574" bodyend="580" declfile="src/include/network/mdns.h" declline="233" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1ab7706951326a6437613574a541b9de7d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
        <definition>static void * mdns_string_make_with_ref</definition>
        <argsstring>(void *data, size_t capacity, const char *name, size_t length, size_t ref_offset)</argsstring>
        <name>mdns_string_make_with_ref</name>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ref_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="583" column="1" bodyfile="src/include/network/mdns.h" bodystart="583" bodyend="590" declfile="src/include/network/mdns.h" declline="236" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a2cb2dea16790c0636dcf7164cc9b37c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmdns__string__t" kindref="compound">mdns_string_t</ref></type>
        <definition>static mdns_string_t mdns_record_parse_ptr</definition>
        <argsstring>(const void *buffer, size_t size, size_t offset, size_t length, char *strbuffer, size_t capacity)</argsstring>
        <name>mdns_record_parse_ptr</name>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strbuffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="1157" column="1" bodyfile="src/include/network/mdns.h" bodystart="1157" bodyend="1164" declfile="src/include/network/mdns.h" declline="240" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a1915d9cf5f3b4f4f3a8a8b4f15c80da6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmdns__record__srv__t" kindref="compound">mdns_record_srv_t</ref></type>
        <definition>static mdns_record_srv_t mdns_record_parse_srv</definition>
        <argsstring>(const void *buffer, size_t size, size_t offset, size_t length, char *strbuffer, size_t capacity)</argsstring>
        <name>mdns_record_parse_srv</name>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strbuffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="1167" column="1" bodyfile="src/include/network/mdns.h" bodystart="1167" bodyend="1186" declfile="src/include/network/mdns.h" declline="244" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1aa282c761bd281d0befa5e1a12cd8660e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct sockaddr_in *</type>
        <definition>static struct sockaddr_in * mdns_record_parse_a</definition>
        <argsstring>(const void *buffer, size_t size, size_t offset, size_t length, struct sockaddr_in *addr)</argsstring>
        <name>mdns_record_parse_a</name>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>struct sockaddr_in *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="1189" column="1" bodyfile="src/include/network/mdns.h" bodystart="1189" bodyend="1199" declfile="src/include/network/mdns.h" declline="248" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a8b25f9f9ecd11b981b77c0aecf303447" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct sockaddr_in6 *</type>
        <definition>static struct sockaddr_in6 * mdns_record_parse_aaaa</definition>
        <argsstring>(const void *buffer, size_t size, size_t offset, size_t length, struct sockaddr_in6 *addr)</argsstring>
        <name>mdns_record_parse_aaaa</name>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>struct sockaddr_in6 *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="1202" column="1" bodyfile="src/include/network/mdns.h" bodystart="1202" bodyend="1212" declfile="src/include/network/mdns.h" declline="252" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a87b116210738523677074592292b82ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t mdns_record_parse_txt</definition>
        <argsstring>(const void *buffer, size_t size, size_t offset, size_t length, mdns_record_txt_t *records, size_t capacity)</argsstring>
        <name>mdns_record_parse_txt</name>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="structmdns__record__txt__t" kindref="compound">mdns_record_txt_t</ref> *</type>
          <declname>records</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="1215" column="1" bodyfile="src/include/network/mdns.h" bodystart="1215" bodyend="1260" declfile="src/include/network/mdns.h" declline="256" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1ab7f7e1897e800cd2cec98c8b8b7ad52f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_is_string_ref</definition>
        <argsstring>(uint8_t val)</argsstring>
        <name>mdns_is_string_ref</name>
        <param>
          <type>uint8_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="399" column="1" bodyfile="src/include/network/mdns.h" bodystart="399" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a4a9b5112dd746f13ea9dc520804ee809" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmdns__string__pair__t" kindref="compound">mdns_string_pair_t</ref></type>
        <definition>static mdns_string_pair_t mdns_get_next_substring</definition>
        <argsstring>(const void *rawdata, size_t size, size_t offset)</argsstring>
        <name>mdns_get_next_substring</name>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>rawdata</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="404" column="1" bodyfile="src/include/network/mdns.h" bodystart="404" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a1f0ea422019a1d2c50a7e4474655a777" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t mdns_string_find</definition>
        <argsstring>(const char *str, size_t length, char c, size_t offset)</argsstring>
        <name>mdns_string_find</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="527" column="1" bodyfile="src/include/network/mdns.h" bodystart="527" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1a7040a772ba6e848809d6193ee22ab7bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t mdns_records_parse</definition>
        <argsstring>(int sock, const struct sockaddr *from, size_t addrlen, const void *buffer, size_t size, size_t *offset, mdns_entry_type_t type, uint16_t query_id, size_t records, mdns_record_callback_fn callback, void *user_data)</argsstring>
        <name>mdns_records_parse</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const struct sockaddr *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>addrlen</declname>
        </param>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="network_2mdns_8h_1a980c1fc84cc6714d5ca0e0de1aa8247a" kindref="member">mdns_entry_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>query_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>records</declname>
        </param>
        <param>
          <type><ref refid="network_2mdns_8h_1ab3ace251e18a71c62d3f39fb33369f8c" kindref="member">mdns_record_callback_fn</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="593" column="1" bodyfile="src/include/network/mdns.h" bodystart="593" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1acc9886f626c6a747201225635dbf0c29" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_unicast_send</definition>
        <argsstring>(int sock, const void *address, size_t address_size, const void *buffer, size_t size)</argsstring>
        <name>mdns_unicast_send</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>address_size</declname>
        </param>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="625" column="1" bodyfile="src/include/network/mdns.h" bodystart="625" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="network_2mdns_8h_1adbdbcb9a95024a21e2c487e7ed1456eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mdns_multicast_send</definition>
        <argsstring>(int sock, const void *buffer, size_t size)</argsstring>
        <name>mdns_multicast_send</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const <ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/network/mdns.h" line="634" column="1" bodyfile="src/include/network/mdns.h" bodystart="634" bodyend="669"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/include/network/mdns.h"/>
  </compounddef>
</doxygen>
