<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="unit__find_8cpp" kind="file" language="C++">
    <compoundname>unit_find.cpp</compoundname>
    <includes local="no">limits.h</includes>
    <includes refid="stratagus_8h" local="yes">stratagus.h</includes>
    <includes refid="unit__find_8h" local="yes">unit_find.h</includes>
    <includes refid="actions_8h" local="yes">actions.h</includes>
    <includes refid="map_8h" local="yes">map.h</includes>
    <includes refid="missile_8h" local="yes">missile.h</includes>
    <includes refid="pathfinder_8h" local="yes">pathfinder.h</includes>
    <includes refid="player_8h" local="yes">player.h</includes>
    <includes refid="spells_8h" local="yes">spells.h</includes>
    <includes refid="tileset_8h" local="yes">tileset.h</includes>
    <includes refid="unit_8h" local="yes">unit.h</includes>
    <includes refid="unit__manager_8h" local="yes">unit_manager.h</includes>
    <includes refid="unittype_8h" local="yes">unittype.h</includes>
    <incdepgraph>
      <node id="44">
        <label>list</label>
      </node>
      <node id="23">
        <label>upgrade_structs.h</label>
        <link refid="upgrade__structs_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>script.h</label>
        <link refid="script_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>queue</label>
      </node>
      <node id="7">
        <label>cstdint</label>
      </node>
      <node id="5">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>lua.h</label>
      </node>
      <node id="18">
        <label>stdint.h</label>
      </node>
      <node id="41">
        <label>variant</label>
      </node>
      <node id="31">
        <label>actions.h</label>
        <link refid="actions_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>unit_manager.h</label>
        <link refid="unit__manager_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>pathfinder.h</label>
        <link refid="pathfinder_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="38">
        <label>spells.h</label>
        <link refid="spells_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>map</label>
      </node>
      <node id="32">
        <label>unitptr.h</label>
        <link refid="unitptr_8h"/>
      </node>
      <node id="2">
        <label>limits.h</label>
      </node>
      <node id="13">
        <label>unit_cache.h</label>
        <link refid="unit__cache_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>lauxlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="26">
        <label>missileconfig.h</label>
        <link refid="missileconfig_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>luacallback.h</label>
        <link refid="luacallback_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="40">
        <label>utility</label>
      </node>
      <node id="3">
        <label>stratagus.h</label>
        <link refid="stratagus_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>color.h</label>
        <link refid="include_2color_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>unitsound.h</label>
        <link refid="unitsound_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>missile.h</label>
        <link refid="missile_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>icons.h</label>
        <link refid="icons_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstdlib</label>
      </node>
      <node id="27">
        <label>climits</label>
      </node>
      <node id="11">
        <label>map.h</label>
        <link refid="map_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>vec2i.h</label>
        <link refid="vec2i_8h"/>
      </node>
      <node id="21">
        <label>unit.h</label>
        <link refid="unit_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/unit/unit_find.cpp</label>
        <link refid="unit__find_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>tileset.h</label>
        <link refid="tileset_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>tile.h</label>
        <link refid="tile_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>unit_find.h</label>
        <link refid="unit__find_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>set</label>
      </node>
      <node id="22">
        <label>unittype.h</label>
        <link refid="unittype_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>algorithm</label>
      </node>
      <node id="29">
        <label>player.h</label>
        <link refid="player_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>lualib.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classTerrainFinder" prot="public">TerrainFinder</innerclass>
    <innerclass refid="classBestDepotFinder" prot="public">BestDepotFinder</innerclass>
    <innerclass refid="classCResourceFinder" prot="public">CResourceFinder</innerclass>
    <innerclass refid="classResourceUnitFinder" prot="public">ResourceUnitFinder</innerclass>
    <innerclass refid="structResourceUnitFinder_1_1ResourceUnitFinder__Cost" prot="private">ResourceUnitFinder::ResourceUnitFinder_Cost</innerclass>
    <innerclass refid="classIsADepositForResource" prot="public">IsADepositForResource</innerclass>
    <innerclass refid="classBestTargetFinder" prot="public">BestTargetFinder</innerclass>
    <innerclass refid="classBestRangeTargetFinder" prot="public">BestRangeTargetFinder</innerclass>
    <innerclass refid="classBestRangeTargetFinder_1_1FillBadGood" prot="public">BestRangeTargetFinder::FillBadGood</innerclass>
    <innerclass refid="structCompareUnitDistance" prot="public">CompareUnitDistance</innerclass>
      <sectiondef kind="user-defined">
      <header>unit_find.cpp - The find/select for units.</header>
      <memberdef kind="function" id="unit__find_8cpp_1ac09184307a92ec8344b889f49a3eec36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void Select</definition>
        <argsstring>(const Vec2i &amp;ltPos, const Vec2i &amp;rbPos, std::vector&lt; CUnit * &gt; &amp;units)</argsstring>
        <name>Select</name>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>ltPos</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>rbPos</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classCUnit" kindref="compound">CUnit</ref> * &gt; &amp;</type>
          <declname>units</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="57" column="6" bodyfile="src/unit/unit_find.cpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a4b7105e8e40215a2e275a172a07f808c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SelectFixed</definition>
        <argsstring>(const Vec2i &amp;ltPos, const Vec2i &amp;rbPos, std::vector&lt; CUnit * &gt; &amp;units)</argsstring>
        <name>SelectFixed</name>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>ltPos</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>rbPos</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classCUnit" kindref="compound">CUnit</ref> * &gt; &amp;</type>
          <declname>units</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="62" column="6" bodyfile="src/unit/unit_find.cpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1aac2994c7ac1406f47eb0e0c8f10d16c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SelectAroundUnit</definition>
        <argsstring>(const CUnit &amp;unit, int range, std::vector&lt; CUnit * &gt; &amp;around)</argsstring>
        <name>SelectAroundUnit</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>range</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classCUnit" kindref="compound">CUnit</ref> * &gt; &amp;</type>
          <declname>around</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="67" column="6" bodyfile="src/unit/unit_find.cpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a814b3c9e02b0dd0b081de5834fffdda1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool FindTerrainType</definition>
        <argsstring>(int movemask, int resmask, int range, const CPlayer &amp;player, const Vec2i &amp;startPos, Vec2i *terrainPos)</argsstring>
        <name>FindTerrainType</name>
        <param>
          <type>int</type>
          <declname>movemask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>resmask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>range</declname>
        </param>
        <param>
          <type>const <ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>player</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>startPos</declname>
        </param>
        <param>
          <type><ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> *</type>
          <declname>terrainPos</declname>
        </param>
        <briefdescription>
<para>Find the neareast piece of terrain with specific flags. </para>
        </briefdescription>
        <detaileddescription>
<para>Find the closest piece of terrain with the given flags.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>movemask</parametername>
</parameternamelist>
<parameterdescription>
<para>The movement mask to reach that location. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resmask</parametername>
</parameternamelist>
<parameterdescription>
<para>Result tile mask. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum distance for the search. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>Only search fields explored by player </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Map start position for the search.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terrainPos</parametername>
</parameternamelist>
<parameterdescription>
<para>OUT: Map position of tile.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Movement mask can be 0xFFFFFFFF to have no effect Range is not circular, but square. Player is ignored if nil(search the entire map)</para>
</simplesect>
<simplesect kind="return"><para>True if wood was found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="162" column="6" bodyfile="src/unit/unit_find.cpp" bodystart="162" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a1907b658686c118d97e78b60b87d89d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* FindDepositNearLoc</definition>
        <argsstring>(CPlayer &amp;p, const Vec2i &amp;pos, int range, int resource)</argsstring>
        <name>FindDepositNearLoc</name>
        <param>
          <type><ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>range</declname>
        </param>
        <param>
          <type>int</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="278" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="278" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a874a5b7f88d025f76767b4fcc2fc2838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* UnitFindResource</definition>
        <argsstring>(const CUnit &amp;unit, const CUnit &amp;startUnit, int range, int resource, bool check_usage, const CUnit *deposit)</argsstring>
        <name>UnitFindResource</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>startUnit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>range</declname>
        </param>
        <param>
          <type>int</type>
          <declname>resource</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_usage</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>deposit</declname>
        </param>
        <briefdescription>
<para>Find resource. </para>
        </briefdescription>
        <detaileddescription>
<para>Find Resource.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit that wants to find a resource. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>Find closest unit from this location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum distance to the resource. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource id.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This will return an usable resource building that doesn&apos;t belong to the player or one of his allies.</para>
</simplesect>
<simplesect kind="return"><para>NULL or resource unit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="433" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="433" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1ad6163105a6ef50d7a24205bbc8f7d570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* FindDeposit</definition>
        <argsstring>(const CUnit &amp;unit, int range, int resource)</argsstring>
        <name>FindDeposit</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>range</declname>
        </param>
        <param>
          <type>int</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>Find nearest deposit. </para>
        </briefdescription>
        <detaileddescription>
<para>Find deposit. This will find a deposit for a resource</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit that wants to find a resource. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum distance to the deposit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource to find deposit from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This will return a reachable allied depot.</para>
</simplesect>
<simplesect kind="return"><para>NULL or deposit unit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="466" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="466" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a944a4b37c9ae492b868d5532ebbed108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* FindIdleWorker</definition>
        <argsstring>(const CPlayer &amp;player, const CUnit *last)</argsstring>
        <name>FindIdleWorker</name>
        <param>
          <type>const <ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>player</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Find the next idle worker. </para>
        </briefdescription>
        <detaileddescription>
<para>Find the next idle worker</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>Player&apos;s units to search through </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Previous idle worker selected</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL or next idle worker </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="491" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="491" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a93f2fdcc6361787713b8023314395c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void FindUnitsByType</definition>
        <argsstring>(const CUnitType &amp;type, std::vector&lt; CUnit * &gt; &amp;units, bool everybody)</argsstring>
        <name>FindUnitsByType</name>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classCUnit" kindref="compound">CUnit</ref> * &gt; &amp;</type>
          <declname>units</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>everybody</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find all units of type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of unit requested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>units</parametername>
</parameternamelist>
<parameterdescription>
<para>array in which we have to store the units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>everybody</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, include all units </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="526" column="6" bodyfile="src/unit/unit_find.cpp" bodystart="526" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1ae907335306302c53571b60dc48ad5fd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void FindPlayerUnitsByType</definition>
        <argsstring>(const CPlayer &amp;player, const CUnitType &amp;type, std::vector&lt; CUnit * &gt; &amp;table, bool ai_active)</argsstring>
        <name>FindPlayerUnitsByType</name>
        <param>
          <type>const <ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>player</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classCUnit" kindref="compound">CUnit</ref> * &gt; &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ai_active</declname>
        </param>
        <briefdescription>
<para>Find all units of this type of the player. </para>
        </briefdescription>
        <detaileddescription>
<para>Find all units of type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>we&apos;re looking for the units of this player </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of unit requested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>table in which we have to store the units </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="544" column="6" bodyfile="src/unit/unit_find.cpp" bodystart="544" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a4b1ab2ceda784141f5a6198b13801fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* UnitOnMapTile</definition>
        <argsstring>(const unsigned int index, unsigned int type)</argsstring>
        <name>UnitOnMapTile</name>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unit on map tile.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>flat index position on map, tile-based. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>UnitTypeType, (unsigned)-1 for any type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns first found unit on tile. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="585" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="585" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a0a493b555c96481b0d9e913ec6f0aa22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* UnitOnMapTile</definition>
        <argsstring>(const Vec2i &amp;pos, unsigned int type)</argsstring>
        <name>UnitOnMapTile</name>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Return any unit on that map tile. </para>
        </briefdescription>
        <detaileddescription>
<para>Unit on map tile.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position on map, tile-based. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>UnitTypeType, (unsigned)-1 for any type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns first found unit on tile. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="598" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="598" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a1b59f5efa4fbc11942b78ff1538dea5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* TargetOnMap</definition>
        <argsstring>(const CUnit &amp;source, const Vec2i &amp;pos1, const Vec2i &amp;pos2)</argsstring>
        <name>TargetOnMap</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos1</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos2</declname>
        </param>
        <briefdescription>
<para>Return possible attack target on that map area. </para>
        </briefdescription>
        <detaileddescription>
<para>Choose target on map area.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit which want to attack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos1</parametername>
</parameternamelist>
<parameterdescription>
<para>position on map, tile-based. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos2</parametername>
</parameternamelist>
<parameterdescription>
<para>position on map, tile-based.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns ideal target on map tile. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="612" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="612" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1af9911afd034a777c6e44bbac74091a5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* ResourceOnMap</definition>
        <argsstring>(const Vec2i &amp;pos, int resource, bool mine_on_top)</argsstring>
        <name>ResourceOnMap</name>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>resource</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mine_on_top</declname>
        </param>
        <briefdescription>
<para>Return resource, if on map tile. </para>
        </briefdescription>
        <detaileddescription>
<para>Resource on map tile</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position on map, tile-based. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>resource type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mine_on_top</parametername>
</parameternamelist>
<parameterdescription>
<para>return mine or mining area.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the deposit if found, or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="649" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="649" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a369ea72753796781cc8be58d907dfcd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* ResourceDepositOnMap</definition>
        <argsstring>(const Vec2i &amp;pos, int resource)</argsstring>
        <name>ResourceDepositOnMap</name>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>Return resource deposit, if on map tile. </para>
        </briefdescription>
        <detaileddescription>
<para>Resource deposit on map tile</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position on map, tile-based. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>resource type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the deposit if found, or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="674" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="674" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a0a85d6598d251a255b9b926b94a48884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CheckObstaclesBetweenTiles</definition>
        <argsstring>(const Vec2i &amp;unitPos, const Vec2i &amp;goalPos, unsigned short flags, int *distance)</argsstring>
        <name>CheckObstaclesBetweenTiles</name>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>unitPos</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>goalPos</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Check map for obstacles in a line between 2 tiles. </para>
        </briefdescription>
        <detaileddescription>
<para>Check map for obstacles in a line between 2 tiles</para>
<para>This function uses Bresenham&apos;s line algorithm</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>First tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goal</parametername>
</parameternamelist>
<parameterdescription>
<para>Second tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Terrain type to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false, if an obstacle was found, true otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1113" column="6" bodyfile="src/unit/unit_find.cpp" bodystart="1113" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a1f49d762e9a52371ae82ab2da4724221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* AttackUnitsInDistance</definition>
        <argsstring>(const CUnit &amp;unit, int range, CUnitFilter pred)</argsstring>
        <name>AttackUnitsInDistance</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="classCUnitFilter" kindref="compound">CUnitFilter</ref></type>
          <declname>pred</declname>
        </param>
        <briefdescription>
<para>Find best enemy in numeric range to attack. </para>
        </briefdescription>
        <detaileddescription>
<para>Attack units in distance.</para>
<para>If the unit can attack must be handled by caller. Choose the best target, that can be attacked.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Find in distance for this unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance range to look. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onlyBuildings</parametername>
</parameternamelist>
<parameterdescription>
<para>Search only buildings (useful when attacking with AI force)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Unit to be attacked. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1157" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="1157" bodyend="1195"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a924372131a2464c69708d187909ddff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* AttackUnitsInDistance</definition>
        <argsstring>(const CUnit &amp;unit, int range)</argsstring>
        <name>AttackUnitsInDistance</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1197" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="1197" bodyend="1200"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1a22647d9c27320a62c203a91708f17ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* AttackUnitsInRange</definition>
        <argsstring>(const CUnit &amp;unit, CUnitFilter pred)</argsstring>
        <name>AttackUnitsInRange</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnitFilter" kindref="compound">CUnitFilter</ref></type>
          <declname>pred</declname>
        </param>
        <briefdescription>
<para>Find best enemy in attack range to attack. </para>
        </briefdescription>
        <detaileddescription>
<para>Attack units in attack range.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Find unit in attack range for this unit.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to unit which should be attacked. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1209" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="1209" bodyend="1213"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1abe2c518f47cf774df939a1134978a6fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* AttackUnitsInRange</definition>
        <argsstring>(const CUnit &amp;unit)</argsstring>
        <name>AttackUnitsInRange</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1215" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="1215" bodyend="1218"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1af17cbb62c8055fbc5959f98d0a0b0b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* AttackUnitsInReactRange</definition>
        <argsstring>(const CUnit &amp;unit, CUnitFilter pred)</argsstring>
        <name>AttackUnitsInReactRange</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnitFilter" kindref="compound">CUnitFilter</ref></type>
          <declname>pred</declname>
        </param>
        <briefdescription>
<para>Find best enemy in reaction range to attack. </para>
        </briefdescription>
        <detaileddescription>
<para>Attack units in reaction range.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Find unit in reaction range for this unit.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to unit which should be attacked. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1227" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="1227" bodyend="1232"/>
      </memberdef>
      <memberdef kind="function" id="unit__find_8cpp_1ac1101c64ecd28e085d521989e7290a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* AttackUnitsInReactRange</definition>
        <argsstring>(const CUnit &amp;unit)</argsstring>
        <name>AttackUnitsInReactRange</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1234" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="1234" bodyend="1237"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/unit/unit_find.cpp"/>
  </compounddef>
</doxygen>
