<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgcn_1_1Window" kind="class" language="C++" prot="public">
    <compoundname>gcn::Window</compoundname>
    <basecompoundref refid="classgcn_1_1BasicContainer" prot="public" virt="non-virtual">gcn::BasicContainer</basecompoundref>
    <basecompoundref refid="classgcn_1_1MouseListener" prot="public" virt="non-virtual">gcn::MouseListener</basecompoundref>
    <derivedcompoundref refid="classWindows" prot="public" virt="non-virtual">Windows</derivedcompoundref>
    <includes refid="window_8h" local="no">window.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgcn_1_1Window_1ae068b73ce72af093c8bd4c67ac94ec1b" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string gcn::Window::mCaption</definition>
        <argsstring></argsstring>
        <name>mCaption</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="260" column="21" bodyfile="src/guichan/include/guichan/widgets/window.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Window_1a728a811c36548980d35e81126f5cb64f" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int gcn::Window::mAlignment</definition>
        <argsstring></argsstring>
        <name>mAlignment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="261" column="22" bodyfile="src/guichan/include/guichan/widgets/window.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Window_1a530d0474bbc5faa9503af95df3ee61a5" prot="protected" static="no" mutable="no">
        <type><ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> *</type>
        <definition>Widget* gcn::Window::mContent</definition>
        <argsstring></argsstring>
        <name>mContent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="262" column="16" bodyfile="src/guichan/include/guichan/widgets/window.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Window_1ac17c4428c3aa388d5a15f3043a034ad3" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int gcn::Window::mPadding</definition>
        <argsstring></argsstring>
        <name>mPadding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="263" column="22" bodyfile="src/guichan/include/guichan/widgets/window.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Window_1a3d0f93b51bb0245494801072f7b3a8cb" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int gcn::Window::mTitleBarHeight</definition>
        <argsstring></argsstring>
        <name>mTitleBarHeight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="264" column="22" bodyfile="src/guichan/include/guichan/widgets/window.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Window_1a1ba847ef302bd0be626973335f83f2b7" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gcn::Window::mMouseDrag</definition>
        <argsstring></argsstring>
        <name>mMouseDrag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="265" column="14" bodyfile="src/guichan/include/guichan/widgets/window.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Window_1ab597aad01f2f8bb8ab46b88803aeaa17" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int gcn::Window::mMouseXOffset</definition>
        <argsstring></argsstring>
        <name>mMouseXOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="266" column="13" bodyfile="src/guichan/include/guichan/widgets/window.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Window_1a541c56d221a720fa8aa6eea6089a0f3c" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int gcn::Window::mMouseYOffset</definition>
        <argsstring></argsstring>
        <name>mMouseYOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="267" column="13" bodyfile="src/guichan/include/guichan/widgets/window.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Window_1aeb948d8a8869fd73e9c03510a1d60928" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gcn::Window::mMovable</definition>
        <argsstring></argsstring>
        <name>mMovable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="268" column="14" bodyfile="src/guichan/include/guichan/widgets/window.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Window_1a999ce21bf07e7a9d18779fd8ba41c167" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gcn::Window::mOpaque</definition>
        <argsstring></argsstring>
        <name>mOpaque</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="269" column="14" bodyfile="src/guichan/include/guichan/widgets/window.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgcn_1_1Window_1a8872caddfbb6c6ab1c6e1a652be10dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gcn::Window::Window</definition>
        <argsstring>()</argsstring>
        <name>Window</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="75" column="9" bodyfile="src/guichan/widgets/window.cpp" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1aca415f0a552927e29f4939bd7356d609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gcn::Window::Window</definition>
        <argsstring>(const std::string &amp;caption)</argsstring>
        <name>Window</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>caption</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caption</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Window" kindref="compound">Window</ref> caption. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="82" column="9" bodyfile="src/guichan/widgets/window.cpp" bodystart="78" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a261d461d2ad067e1a5aedba17a3f9f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gcn::Window::Window</definition>
        <argsstring>(Widget *content, const std::string &amp;caption=&quot;&quot;)</argsstring>
        <name>Window</name>
        <param>
          <type><ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> *</type>
          <declname>content</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>caption</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>the content <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>caption</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Window" kindref="compound">Window</ref> caption. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="90" column="9" bodyfile="src/guichan/widgets/window.cpp" bodystart="92" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a88117e78c97004cc545d11fbc8bbee14" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>gcn::Window::~Window</definition>
        <argsstring>()</argsstring>
        <name>~Window</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="95" column="17" bodyfile="src/guichan/widgets/window.cpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a330738fb1fad89e4f698c7105cb6e2c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::setCaption</definition>
        <argsstring>(const std::string &amp;caption)</argsstring>
        <name>setCaption</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>caption</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classgcn_1_1Window" kindref="compound">Window</ref> caption.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caption</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Window" kindref="compound">Window</ref> caption. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="102" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a1c806596839d96030bf3a22afccade96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; gcn::Window::getCaption</definition>
        <argsstring>() const</argsstring>
        <name>getCaption</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the <ref refid="classgcn_1_1Window" kindref="compound">Window</ref> caption.</para>
<para><simplesect kind="return"><para>the <ref refid="classgcn_1_1Window" kindref="compound">Window</ref> caption. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="109" column="35" bodyfile="src/guichan/widgets/window.cpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a724060c494d787e7787da06d26a6754b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::setAlignment</definition>
        <argsstring>(unsigned int alignment)</argsstring>
        <name>setAlignment</name>
        <param>
          <type>unsigned int</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the alignment for the caption.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba6d4805f8b61e596e250ea9ad61fadfdc" kindref="member">Graphics::LEFT</ref>, <ref refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba922f83bc619a6d5c9dd3cf322157d505" kindref="member">Graphics::CENTER</ref> or <ref refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba6c47ce9c7f1438059e8e6b7eef671cc8" kindref="member">Graphics::RIGHT</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="116" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a3cc7d61a822615d870b0c9b05360008e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>unsigned int</type>
        <definition>unsigned int gcn::Window::getAlignment</definition>
        <argsstring>() const</argsstring>
        <name>getAlignment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the alignment for the caption.</para>
<para><simplesect kind="return"><para>alignment of caption. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="123" column="30" bodyfile="src/guichan/widgets/window.cpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a2288da45a4096c8e59ba9d6d044570a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::setContent</definition>
        <argsstring>(Widget *widget)</argsstring>
        <name>setContent</name>
        <param>
          <type><ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> *</type>
          <declname>widget</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the content <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>widget</parametername>
</parameternamelist>
<parameterdescription>
<para>the contant <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="130" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="139" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a64f4fe27afbd54662813c798160e84d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> *</type>
        <definition>Widget * gcn::Window::getContent</definition>
        <argsstring>() const</argsstring>
        <name>getContent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the content <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>.</para>
<para><simplesect kind="return"><para>the contant <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="137" column="24" bodyfile="src/guichan/widgets/window.cpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1af3d4c9a42d8d3a073b8f7a230571cb36" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::setPadding</definition>
        <argsstring>(unsigned int padding)</argsstring>
        <name>setPadding</name>
        <param>
          <type>unsigned int</type>
          <declname>padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the padding of the window which is the distance between the window border and the content.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>padding</parametername>
</parameternamelist>
<parameterdescription>
<para>the padding value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="145" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a0ffc2761b33a76a77cd0a48695310b8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>unsigned int</type>
        <definition>unsigned int gcn::Window::getPadding</definition>
        <argsstring>() const</argsstring>
        <name>getPadding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the padding.</para>
<para><simplesect kind="return"><para>the padding value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="152" column="30" bodyfile="src/guichan/widgets/window.cpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a2a1782028d1f47e1dbc2b68200ff43d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::setTitleBarHeight</definition>
        <argsstring>(unsigned int height)</argsstring>
        <name>setTitleBarHeight</name>
        <param>
          <type>unsigned int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the title bar height.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the title height value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="159" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a2093c19a399a3235f17fd6465ac6ddc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>unsigned int</type>
        <definition>unsigned int gcn::Window::getTitleBarHeight</definition>
        <argsstring>()</argsstring>
        <name>getTitleBarHeight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the title bar height.</para>
<para><simplesect kind="return"><para>the title bar height. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="166" column="30" bodyfile="src/guichan/widgets/window.cpp" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a5a6828f5cacb4e64c1457dbe7481f870" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::setMovable</definition>
        <argsstring>(bool movable)</argsstring>
        <name>setMovable</name>
        <param>
          <type>bool</type>
          <declname>movable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classgcn_1_1Window" kindref="compound">Window</ref> to be moveble.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>movable</parametername>
</parameternamelist>
<parameterdescription>
<para>true or false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="173" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a4e07c767196d0a92608a1a27b3add0c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool gcn::Window::isMovable</definition>
        <argsstring>() const</argsstring>
        <name>isMovable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the window is movable.</para>
<para><simplesect kind="return"><para>true or false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="180" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="402" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1ae872e849f4a1ac39dfd549ec86ac8fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::resizeToContent</definition>
        <argsstring>()</argsstring>
        <name>resizeToContent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resizes the window to fit the content. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="185" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="407" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a13ac3ee8839e888fbd22fb98785d57ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::setOpaque</definition>
        <argsstring>(bool opaque)</argsstring>
        <name>setOpaque</name>
        <param>
          <type>bool</type>
          <declname>opaque</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classgcn_1_1Window" kindref="compound">Window</ref> to be opaque. If it&apos;s not opaque, the content area will not be filled with a color.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>opaque</parametername>
</parameternamelist>
<parameterdescription>
<para>true or false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="193" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="463" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1afd6f988ede4555fce9f1299c636c3886" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool gcn::Window::isOpaque</definition>
        <argsstring>()</argsstring>
        <name>isOpaque</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if the <ref refid="classgcn_1_1Window" kindref="compound">Window</ref> is opaque.</para>
<para><simplesect kind="return"><para>true or false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="200" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="468" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a407d95b4cc6df3aa55b5256e7bb032c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::drawContent</definition>
        <argsstring>(Graphics *graphics)</argsstring>
        <name>drawContent</name>
        <param>
          <type><ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> *</type>
          <declname>graphics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws the content of the <ref refid="classgcn_1_1Window" kindref="compound">Window</ref>. This functions uses the getContentDimension to determin where to draw the content.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object to draw with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="208" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="300" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a5c6c05920b99e5f3cd7cdf9b6a784548" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::moveToTop</definition>
        <argsstring>(Widget *widget)</argsstring>
        <name>moveToTop</name>
        <reimplements refid="classgcn_1_1BasicContainer_1a3c185631af6b73245e32b9f6b93fbb31">moveToTop</reimplements>
        <param>
          <type><ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> *</type>
          <declname>widget</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves a <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> to the top of the <ref refid="classgcn_1_1BasicContainer" kindref="compound">BasicContainer</ref>. The widget will be drawn above all other Widgets in the <ref refid="classgcn_1_1BasicContainer" kindref="compound">BasicContainer</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>widget</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="213" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="347" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a082359dc2d4a24bc97689ad328cedc68" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::moveToBottom</definition>
        <argsstring>(Widget *widget)</argsstring>
        <name>moveToBottom</name>
        <reimplements refid="classgcn_1_1BasicContainer_1a5feb8f12bbe3c4dc068f32129b197b0b">moveToBottom</reimplements>
        <param>
          <type><ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> *</type>
          <declname>widget</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves a widget to the bottom of the <ref refid="classgcn_1_1BasicContainer" kindref="compound">BasicContainer</ref>. The <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> will be drawn below all other Widgets in the <ref refid="classgcn_1_1BasicContainer" kindref="compound">BasicContainer</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>widget</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="215" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="356" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1abac9ab216628524c23ced000919f358a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::getDrawSize</definition>
        <argsstring>(int &amp;width, int &amp;height, Widget *widget)</argsstring>
        <name>getDrawSize</name>
        <reimplements refid="classgcn_1_1BasicContainer_1a423560f8b3e3776babe4b6e11bc30713">getDrawSize</reimplements>
        <param>
          <type>int &amp;</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> *</type>
          <declname>widget</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the drawing space size a <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> has in the <ref refid="classgcn_1_1BasicContainer" kindref="compound">BasicContainer</ref>. It may not be the same size as the Widgets width and height.</para>
<para>NOTE: Size is not checked recursively all the way back to the top <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>. If the <ref refid="classgcn_1_1BasicContainer" kindref="compound">BasicContainer</ref> itself is clipped, the size may be inaccurate.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>&apos;s draw space has. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>&apos;s draw space has. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>widget</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> calling the function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="217" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="365" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1ac033fcf3c22075f7e12737600abea510" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::_announceDeath</definition>
        <argsstring>(Widget *widget)</argsstring>
        <name>_announceDeath</name>
        <reimplements refid="classgcn_1_1BasicContainer_1ac7475f2ef7bdddaf6a9db9e5d86fdaf9">_announceDeath</reimplements>
        <param>
          <type><ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> *</type>
          <declname>widget</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when a child of the <ref refid="classgcn_1_1BasicContainer" kindref="compound">BasicContainer</ref> gets destroyed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>widget</parametername>
</parameternamelist>
<parameterdescription>
<para>the destroyed <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="219" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a6d41ec33f8d4389510a9071067c919e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::draw</definition>
        <argsstring>(Graphics *graphics)</argsstring>
        <name>draw</name>
        <reimplements refid="classgcn_1_1Widget_1acc595221d6a2d1afe1043c16dc37d212">draw</reimplements>
        <param>
          <type><ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> *</type>
          <declname>graphics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>. It is called by the parent widget when it is time for the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> to draw itself. The graphics object is set up so that all drawing is relative to the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>, i.e coordinate (0,0) is the top-left corner of the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>. It is not possible to draw outside of a Widgets dimension.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object to draw with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="224" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="183" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1ae5564549656568a7932811e0f4025113" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::drawBorder</definition>
        <argsstring>(Graphics *graphics)</argsstring>
        <name>drawBorder</name>
        <reimplements refid="classgcn_1_1Widget_1a52430e9c46b6f84565af299bddb5ee80">drawBorder</reimplements>
        <param>
          <type><ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> border. A border is drawn around a <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>. The width and height of the border is therefore the Widgets height+2*bordersize. Think of a painting that has a certain size, the border surrounds the painting.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object to draw with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="226" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="276" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a29d960ea69715c51a8e62b9df70bc998" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::logic</definition>
        <argsstring>()</argsstring>
        <name>logic</name>
        <reimplements refid="classgcn_1_1Widget_1aeb2e4c4751ef8666f48be1638ef8a48c">logic</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called for all Widgets in the gui each time <ref refid="classgcn_1_1Gui_1a66744ebd628213d574bb6a7010781b1f" kindref="member">Gui::logic</ref> is called. You can do logic stuff here like playing an animation.</para>
<para><simplesect kind="see"><para><ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="228" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="473" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1aecb7f2381d48ab23e2ed7275ed86e7ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::_mouseInputMessage</definition>
        <argsstring>(const MouseInput &amp;mouseInput)</argsstring>
        <name>_mouseInputMessage</name>
        <reimplements refid="classgcn_1_1Widget_1a82d4afc357dd464c4c29282e6f61e56e">_mouseInputMessage</reimplements>
        <param>
          <type>const <ref refid="classgcn_1_1MouseInput" kindref="compound">MouseInput</ref> &amp;</type>
          <declname>mouseInput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when a <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> recieves a <ref refid="classgcn_1_1MouseInput" kindref="compound">MouseInput</ref>.</para>
<para>WARNING: This function is used internally to handle all mouse messages. Don&apos;t call or overload it unless you know what you are doing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mouseInput</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1MouseInput" kindref="compound">MouseInput</ref> message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="230" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="417" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a7d31b40ae6e937ab97d0f0c691236b4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::_mouseOutMessage</definition>
        <argsstring>()</argsstring>
        <name>_mouseOutMessage</name>
        <reimplements refid="classgcn_1_1Widget_1a8d9d0bf64082553da850f52214f8ae90">_mouseOutMessage</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when the mouse leaves the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> area.</para>
<para>WARNING: This function is used internally be to handle mouse out messages. Don&apos;t call or overload this function unless you know what you are doing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="232" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="443" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a16ed697f4881cc143b9fb9b41311029c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::_setFocusHandler</definition>
        <argsstring>(FocusHandler *focusHandler)</argsstring>
        <name>_setFocusHandler</name>
        <reimplements refid="classgcn_1_1Widget_1a6c3ec01422e51978a643ddd3ae09c26a">_setFocusHandler</reimplements>
        <param>
          <type><ref refid="classgcn_1_1FocusHandler" kindref="compound">FocusHandler</ref> *</type>
          <declname>focusHandler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classgcn_1_1FocusHandler" kindref="compound">FocusHandler</ref> to be used.</para>
<para>WARNING: This function is used internally and should not be called or overloaded unless you know what you are doing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>focusHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1FocusHandler" kindref="compound">FocusHandler</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="234" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="453" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a31765202f679ccbb1d66768e536d288b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::mousePress</definition>
        <argsstring>(int x, int y, int button)</argsstring>
        <name>mousePress</name>
        <reimplements refid="classgcn_1_1MouseListener_1ab9b2fc230d5890685b58648b6b0a8f5d">mousePress</reimplements>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when a mouse button is pressed when the mouse is in the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> area or if the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> has focus.</para>
<para>NOTE: A mouse press is NOT equal to a mouse click. Use mouseClickMessage to check for mouse clicks.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate of the mouse relative to the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> itself. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate of the mouse relative to the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> itself. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>button</parametername>
</parameternamelist>
<parameterdescription>
<para>the button pressed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="239" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="313" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1a3f4533f2433a8681764bcada0e064fe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::mouseRelease</definition>
        <argsstring>(int x, int y, int button)</argsstring>
        <name>mouseRelease</name>
        <reimplements refid="classgcn_1_1MouseListener_1a9fe91fd9240c8943c947c145470d43fc">mouseRelease</reimplements>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when a mouse button is released when the mouse is in the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> area or if the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> has focus.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate of the mouse relative to the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> itself.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate of the mouse relative to the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> itself. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>button</parametername>
</parameternamelist>
<parameterdescription>
<para>the button released. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="241" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="329" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1aa0a7738afd5041786469e8a7786f45a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::mouseMotion</definition>
        <argsstring>(int x, int y)</argsstring>
        <name>mouseMotion</name>
        <reimplements refid="classgcn_1_1MouseListener_1aa326a632b53eb9fe39e9d5f3ab4ec5d5">mouseMotion</reimplements>
        <reimplementedby refid="classWindows_1af94dbdb53833b68263acc81d1f111a7a">mouseMotion</reimplementedby>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when the mouse moves and the mouse is in the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> area or if the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> has focus.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate of the mouse relative to the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> itself. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate of the mouse relative to the <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> itself. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="243" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="337" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1acdb7825aa181dcd52ddd5c6b3c287e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::setDirty</definition>
        <argsstring>(bool dirty)</argsstring>
        <name>setDirty</name>
        <reimplements refid="classgcn_1_1Widget_1a78405792027c3431ad58ccf72845bc23">setDirty</reimplements>
        <param>
          <type>bool</type>
          <declname>dirty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="245" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="481" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1af2266747f4a7e494621cace807df43a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool gcn::Window::getDirty</definition>
        <argsstring>() const</argsstring>
        <name>getDirty</name>
        <reimplements refid="classgcn_1_1Widget_1abfe807a4ba40975723b2e9e29eb9387a">getDirty</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="246" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="490" bodyend="503"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classgcn_1_1Window_1aaa442a672cb993ef5a06c3fc77025942" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Window::repositionContent</definition>
        <argsstring>()</argsstring>
        <name>repositionContent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves the content to the top left corner of the window, uses getContentDimension to get the offset </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="253" column="22" bodyfile="src/guichan/widgets/window.cpp" bodystart="378" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Window_1ac6ae531310cf2d7ef0a0f90efeac6b48" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref></type>
        <definition>Rectangle gcn::Window::getContentDimension</definition>
        <argsstring>()</argsstring>
        <name>getContentDimension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the area in the window that the content occupies. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/widgets/window.h" line="258" column="27" bodyfile="src/guichan/widgets/window.cpp" bodystart="389" bodyend="395"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A movable window which can conatin another <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>Windows</label>
        <link refid="classWindows"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>gcn::MouseListener</label>
        <link refid="classgcn_1_1MouseListener"/>
      </node>
      <node id="1">
        <label>gcn::Window</label>
        <link refid="classgcn_1_1Window"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>gcn::Widget</label>
        <link refid="classgcn_1_1Widget"/>
      </node>
      <node id="2">
        <label>gcn::BasicContainer</label>
        <link refid="classgcn_1_1BasicContainer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>string</label>
      </node>
      <node id="4">
        <label>gcn::DefaultFont</label>
        <link refid="classgcn_1_1DefaultFont"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>gcn::MouseListener</label>
        <link refid="classgcn_1_1MouseListener"/>
      </node>
      <node id="8">
        <label>gcn::Rectangle</label>
        <link refid="classgcn_1_1Rectangle"/>
      </node>
      <node id="7">
        <label>gcn::Color</label>
        <link refid="classgcn_1_1Color"/>
      </node>
      <node id="9">
        <label>gcn::FocusHandler</label>
        <link refid="classgcn_1_1FocusHandler"/>
        <childnode refid="3" relation="usage">
          <edgelabel>mDraggedWidget</edgelabel>
          <edgelabel>mToBeDragged</edgelabel>
          <edgelabel>mToBeFocused</edgelabel>
          <edgelabel>mFocusedWidget</edgelabel>
          <edgelabel>mModalFocusedWidget</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>gcn::Window</label>
        <link refid="classgcn_1_1Window"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mContent</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mCaption</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>gcn::Widget</label>
        <link refid="classgcn_1_1Widget"/>
        <childnode refid="4" relation="usage">
          <edgelabel>mDefaultFont</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mCurrentFont</edgelabel>
          <edgelabel>mGlobalFont</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mEventId</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mBaseColor</edgelabel>
          <edgelabel>mBackgroundColor</edgelabel>
          <edgelabel>mDisabledColor</edgelabel>
          <edgelabel>mForegroundColor</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>mDimension</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mFocusHandler</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>gcn::Font</label>
        <link refid="classgcn_1_1Font"/>
      </node>
      <node id="2">
        <label>gcn::BasicContainer</label>
        <link refid="classgcn_1_1BasicContainer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/guichan/include/guichan/widgets/window.h" line="70" column="1" bodyfile="src/guichan/include/guichan/widgets/window.h" bodystart="68" bodyend="270"/>
    <listofallmembers>
      <member refid="classgcn_1_1Window_1ac033fcf3c22075f7e12737600abea510" prot="public" virt="virtual"><scope>gcn::Window</scope><name>_announceDeath</name></member>
      <member refid="classgcn_1_1Widget_1a2a6ee4ee4d826fca7a437bfa105edb17" prot="public" virt="virtual"><scope>gcn::Window</scope><name>_getFocusHandler</name></member>
      <member refid="classgcn_1_1Widget_1ad970933b9c456bb23cc598c323033fa8" prot="public" virt="virtual"><scope>gcn::Window</scope><name>_keyInputMessage</name></member>
      <member refid="classgcn_1_1Widget_1a07df51f61e08d785c51953bdc9bc37fe" prot="public" virt="virtual"><scope>gcn::Window</scope><name>_mouseInMessage</name></member>
      <member refid="classgcn_1_1Window_1aecb7f2381d48ab23e2ed7275ed86e7ab" prot="public" virt="virtual"><scope>gcn::Window</scope><name>_mouseInputMessage</name></member>
      <member refid="classgcn_1_1Window_1a7d31b40ae6e937ab97d0f0c691236b4f" prot="public" virt="virtual"><scope>gcn::Window</scope><name>_mouseOutMessage</name></member>
      <member refid="classgcn_1_1Window_1a16ed697f4881cc143b9fb9b41311029c" prot="public" virt="virtual"><scope>gcn::Window</scope><name>_setFocusHandler</name></member>
      <member refid="classgcn_1_1Widget_1acc6f3352c0b31576d2f71f77ba9bf4e3" prot="public" virt="virtual"><scope>gcn::Window</scope><name>_setParent</name></member>
      <member refid="classgcn_1_1Widget_1ac6db4657e99a2fea417f4b9f3264f270" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>ActionListenerIterator</name></member>
      <member refid="classgcn_1_1Widget_1a3bee7a8c390c5b63c2122a4d0a39b02f" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>ActionListenerList</name></member>
      <member refid="classgcn_1_1Widget_1a2782a478efbb087830884d9f2dc8b487" prot="public" virt="virtual"><scope>gcn::Window</scope><name>addActionListener</name></member>
      <member refid="classgcn_1_1Widget_1a7a7767d1da53e4d38f763bfb8b83a277" prot="public" virt="virtual"><scope>gcn::Window</scope><name>addKeyListener</name></member>
      <member refid="classgcn_1_1Widget_1ad230cfe9537e09debbc34a0f2b369f02" prot="public" virt="virtual"><scope>gcn::Window</scope><name>addMouseListener</name></member>
      <member refid="classgcn_1_1Window_1a6d41ec33f8d4389510a9071067c919e5" prot="public" virt="virtual"><scope>gcn::Window</scope><name>draw</name></member>
      <member refid="classgcn_1_1Window_1ae5564549656568a7932811e0f4025113" prot="public" virt="virtual"><scope>gcn::Window</scope><name>drawBorder</name></member>
      <member refid="classgcn_1_1Window_1a407d95b4cc6df3aa55b5256e7bb032c4" prot="public" virt="virtual"><scope>gcn::Window</scope><name>drawContent</name></member>
      <member refid="classgcn_1_1Widget_1aa0456eba65ee0c565e572f626780aa9d" prot="public" virt="virtual"><scope>gcn::Window</scope><name>fontChanged</name></member>
      <member refid="classgcn_1_1Widget_1a239e73f6db59e63177a3d626990aeef8" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>generateAction</name></member>
      <member refid="classgcn_1_1Widget_1ab5c1d7a25c68bf6811f6daeeaa9d2879" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getAbsolutePosition</name></member>
      <member refid="classgcn_1_1Window_1a3cc7d61a822615d870b0c9b05360008e" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getAlignment</name></member>
      <member refid="classgcn_1_1Widget_1a87283abe42d69421c72b12a599492b2b" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getBackgroundColor</name></member>
      <member refid="classgcn_1_1Widget_1ac75fb038e60c662841e4c9b32e64a72e" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getBaseColor</name></member>
      <member refid="classgcn_1_1Widget_1a0aa78528a84a96e7adcadb16931f310e" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getBorderSize</name></member>
      <member refid="classgcn_1_1Window_1a1c806596839d96030bf3a22afccade96" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getCaption</name></member>
      <member refid="classgcn_1_1Window_1a64f4fe27afbd54662813c798160e84d7" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getContent</name></member>
      <member refid="classgcn_1_1Window_1ac6ae531310cf2d7ef0a0f90efeac6b48" prot="protected" virt="virtual"><scope>gcn::Window</scope><name>getContentDimension</name></member>
      <member refid="classgcn_1_1Widget_1aaeb58eb7f55c41824177864696a1fa4e" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getDimension</name></member>
      <member refid="classgcn_1_1Window_1af2266747f4a7e494621cace807df43a0" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getDirty</name></member>
      <member refid="classgcn_1_1Widget_1a01c62536e9a68e67bc252e0b346e56b5" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getDisabledColor</name></member>
      <member refid="classgcn_1_1Window_1abac9ab216628524c23ced000919f358a" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getDrawSize</name></member>
      <member refid="classgcn_1_1Widget_1ac40d029c72f818743ce4b38fba9e054b" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getEventId</name></member>
      <member refid="classgcn_1_1Widget_1a2f2ba6507f77f6a4cf12ebbb6f0c1b1a" prot="public" virt="non-virtual"><scope>gcn::Window</scope><name>getFont</name></member>
      <member refid="classgcn_1_1Widget_1affdf29f57c5da86f152fa15efa41f32e" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getForegroundColor</name></member>
      <member refid="classgcn_1_1Widget_1a54a307bb12dce1e18852370139472fbc" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getHeight</name></member>
      <member refid="classgcn_1_1Widget_1afec217c9dd19e4571050d7d6398dc1ff" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getHotKey</name></member>
      <member refid="classgcn_1_1Window_1a0ffc2761b33a76a77cd0a48695310b8d" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getPadding</name></member>
      <member refid="classgcn_1_1Widget_1af123bb02ec2f6f9b4d24fcac169cc177" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getParent</name></member>
      <member refid="classgcn_1_1Window_1a2093c19a399a3235f17fd6465ac6ddc9" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getTitleBarHeight</name></member>
      <member refid="classgcn_1_1Widget_1ad47153879ef75a2c1c195df21ecf1c6c" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getWidth</name></member>
      <member refid="classgcn_1_1Widget_1a9202f85a411012e384bad4f84db80fed" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getX</name></member>
      <member refid="classgcn_1_1Widget_1a44086f3c2dfd2b2b51c5590644aeef34" prot="public" virt="virtual"><scope>gcn::Window</scope><name>getY</name></member>
      <member refid="classgcn_1_1Widget_1a5406a651bde21a53dd4d923f4e447fbc" prot="public" virt="virtual"><scope>gcn::Window</scope><name>gotFocus</name></member>
      <member refid="classgcn_1_1Widget_1a9bb35708268ebb0af093e93f052287df" prot="public" virt="virtual"><scope>gcn::Window</scope><name>hasFocus</name></member>
      <member refid="classgcn_1_1Widget_1a9293bb0e756b1e6dcfb365fb462f096c" prot="public" virt="virtual"><scope>gcn::Window</scope><name>hasModalFocus</name></member>
      <member refid="classgcn_1_1Widget_1a56b42f64d10b0f0967a0bd4aad003131" prot="public" virt="virtual"><scope>gcn::Window</scope><name>hasMouse</name></member>
      <member refid="classgcn_1_1Widget_1a51bcb585ec0951973d3681784d63eafb" prot="public" virt="virtual"><scope>gcn::Window</scope><name>hotKeyPress</name></member>
      <member refid="classgcn_1_1Widget_1a894fe9d72b7f2ad14ea4f7c5ef3b6b6b" prot="public" virt="virtual"><scope>gcn::Window</scope><name>hotKeyRelease</name></member>
      <member refid="classgcn_1_1Widget_1a8618a8cd96b033cb9d98ecfabb2210d5" prot="public" virt="virtual"><scope>gcn::Window</scope><name>isDragged</name></member>
      <member refid="classgcn_1_1Widget_1a2463d74d1f73052b2b89d291dbeab4c0" prot="public" virt="virtual"><scope>gcn::Window</scope><name>isEnabled</name></member>
      <member refid="classgcn_1_1Widget_1af6152a74291b86780de2860b2beecd58" prot="public" virt="virtual"><scope>gcn::Window</scope><name>isFocusable</name></member>
      <member refid="classgcn_1_1Window_1a4e07c767196d0a92608a1a27b3add0c4" prot="public" virt="virtual"><scope>gcn::Window</scope><name>isMovable</name></member>
      <member refid="classgcn_1_1Window_1afd6f988ede4555fce9f1299c636c3886" prot="public" virt="virtual"><scope>gcn::Window</scope><name>isOpaque</name></member>
      <member refid="classgcn_1_1Widget_1a4360e05e4bbac929b5faa98cbc21c4c5" prot="public" virt="virtual"><scope>gcn::Window</scope><name>isTabInEnabled</name></member>
      <member refid="classgcn_1_1Widget_1a24349bca818ee2b4cb2b6fc764728f5f" prot="public" virt="virtual"><scope>gcn::Window</scope><name>isTabOutEnabled</name></member>
      <member refid="classgcn_1_1Widget_1a79ed9e1435f82e7616e575498c2aac32" prot="public" virt="virtual"><scope>gcn::Window</scope><name>isVisible</name></member>
      <member refid="classgcn_1_1Widget_1a59c5bffc39f53faf6b6a12ccb2cf648d" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>KeyListenerIterator</name></member>
      <member refid="classgcn_1_1Widget_1a377c49f1fa502e6679e8ce9fd60815d2" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>KeyListenerList</name></member>
      <member refid="classgcn_1_1Window_1a29d960ea69715c51a8e62b9df70bc998" prot="public" virt="virtual"><scope>gcn::Window</scope><name>logic</name></member>
      <member refid="classgcn_1_1Widget_1a0f361d0133986452587f25aa4f7f77fa" prot="public" virt="virtual"><scope>gcn::Window</scope><name>lostFocus</name></member>
      <member refid="classgcn_1_1Widget_1a46070594006b9af499fdab5435847c7e" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mActionListeners</name></member>
      <member refid="classgcn_1_1Window_1a728a811c36548980d35e81126f5cb64f" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mAlignment</name></member>
      <member refid="classgcn_1_1Widget_1a5d9b038652feb0d0faab3f1c145f4415" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mBackgroundColor</name></member>
      <member refid="classgcn_1_1Widget_1a6b87ca3876fc2d0afb12f30c97882abe" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mBaseColor</name></member>
      <member refid="classgcn_1_1Widget_1a666bc4006fcfbc1e799856d5d0437973" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mBorderSize</name></member>
      <member refid="classgcn_1_1Window_1ae068b73ce72af093c8bd4c67ac94ec1b" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mCaption</name></member>
      <member refid="classgcn_1_1Widget_1a579dacf12425c94ad8ac2d5a1775f2dd" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mClickButton</name></member>
      <member refid="classgcn_1_1Widget_1aa969ad4999686dc590740d9f6934a7e9" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mClickCount</name></member>
      <member refid="classgcn_1_1Widget_1a54e624cb9fa61cdc2e4a914a5d075c1f" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mClickTimeStamp</name></member>
      <member refid="classgcn_1_1Window_1a530d0474bbc5faa9503af95df3ee61a5" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mContent</name></member>
      <member refid="classgcn_1_1Widget_1a1f002a86256cd66540b7acc4136300c9" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mCurrentFont</name></member>
      <member refid="classgcn_1_1Widget_1a2b372bd05738fd6f50dad64f3df5e01c" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mDefaultFont</name></member>
      <member refid="classgcn_1_1Widget_1a3016ad26407c72fb38bbb5f91e20e28f" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mDimension</name></member>
      <member refid="classgcn_1_1Widget_1ace0f5c77a0c82e2d19f6622608a01edf" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mDirty</name></member>
      <member refid="classgcn_1_1Widget_1a093a7eb7ada1da818bf06d045a8f0c51" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mDisabledColor</name></member>
      <member refid="classgcn_1_1Widget_1a29fff0a9a91368abf39a359328170db4" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mEnabled</name></member>
      <member refid="classgcn_1_1Widget_1ac01ae6e7305d6eaeb481d834452a2d3b" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mEventId</name></member>
      <member refid="classgcn_1_1Widget_1a625b8944ef6ef0961ef601332693ed56" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mFocusable</name></member>
      <member refid="classgcn_1_1Widget_1aefeabbfedf983d4b698cb0cd44c10150" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mFocusHandler</name></member>
      <member refid="classgcn_1_1Widget_1afb6394587ebeccd7e434a00ab9bc6dca" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mForegroundColor</name></member>
      <member refid="classgcn_1_1Widget_1a83d5c34f69ffc5a63c6dd4195c0b608b" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mGlobalFont</name></member>
      <member refid="classgcn_1_1Widget_1a517170dd25eec048b5b1e959f7cd3692" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mHasMouse</name></member>
      <member refid="classgcn_1_1Widget_1acfdd5281bb4120337ce67ff975d4a79d" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mHotKey</name></member>
      <member refid="classgcn_1_1Widget_1accd6cbe913760915dd0cbdcaf7cdd6d1" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mKeyListeners</name></member>
      <member refid="classgcn_1_1Window_1a1ba847ef302bd0be626973335f83f2b7" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mMouseDrag</name></member>
      <member refid="classgcn_1_1Widget_1ae0385a14ee5253e07746c7616d3f16f4" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mMouseListeners</name></member>
      <member refid="classgcn_1_1Window_1ab597aad01f2f8bb8ab46b88803aeaa17" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mMouseXOffset</name></member>
      <member refid="classgcn_1_1Window_1a541c56d221a720fa8aa6eea6089a0f3c" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mMouseYOffset</name></member>
      <member refid="classgcn_1_1Window_1aeb948d8a8869fd73e9c03510a1d60928" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mMovable</name></member>
      <member refid="classgcn_1_1Window_1a999ce21bf07e7a9d18779fd8ba41c167" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mOpaque</name></member>
      <member refid="classgcn_1_1MouseListener_1a9fa65220fca905750f87ffe86017e538" prot="public" virt="virtual"><scope>gcn::Window</scope><name>mouseClick</name></member>
      <member refid="classgcn_1_1MouseListener_1a83e5e89f6997020e7b8d0863af9f9da3" prot="public" virt="virtual"><scope>gcn::Window</scope><name>mouseIn</name></member>
      <member refid="classgcn_1_1MouseListener_1aa1898f8c7b93fb208b5e9ce86d6a3fb5" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>MouseListener</name></member>
      <member refid="classgcn_1_1Widget_1a5f2068555f23f6bb8b9cf9dd1ce798d2" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>MouseListenerIterator</name></member>
      <member refid="classgcn_1_1Widget_1accc32cb3dbe120cbde27a96405cf8edf" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>MouseListenerList</name></member>
      <member refid="classgcn_1_1Window_1aa0a7738afd5041786469e8a7786f45a0" prot="public" virt="virtual"><scope>gcn::Window</scope><name>mouseMotion</name></member>
      <member refid="classgcn_1_1MouseListener_1a79241832fa89ba91346d8e784bbbef33" prot="public" virt="virtual"><scope>gcn::Window</scope><name>mouseOut</name></member>
      <member refid="classgcn_1_1Window_1a31765202f679ccbb1d66768e536d288b" prot="public" virt="virtual"><scope>gcn::Window</scope><name>mousePress</name></member>
      <member refid="classgcn_1_1Window_1a3f4533f2433a8681764bcada0e064fe7" prot="public" virt="virtual"><scope>gcn::Window</scope><name>mouseRelease</name></member>
      <member refid="classgcn_1_1MouseListener_1ae141d2c2c5d2d84083bab1c9b06e0219" prot="public" virt="virtual"><scope>gcn::Window</scope><name>mouseWheelDown</name></member>
      <member refid="classgcn_1_1MouseListener_1aaa5d13676e224f8cb2edbee037ba3d4d" prot="public" virt="virtual"><scope>gcn::Window</scope><name>mouseWheelUp</name></member>
      <member refid="classgcn_1_1Window_1a082359dc2d4a24bc97689ad328cedc68" prot="public" virt="virtual"><scope>gcn::Window</scope><name>moveToBottom</name></member>
      <member refid="classgcn_1_1Window_1a5c6c05920b99e5f3cd7cdf9b6a784548" prot="public" virt="virtual"><scope>gcn::Window</scope><name>moveToTop</name></member>
      <member refid="classgcn_1_1Window_1ac17c4428c3aa388d5a15f3043a034ad3" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mPadding</name></member>
      <member refid="classgcn_1_1Widget_1aa45201a4f20d91ebb6371bb5c5726b8b" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mParent</name></member>
      <member refid="classgcn_1_1Widget_1af58e951b2a8c611382a3933bca0d963d" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mTabIn</name></member>
      <member refid="classgcn_1_1Widget_1a04fd429868ebe16d7d43c569ca30eaf8" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mTabOut</name></member>
      <member refid="classgcn_1_1Window_1a3d0f93b51bb0245494801072f7b3a8cb" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mTitleBarHeight</name></member>
      <member refid="classgcn_1_1Widget_1a6c337c558c1fa8cf8e5d5e2eac8d2840" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mVisible</name></member>
      <member refid="classgcn_1_1Widget_1ad350c8bb10bc2603f545039e530dcb83" prot="protected" virt="non-virtual"><scope>gcn::Window</scope><name>mWidgets</name></member>
      <member refid="classgcn_1_1Widget_1aeb41e73d733c308552fb1b2e9385ef4a" prot="public" virt="virtual"><scope>gcn::Window</scope><name>releaseModalFocus</name></member>
      <member refid="classgcn_1_1Widget_1a45e8f4714fdae38115f21e94ae1a7f0f" prot="public" virt="virtual"><scope>gcn::Window</scope><name>removeActionListener</name></member>
      <member refid="classgcn_1_1Widget_1a0556f95c92e7950c47b2f36f7ea729cd" prot="public" virt="virtual"><scope>gcn::Window</scope><name>removeKeyListener</name></member>
      <member refid="classgcn_1_1Widget_1a4d5c2c1578da34b0e2756b08feeb239a" prot="public" virt="virtual"><scope>gcn::Window</scope><name>removeMouseListener</name></member>
      <member refid="classgcn_1_1Window_1aaa442a672cb993ef5a06c3fc77025942" prot="protected" virt="virtual"><scope>gcn::Window</scope><name>repositionContent</name></member>
      <member refid="classgcn_1_1Widget_1a0fe9dc6e11395c5d6711c7f1fdb55fc5" prot="public" virt="virtual"><scope>gcn::Window</scope><name>requestFocus</name></member>
      <member refid="classgcn_1_1Widget_1a52431b05e8669a88ba86d6fd6f84e751" prot="public" virt="virtual"><scope>gcn::Window</scope><name>requestModalFocus</name></member>
      <member refid="classgcn_1_1Widget_1a792e16f5f7c0b2d29517f6b863c225ac" prot="public" virt="virtual"><scope>gcn::Window</scope><name>requestMoveToBottom</name></member>
      <member refid="classgcn_1_1Widget_1a35463259c6fbd12fb2cdfee0015f543c" prot="public" virt="virtual"><scope>gcn::Window</scope><name>requestMoveToTop</name></member>
      <member refid="classgcn_1_1Window_1ae872e849f4a1ac39dfd549ec86ac8fb0" prot="public" virt="virtual"><scope>gcn::Window</scope><name>resizeToContent</name></member>
      <member refid="classgcn_1_1Window_1a724060c494d787e7787da06d26a6754b" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setAlignment</name></member>
      <member refid="classgcn_1_1Widget_1ac5db8a5211d98851f7355057c7c084d1" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setBackgroundColor</name></member>
      <member refid="classgcn_1_1Widget_1ab6de83c5836ed0f9f33c876ba7b03941" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setBaseColor</name></member>
      <member refid="classgcn_1_1Widget_1af45b34bd86b86577848b496855509102" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setBorderSize</name></member>
      <member refid="classgcn_1_1Window_1a330738fb1fad89e4f698c7105cb6e2c9" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setCaption</name></member>
      <member refid="classgcn_1_1Window_1a2288da45a4096c8e59ba9d6d044570a4" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setContent</name></member>
      <member refid="classgcn_1_1Widget_1aeb44a16f108441b1c1ddaaf238f74867" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setDimension</name></member>
      <member refid="classgcn_1_1Window_1acdb7825aa181dcd52ddd5c6b3c287e5b" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setDirty</name></member>
      <member refid="classgcn_1_1Widget_1af74a196fef692f481fd94cd4ff7b6da1" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setDisabledColor</name></member>
      <member refid="classgcn_1_1Widget_1a535af13ea1468a96639959a0745b2de9" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setEnabled</name></member>
      <member refid="classgcn_1_1Widget_1acf20bb9f520db112aa06010cf19eaa1a" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setEventId</name></member>
      <member refid="classgcn_1_1Widget_1a91b80646ba89565f18de7dfc044bab59" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setFocusable</name></member>
      <member refid="classgcn_1_1Widget_1ad9bdb43fe3ae6f36d1e6bf44f5c4c107" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setFont</name></member>
      <member refid="classgcn_1_1Widget_1a24b7b1e327848f0b61713ffca80c4539" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setForegroundColor</name></member>
      <member refid="classgcn_1_1Widget_1aaff06ed0237955eb4f1728114ec67dd8" prot="public" virt="non-virtual"><scope>gcn::Window</scope><name>setGlobalFont</name></member>
      <member refid="classgcn_1_1Widget_1a4b9f7a625e9761982898c407772bf10b" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setHeight</name></member>
      <member refid="classgcn_1_1Widget_1a6441cac867642bca7054c259bdaea8a8" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setHotKey</name></member>
      <member refid="classgcn_1_1Widget_1a3454a6dfc8ea658f54614a930dec7a69" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setHotKey</name></member>
      <member refid="classgcn_1_1Window_1a5a6828f5cacb4e64c1457dbe7481f870" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setMovable</name></member>
      <member refid="classgcn_1_1Window_1a13ac3ee8839e888fbd22fb98785d57ce" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setOpaque</name></member>
      <member refid="classgcn_1_1Window_1af3d4c9a42d8d3a073b8f7a230571cb36" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setPadding</name></member>
      <member refid="classgcn_1_1Widget_1a88218252e36b9275a36d9f0782333549" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setPosition</name></member>
      <member refid="classgcn_1_1Widget_1afd331b363b4e9da4b28a3032f1ded1a6" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setSize</name></member>
      <member refid="classgcn_1_1Widget_1a5f20c75619157b6d5397802e6c9e8fed" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setTabInEnabled</name></member>
      <member refid="classgcn_1_1Widget_1a6e86977ba1b7aa095db85735fd373b26" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setTabOutEnabled</name></member>
      <member refid="classgcn_1_1Window_1a2a1782028d1f47e1dbc2b68200ff43d9" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setTitleBarHeight</name></member>
      <member refid="classgcn_1_1Widget_1ad2c98a426131f20ab6cf3303ec34f77e" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setVisible</name></member>
      <member refid="classgcn_1_1Widget_1a02d38ab0aa03b4feb47be6ab458108dc" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setWidth</name></member>
      <member refid="classgcn_1_1Widget_1a1b1fd7383af9c23d51d795f3a1fc0797" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setX</name></member>
      <member refid="classgcn_1_1Widget_1a9f767637f580d5251f34cdcd4a4f64b8" prot="public" virt="virtual"><scope>gcn::Window</scope><name>setY</name></member>
      <member refid="classgcn_1_1Widget_1aa0bca79afea27b0d8785b3546608a064" prot="public" virt="non-virtual"><scope>gcn::Window</scope><name>Widget</name></member>
      <member refid="classgcn_1_1Widget_1ab87752241d6625718630af560b0fa7a6" prot="public" virt="non-virtual"><scope>gcn::Window</scope><name>widgetExists</name></member>
      <member refid="classgcn_1_1Window_1a8872caddfbb6c6ab1c6e1a652be10dbd" prot="public" virt="non-virtual"><scope>gcn::Window</scope><name>Window</name></member>
      <member refid="classgcn_1_1Window_1aca415f0a552927e29f4939bd7356d609" prot="public" virt="non-virtual"><scope>gcn::Window</scope><name>Window</name></member>
      <member refid="classgcn_1_1Window_1a261d461d2ad067e1a5aedba17a3f9f8b" prot="public" virt="non-virtual"><scope>gcn::Window</scope><name>Window</name></member>
      <member refid="classgcn_1_1BasicContainer_1a8b8486a14daf5809da70d19603dbf607" prot="public" virt="virtual"><scope>gcn::Window</scope><name>~BasicContainer</name></member>
      <member refid="classgcn_1_1MouseListener_1a418107f31e2ba41bceb6f794ef2ce101" prot="public" virt="virtual"><scope>gcn::Window</scope><name>~MouseListener</name></member>
      <member refid="classgcn_1_1Widget_1adab4c5e2acbc513d87c15cd2a0d821c6" prot="public" virt="virtual"><scope>gcn::Window</scope><name>~Widget</name></member>
      <member refid="classgcn_1_1Window_1a88117e78c97004cc545d11fbc8bbee14" prot="public" virt="virtual"><scope>gcn::Window</scope><name>~Window</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
