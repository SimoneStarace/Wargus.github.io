<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classBestRangeTargetFinder" kind="class" language="C++" prot="public">
    <compoundname>BestRangeTargetFinder</compoundname>
    <innerclass refid="classBestRangeTargetFinder_1_1FillBadGood" prot="public">BestRangeTargetFinder::FillBadGood</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBestRangeTargetFinder_1a2a0326048661100266002b8c2313c64e" prot="private" static="no" mutable="no">
        <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>const CUnit* BestRangeTargetFinder::attacker</definition>
        <argsstring></argsstring>
        <name>attacker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1078" column="13" bodyfile="src/unit/unit_find.cpp" bodystart="1078" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBestRangeTargetFinder_1a34e9a417d54ec9dc70d079bd7b3ca6ef" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int BestRangeTargetFinder::range</definition>
        <argsstring></argsstring>
        <name>range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1079" column="11" bodyfile="src/unit/unit_find.cpp" bodystart="1079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBestRangeTargetFinder_1aaae7a1dbf2ef07dd365909ad974adeac" prot="private" static="no" mutable="no">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* BestRangeTargetFinder::best_unit</definition>
        <argsstring></argsstring>
        <name>best_unit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1080" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="1080" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBestRangeTargetFinder_1aad6ae610b792e09746ccae1f21505811" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int BestRangeTargetFinder::best_cost</definition>
        <argsstring></argsstring>
        <name>best_cost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1081" column="5" bodyfile="src/unit/unit_find.cpp" bodystart="1081" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBestRangeTargetFinder_1a8418f4f86ea999e917d89d86c3c24cac" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt; *</type>
        <definition>std::vector&lt;int&gt;* BestRangeTargetFinder::good</definition>
        <argsstring></argsstring>
        <name>good</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1082" column="13" bodyfile="src/unit/unit_find.cpp" bodystart="1082" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBestRangeTargetFinder_1a7f0058ee2724b28c70af93a7a0662040" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt; *</type>
        <definition>std::vector&lt;int&gt;* BestRangeTargetFinder::bad</definition>
        <argsstring></argsstring>
        <name>bad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1083" column="13" bodyfile="src/unit/unit_find.cpp" bodystart="1083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBestRangeTargetFinder_1a315da5865a9d7273de08ed3290fcc57f" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int BestRangeTargetFinder::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1084" column="11" bodyfile="src/unit/unit_find.cpp" bodystart="1084" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBestRangeTargetFinder_1aeb6efba33122245ae592754627ac0674" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BestRangeTargetFinder::BestRangeTargetFinder</definition>
        <argsstring>(const CUnit &amp;a, const int r)</argsstring>
        <name>BestRangeTargetFinder</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Find in distance for this unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance range to look. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="808" column="1" bodyfile="src/unit/unit_find.cpp" bodystart="808" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="classBestRangeTargetFinder_1a8a09581f2447b86d17d6877164a3f3fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BestRangeTargetFinder::~BestRangeTargetFinder</definition>
        <argsstring>()</argsstring>
        <name>~BestRangeTargetFinder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="815" column="1" bodyfile="src/unit/unit_find.cpp" bodystart="815" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="classBestRangeTargetFinder_1a09dc0379c61e2dcc2639bdd2ef1237bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* BestRangeTargetFinder::Find</definition>
        <argsstring>(std::vector&lt; CUnit * &gt; &amp;table)</argsstring>
        <name>Find</name>
        <param>
          <type>std::vector&lt; <ref refid="classCUnit" kindref="compound">CUnit</ref> * &gt; &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="986" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="986" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="classBestRangeTargetFinder_1a34eeaafe83b5b78cf418e3c047131ccc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* BestRangeTargetFinder::Find</definition>
        <argsstring>(CUnitCache &amp;cache)</argsstring>
        <name>Find</name>
        <param>
          <type><ref refid="classCUnitCache" kindref="compound">CUnitCache</ref> &amp;</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="995" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="995" bodyend="999"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBestRangeTargetFinder_1af17d2fec4a90741d6ac2caefbf35b192" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* BestRangeTargetFinder::Find</definition>
        <argsstring>(Iterator begin, Iterator end)</argsstring>
        <name>Find</name>
        <param>
          <type>Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1003" column="7" bodyfile="src/unit/unit_find.cpp" bodystart="1003" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="classBestRangeTargetFinder_1ae3e3a70d1e2282c3be9e53a1245d1134" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void BestRangeTargetFinder::Compute</definition>
        <argsstring>(CUnit *const dest)</argsstring>
        <name>Compute</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *const</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/unit_find.cpp" line="1011" column="6" bodyfile="src/unit/unit_find.cpp" bodystart="1011" bodyend="1075"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Attack units in distance, with large missile</para>
<para>Choose the best target, that can be attacked. It takes into account allied unit which could be hit by the missile</para>
<para><simplesect kind="note"><para>This could be improved, for better performance / better trade. </para>
</simplesect>
<simplesect kind="note"><para>Will be moved to unit_ai.c soon. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="src/unit/unit_find.cpp" line="801" column="1" bodyfile="src/unit/unit_find.cpp" bodystart="800" bodyend="1085"/>
    <listofallmembers>
      <member refid="classBestRangeTargetFinder_1a2a0326048661100266002b8c2313c64e" prot="private" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>attacker</name></member>
      <member refid="classBestRangeTargetFinder_1a7f0058ee2724b28c70af93a7a0662040" prot="private" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>bad</name></member>
      <member refid="classBestRangeTargetFinder_1aad6ae610b792e09746ccae1f21505811" prot="private" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>best_cost</name></member>
      <member refid="classBestRangeTargetFinder_1aaae7a1dbf2ef07dd365909ad974adeac" prot="private" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>best_unit</name></member>
      <member refid="classBestRangeTargetFinder_1aeb6efba33122245ae592754627ac0674" prot="public" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>BestRangeTargetFinder</name></member>
      <member refid="classBestRangeTargetFinder_1ae3e3a70d1e2282c3be9e53a1245d1134" prot="private" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>Compute</name></member>
      <member refid="classBestRangeTargetFinder_1a09dc0379c61e2dcc2639bdd2ef1237bd" prot="public" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>Find</name></member>
      <member refid="classBestRangeTargetFinder_1a34eeaafe83b5b78cf418e3c047131ccc" prot="public" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>Find</name></member>
      <member refid="classBestRangeTargetFinder_1af17d2fec4a90741d6ac2caefbf35b192" prot="private" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>Find</name></member>
      <member refid="classBestRangeTargetFinder_1a8418f4f86ea999e917d89d86c3c24cac" prot="private" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>good</name></member>
      <member refid="classBestRangeTargetFinder_1a34e9a417d54ec9dc70d079bd7b3ca6ef" prot="private" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>range</name></member>
      <member refid="classBestRangeTargetFinder_1a315da5865a9d7273de08ed3290fcc57f" prot="private" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>size</name></member>
      <member refid="classBestRangeTargetFinder_1a8a09581f2447b86d17d6877164a3f3fd" prot="public" virt="non-virtual"><scope>BestRangeTargetFinder</scope><name>~BestRangeTargetFinder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
