<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgcn_1_1KeyListener" kind="class" language="C++" prot="public">
    <compoundname>gcn::KeyListener</compoundname>
    <derivedcompoundref refid="classgcn_1_1Button" prot="public" virt="non-virtual">gcn::Button</derivedcompoundref>
    <derivedcompoundref refid="classgcn_1_1CheckBox" prot="public" virt="non-virtual">gcn::CheckBox</derivedcompoundref>
    <derivedcompoundref refid="classgcn_1_1DropDown" prot="public" virt="non-virtual">gcn::DropDown</derivedcompoundref>
    <derivedcompoundref refid="classgcn_1_1ListBox" prot="public" virt="non-virtual">gcn::ListBox</derivedcompoundref>
    <derivedcompoundref refid="classgcn_1_1RadioButton" prot="public" virt="non-virtual">gcn::RadioButton</derivedcompoundref>
    <derivedcompoundref refid="classgcn_1_1Slider" prot="public" virt="non-virtual">gcn::Slider</derivedcompoundref>
    <derivedcompoundref refid="classgcn_1_1TextBox" prot="public" virt="non-virtual">gcn::TextBox</derivedcompoundref>
    <derivedcompoundref refid="classgcn_1_1TextField" prot="public" virt="non-virtual">gcn::TextField</derivedcompoundref>
    <derivedcompoundref refid="classLuaActionListener" prot="public" virt="non-virtual">LuaActionListener</derivedcompoundref>
    <includes refid="keylistener_8h" local="no">keylistener.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgcn_1_1KeyListener_1a2799d25e1ce77a7cb4220ab101247f1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual gcn::KeyListener::~KeyListener</definition>
        <argsstring>()</argsstring>
        <name>~KeyListener</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/keylistener.h" line="81" column="17" bodyfile="src/guichan/include/guichan/keylistener.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1KeyListener_1a1782fd9834a50423756f2b5dc888a38b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool gcn::KeyListener::keyPress</definition>
        <argsstring>(const Key &amp;)</argsstring>
        <name>keyPress</name>
        <reimplementedby refid="classLuaActionListener_1acde9a8ff8c34b8a620f03198931c357a">keyPress</reimplementedby>
        <reimplementedby refid="classgcn_1_1ListBox_1a94243617889b2a71d7175bc4f4a84369">keyPress</reimplementedby>
        <reimplementedby refid="classgcn_1_1CheckBox_1a37e33085db5b960ffce2f566f5b7a842">keyPress</reimplementedby>
        <reimplementedby refid="classgcn_1_1Button_1afe8a434af49ad7e358271bc84bd94f41">keyPress</reimplementedby>
        <reimplementedby refid="classgcn_1_1TextField_1a7db42f5efb715f753726580040371d2d">keyPress</reimplementedby>
        <reimplementedby refid="classgcn_1_1RadioButton_1a1db1814af5f25582c8e373999ff70520">keyPress</reimplementedby>
        <reimplementedby refid="classgcn_1_1DropDown_1a4d116f635e6c5114f6533d441f5a4193">keyPress</reimplementedby>
        <reimplementedby refid="classgcn_1_1Slider_1ab0ed047e1a140332ce8b71032672bbbb">keyPress</reimplementedby>
        <reimplementedby refid="classgcn_1_1TextBox_1a6acb8b8393507c4c99da74dc5f677911">keyPress</reimplementedby>
        <param>
          <type>const <ref refid="classgcn_1_1Key" kindref="compound">Key</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called if a key is pressed when the widget has keyboard focus. If a key is held down the widget will generate multiple key presses.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key pressed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/keylistener.h" line="90" column="22" bodyfile="src/guichan/include/guichan/keylistener.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1KeyListener_1a4463ce8443a77c86fe1fe9b45f757f35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool gcn::KeyListener::keyRelease</definition>
        <argsstring>(const Key &amp;)</argsstring>
        <name>keyRelease</name>
        <reimplementedby refid="classLuaActionListener_1ae118ce141aa4d3a13df55da1e39b4559">keyRelease</reimplementedby>
        <reimplementedby refid="classgcn_1_1Button_1a497ed4eb7caf4bd4488cdba8888709f6">keyRelease</reimplementedby>
        <param>
          <type>const <ref refid="classgcn_1_1Key" kindref="compound">Key</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called if a key is released when the widget has keyboard focus.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key released. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/keylistener.h" line="97" column="22" bodyfile="src/guichan/include/guichan/keylistener.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1KeyListener_1a2b1c730f089cb3379822ed45743a628e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::KeyListener::hotKeyPress</definition>
        <argsstring>(const Key &amp;)</argsstring>
        <name>hotKeyPress</name>
        <reimplementedby refid="classLuaActionListener_1a56b07355994c825c61b1a62e3a4373f2">hotKeyPress</reimplementedby>
        <param>
          <type>const <ref refid="classgcn_1_1Key" kindref="compound">Key</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/keylistener.h" line="99" column="14" bodyfile="src/guichan/include/guichan/keylistener.h" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1KeyListener_1ae326dd01d711f4441d170cbc2674d04c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::KeyListener::hotKeyRelease</definition>
        <argsstring>(const Key &amp;)</argsstring>
        <name>hotKeyRelease</name>
        <reimplementedby refid="classLuaActionListener_1a0d411ea1b21e2352fcc0530f58559cb6">hotKeyRelease</reimplementedby>
        <param>
          <type>const <ref refid="classgcn_1_1Key" kindref="compound">Key</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/keylistener.h" line="100" column="14" bodyfile="src/guichan/include/guichan/keylistener.h" bodystart="100" bodyend="100"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classgcn_1_1KeyListener_1a58148db837cc6b6356c1fd5ded2de062" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gcn::KeyListener::KeyListener</definition>
        <argsstring>()</argsstring>
        <name>KeyListener</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor.</para>
<para>You should not be able to make an instance of <ref refid="classgcn_1_1KeyListener" kindref="compound">KeyListener</ref>, therefore its constructor is protected. To use <ref refid="classgcn_1_1KeyListener" kindref="compound">KeyListener</ref> you must inherit from this class and implement it&apos;s functions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/keylistener.h" line="111" column="9" bodyfile="src/guichan/include/guichan/keylistener.h" bodystart="111" bodyend="111"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classgcn_1_1Key" kindref="compound">Key</ref> listeners base class. Inorder to use this class you must inherit from it and implements it&apos;s functions. KeyListeners listen for key events on a Widgets. When a <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> recives a key event, the corresponding function in all it&apos;s key listeners will be called. Only focused Widgets will generate key events.</para>
<para><simplesect kind="see"><para><ref refid="classgcn_1_1Widget_1a7a7767d1da53e4d38f763bfb8b83a277" kindref="member">Widget::addKeyListener</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="16">
        <label>gcn::TextBox</label>
        <link refid="classgcn_1_1TextBox"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>gcn::RadioButton</label>
        <link refid="classgcn_1_1RadioButton"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>gcn::DropDown</label>
        <link refid="classgcn_1_1DropDown"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>ImageButton</label>
        <link refid="classImageButton"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>gcn::Slider</label>
        <link refid="classgcn_1_1Slider"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>ButtonWidget</label>
        <link refid="classButtonWidget"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>gcn::Button</label>
        <link refid="classgcn_1_1Button"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>ImageRadioButton</label>
        <link refid="classImageRadioButton"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>ImageSlider</label>
        <link refid="classImageSlider"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>gcn::CheckBox</label>
        <link refid="classgcn_1_1CheckBox"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>ImageDropDownWidget</label>
        <link refid="classImageDropDownWidget"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>DropDownWidget</label>
        <link refid="classDropDownWidget"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>gcn::KeyListener</label>
        <link refid="classgcn_1_1KeyListener"/>
      </node>
      <node id="11">
        <label>ImageListBox</label>
        <link refid="classImageListBox"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>ImageCheckBox</label>
        <link refid="classImageCheckBox"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>gcn::TextField</label>
        <link refid="classgcn_1_1TextField"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>ImageTextField</label>
        <link refid="classImageTextField"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>gcn::ListBox</label>
        <link refid="classgcn_1_1ListBox"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>LuaActionListener</label>
        <link refid="classLuaActionListener"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="src/guichan/include/guichan/keylistener.h" line="75" column="1" bodyfile="src/guichan/include/guichan/keylistener.h" bodystart="74" bodyend="112"/>
    <listofallmembers>
      <member refid="classgcn_1_1KeyListener_1a2b1c730f089cb3379822ed45743a628e" prot="public" virt="virtual"><scope>gcn::KeyListener</scope><name>hotKeyPress</name></member>
      <member refid="classgcn_1_1KeyListener_1ae326dd01d711f4441d170cbc2674d04c" prot="public" virt="virtual"><scope>gcn::KeyListener</scope><name>hotKeyRelease</name></member>
      <member refid="classgcn_1_1KeyListener_1a58148db837cc6b6356c1fd5ded2de062" prot="protected" virt="non-virtual"><scope>gcn::KeyListener</scope><name>KeyListener</name></member>
      <member refid="classgcn_1_1KeyListener_1a1782fd9834a50423756f2b5dc888a38b" prot="public" virt="virtual"><scope>gcn::KeyListener</scope><name>keyPress</name></member>
      <member refid="classgcn_1_1KeyListener_1a4463ce8443a77c86fe1fe9b45f757f35" prot="public" virt="virtual"><scope>gcn::KeyListener</scope><name>keyRelease</name></member>
      <member refid="classgcn_1_1KeyListener_1a2799d25e1ce77a7cb4220ab101247f1d" prot="public" virt="virtual"><scope>gcn::KeyListener</scope><name>~KeyListener</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
