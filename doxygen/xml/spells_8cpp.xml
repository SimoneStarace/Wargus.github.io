<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="spells_8cpp" kind="file" language="C++">
    <compoundname>spells.cpp</compoundname>
    <includes refid="stratagus_8h" local="yes">stratagus.h</includes>
    <includes refid="spells_8h" local="yes">spells.h</includes>
    <includes refid="actions_8h" local="yes">actions.h</includes>
    <includes refid="commands_8h" local="yes">commands.h</includes>
    <includes refid="map_8h" local="yes">map.h</includes>
    <includes refid="sound_8h" local="yes">sound.h</includes>
    <includes refid="unit_8h" local="yes">unit.h</includes>
    <includes refid="unit__find_8h" local="yes">unit_find.h</includes>
    <includes refid="upgrade_8h" local="yes">upgrade.h</includes>
    <incdepgraph>
      <node id="16">
        <label>upgrade_structs.h</label>
        <link refid="upgrade__structs_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>queue</label>
      </node>
      <node id="29">
        <label>SDL_mixer.h</label>
      </node>
      <node id="28">
        <label>SDL.h</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="4">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>stdint.h</label>
      </node>
      <node id="14">
        <label>variant</label>
      </node>
      <node id="18">
        <label>actions.h</label>
        <link refid="actions_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>pathfinder.h</label>
        <link refid="pathfinder_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="9">
        <label>spells.h</label>
        <link refid="spells_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="1">
        <label>src/spell/spells.cpp</label>
        <link refid="spells_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>upgrade.h</label>
        <link refid="upgrade_8h"/>
      </node>
      <node id="19">
        <label>unitptr.h</label>
        <link refid="unitptr_8h"/>
      </node>
      <node id="23">
        <label>unit_cache.h</label>
        <link refid="unit__cache_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
      <node id="33">
        <label>missileconfig.h</label>
        <link refid="missileconfig_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>sound.h</label>
        <link refid="sound_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>luacallback.h</label>
        <link refid="luacallback_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="13">
        <label>utility</label>
      </node>
      <node id="2">
        <label>stratagus.h</label>
        <link refid="stratagus_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>color.h</label>
        <link refid="include_2color_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>unitsound.h</label>
        <link refid="unitsound_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>icons.h</label>
        <link refid="icons_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstdlib</label>
      </node>
      <node id="34">
        <label>climits</label>
      </node>
      <node id="21">
        <label>map.h</label>
        <link refid="map_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>vec2i.h</label>
        <link refid="vec2i_8h"/>
      </node>
      <node id="30">
        <label>unit.h</label>
        <link refid="unit_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>tile.h</label>
        <link refid="tile_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>unit_find.h</label>
        <link refid="unit__find_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>set</label>
      </node>
      <node id="31">
        <label>unittype.h</label>
        <link refid="unittype_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>algorithm</label>
      </node>
      <node id="35">
        <label>player.h</label>
        <link refid="player_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>commands.h</label>
        <link refid="commands_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classAutoCastPrioritySort" prot="public">AutoCastPrioritySort</innerclass>
      <sectiondef kind="user-defined">
      <header>spells.cpp - The spell cast action.</header>
      <memberdef kind="variable" id="spells_8cpp_1a908e3d31e0e476cad2c894b3a1589ddd" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classSpellType" kindref="compound">SpellType</ref> * &gt;</type>
        <definition>std::vector&lt;SpellType *&gt; SpellTypeTable</definition>
        <argsstring></argsstring>
        <name>SpellTypeTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define the names and effects of all im play available spells. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spell/spells.cpp" line="64" column="13" bodyfile="src/spell/spells.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="spells_8cpp_1a42a5024475c3f14dd8c4ebcaad6996fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTarget" kindref="compound">Target</ref> *</type>
        <definition>static Target* NewTargetUnit</definition>
        <argsstring>(CUnit &amp;unit)</argsstring>
        <name>NewTargetUnit</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classTarget" kindref="compound">Target</ref> constructor for unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classTarget" kindref="compound">Target</ref> unit.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new target. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spell/spells.cpp" line="82" column="15" bodyfile="src/spell/spells.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="spells_8cpp_1a9077306d3dbba28f352f3aa8f9e73d09" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool PassCondition</definition>
        <argsstring>(const CUnit &amp;caster, const SpellType &amp;spell, const CUnit *target, const Vec2i &amp;goalPos, const ConditionInfo *condition)</argsstring>
        <name>PassCondition</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>caster</declname>
        </param>
        <param>
          <type>const <ref refid="classSpellType" kindref="compound">SpellType</ref> &amp;</type>
          <declname>spell</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>goalPos</declname>
        </param>
        <param>
          <type>const <ref refid="classConditionInfo" kindref="compound">ConditionInfo</ref> *</type>
          <declname>condition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check the condition.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caster</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to caster unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the spell to cast. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to target unit, or 0 if it is a position spell. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goalPos</parametername>
</parameternamelist>
<parameterdescription>
<para>position, or {-1, -1} if it is a unit spell. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to condition info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if passed, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spell/spells.cpp" line="102" column="13" bodyfile="src/spell/spells.cpp" bodystart="102" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="spells_8cpp_1a277d0af399493a733628e26b65f25a03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTarget" kindref="compound">Target</ref> *</type>
        <definition>static Target* SelectTargetUnitsOfAutoCast</definition>
        <argsstring>(CUnit &amp;caster, const SpellType &amp;spell)</argsstring>
        <name>SelectTargetUnitsOfAutoCast</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>caster</declname>
        </param>
        <param>
          <type>const <ref refid="classSpellType" kindref="compound">SpellType</ref> &amp;</type>
          <declname>spell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select the target for the autocast.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caster</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit who would cast the spell. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spell</parametername>
</parameternamelist>
<parameterdescription>
<para>Spell-type pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Target* chosen target or Null if spell can&apos;t be cast. </para>
</simplesect>
<xrefsect id="todo_1_todo000058"><xreftitle>Todo</xreftitle><xrefdescription><para>FIXME: should be global (for AI) ??? </para>
<para>FIXME: write for position target. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spell/spells.cpp" line="253" column="15" bodyfile="src/spell/spells.cpp" bodystart="253" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="spells_8cpp_1a95062d1a9764a34d6203cd2a14a5c376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void InitSpells</definition>
        <argsstring>()</argsstring>
        <name>InitSpells</name>
        <briefdescription>
<para>init spell tables </para>
        </briefdescription>
        <detaileddescription>
<para>Spells constructor, inits spell id&apos;s and sounds </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spell/spells.cpp" line="407" column="6" bodyfile="src/spell/spells.cpp" bodystart="407" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="spells_8cpp_1a23b9d97d120a650fd7a5208fd275b365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSpellType" kindref="compound">SpellType</ref> *</type>
        <definition>SpellType* SpellTypeByIdent</definition>
        <argsstring>(const std::string &amp;ident)</argsstring>
        <name>SpellTypeByIdent</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>ident</declname>
        </param>
        <briefdescription>
<para>return spell type by ident string </para>
        </briefdescription>
        <detaileddescription>
<para>Get spell-type struct pointer by string identifier.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ident</parametername>
</parameternamelist>
<parameterdescription>
<para>Spell identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>spell-type struct pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spell/spells.cpp" line="418" column="11" bodyfile="src/spell/spells.cpp" bodystart="418" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="spells_8cpp_1a30cf35e01240d518e213b364d57c00cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SpellIsAvailable</definition>
        <argsstring>(const CPlayer &amp;player, int spellid)</argsstring>
        <name>SpellIsAvailable</name>
        <param>
          <type>const <ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>player</declname>
        </param>
        <param>
          <type>int</type>
          <declname>spellid</declname>
        </param>
        <briefdescription>
<para>return 1 if spell is available, 0 if not (must upgrade) </para>
        </briefdescription>
        <detaileddescription>
<para>Check if spell is research for player <computeroutput>player</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>player for who we want to know if he knows the spell. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spellid</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the spell to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if spell is not available, else no null. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spell/spells.cpp" line="439" column="6" bodyfile="src/spell/spells.cpp" bodystart="439" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="spells_8cpp_1a64b90c580cd6d44910eb187c21c6e2ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CanCastSpell</definition>
        <argsstring>(const CUnit &amp;caster, const SpellType &amp;spell, const CUnit *target, const Vec2i &amp;goalPos)</argsstring>
        <name>CanCastSpell</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>caster</declname>
        </param>
        <param>
          <type>const <ref refid="classSpellType" kindref="compound">SpellType</ref> &amp;</type>
          <declname>spell</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>goalPos</declname>
        </param>
        <briefdescription>
<para>returns true if spell can be casted (enough mana, valid target) </para>
        </briefdescription>
        <detaileddescription>
<para>Check if unit can cast the spell.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caster</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit that casts the spell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spell</parametername>
</parameternamelist>
<parameterdescription>
<para>Spell-type pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classTarget" kindref="compound">Target</ref> unit that spell is addressed to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goalPos</parametername>
</parameternamelist>
<parameterdescription>
<para>coord of target spot when/if target does not exist</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>=!0 if spell should/can casted, 0 if not </para>
</simplesect>
<simplesect kind="note"><para>caster must know the spell, and spell must be researched. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spell/spells.cpp" line="457" column="6" bodyfile="src/spell/spells.cpp" bodystart="457" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="spells_8cpp_1af9bc7d31ecb43c77e8e57bc920894add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AutoCastSpell</definition>
        <argsstring>(CUnit &amp;caster, const SpellType &amp;spell)</argsstring>
        <name>AutoCastSpell</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>caster</declname>
        </param>
        <param>
          <type>const <ref refid="classSpellType" kindref="compound">SpellType</ref> &amp;</type>
          <declname>spell</declname>
        </param>
        <briefdescription>
<para>auto cast the spell if possible </para>
        </briefdescription>
        <detaileddescription>
<para>Check if the spell can be auto cast and cast it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caster</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit who can cast the spell. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spell</parametername>
</parameternamelist>
<parameterdescription>
<para>Spell-type pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if spell is casted, 0 if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spell/spells.cpp" line="474" column="5" bodyfile="src/spell/spells.cpp" bodystart="474" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="spells_8cpp_1aa1b03e1bff4d156de5789ca1229f516e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SpellCast</definition>
        <argsstring>(CUnit &amp;caster, const SpellType &amp;spell, CUnit *target, const Vec2i &amp;goalPos)</argsstring>
        <name>SpellCast</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>caster</declname>
        </param>
        <param>
          <type>const <ref refid="classSpellType" kindref="compound">SpellType</ref> &amp;</type>
          <declname>spell</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>goalPos</declname>
        </param>
        <briefdescription>
<para>cast spell on target unit or place at x,y </para>
        </briefdescription>
        <detaileddescription>
<para>Spell cast!</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caster</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit that casts the spell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spell</parametername>
</parameternamelist>
<parameterdescription>
<para>Spell-type pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classTarget" kindref="compound">Target</ref> unit that spell is addressed to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goalPos</parametername>
</parameternamelist>
<parameterdescription>
<para>coord of target spot when/if target does not exist</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>!=0 if spell should/can continue or 0 to stop </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spell/spells.cpp" line="511" column="5" bodyfile="src/spell/spells.cpp" bodystart="511" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="spells_8cpp_1a3c94cb920401e1158879fbcbb20cdfdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CleanSpells</definition>
        <argsstring>()</argsstring>
        <name>CleanSpells</name>
        <briefdescription>
<para>done spell tables </para>
        </briefdescription>
        <detaileddescription>
<para>Cleanup the spell subsystem. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spell/spells.cpp" line="605" column="6" bodyfile="src/spell/spells.cpp" bodystart="605" bodyend="612"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/spell/spells.cpp"/>
  </compounddef>
</doxygen>
