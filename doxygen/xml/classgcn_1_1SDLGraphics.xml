<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgcn_1_1SDLGraphics" kind="class" language="C++" prot="public">
    <compoundname>gcn::SDLGraphics</compoundname>
    <basecompoundref refid="classgcn_1_1Graphics" prot="public" virt="non-virtual">gcn::Graphics</basecompoundref>
    <includes refid="sdlgraphics_8h" local="no">sdlgraphics.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgcn_1_1SDLGraphics_1ad5a72b1f93b771ee76f2cf95226a3385" prot="protected" static="no" mutable="no">
        <type>SDL_Surface **</type>
        <definition>SDL_Surface** gcn::SDLGraphics::mTarget</definition>
        <argsstring></argsstring>
        <name>mTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="150" column="21" bodyfile="src/guichan/include/guichan/sdl/sdlgraphics.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1SDLGraphics_1a2801f09228c3d44c104172a2a94c5249" prot="protected" static="no" mutable="no">
        <type><ref refid="classgcn_1_1Color" kindref="compound">Color</ref></type>
        <definition>Color gcn::SDLGraphics::mColor</definition>
        <argsstring></argsstring>
        <name>mColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="151" column="15" bodyfile="src/guichan/include/guichan/sdl/sdlgraphics.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1SDLGraphics_1ac56f362fd6f04bd5f02390d6536e6f47" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gcn::SDLGraphics::mAlpha</definition>
        <argsstring></argsstring>
        <name>mAlpha</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="152" column="14" bodyfile="src/guichan/include/guichan/sdl/sdlgraphics.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1a20ad9e8fcb2fe68894ade3f48f2e6853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gcn::SDLGraphics::SDLGraphics</definition>
        <argsstring>()</argsstring>
        <name>SDLGraphics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="83" column="9" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="76" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1aeac0b18c4bc8238bdebdf2b98a9e9771" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::setTarget</definition>
        <argsstring>(SDL_Surface **surface)</argsstring>
        <name>setTarget</name>
        <param>
          <type>SDL_Surface **</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the target surface to render into. The target can be any SDL_Surface. This funtion also pushes a clip areas corresponding to the dimension of the target.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>the target to draw to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="92" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1a38369ee1d6be599abecdaa7cf17aaba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::drawSDLSurface</definition>
        <argsstring>(SDL_Surface *surface, SDL_Rect source, SDL_Rect destination)</argsstring>
        <name>drawSDLSurface</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>SDL_Rect</type>
          <declname>source</declname>
        </param>
        <param>
          <type>SDL_Rect</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws an SDL_Surface on the target surface. Normaly you&apos;ll use drawImage, but if you want to write SDL specific code this function might come in handy.</para>
<para>NOTE: The clip areas will be taken into account. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="101" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="505" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1a8a551d5159bb79dd7d77cd081f5d9c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::_beginDraw</definition>
        <argsstring>()</argsstring>
        <name>_beginDraw</name>
        <reimplements refid="classgcn_1_1Graphics_1a85e8107504f70fa460b844fb2259c653">_beginDraw</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes drawing. Called by the <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> when <ref refid="classgcn_1_1Gui_1ad231f982fb8182b16ecf11075054f4ac" kindref="member">Gui::draw()</ref> is called. It is needed by some implementations of <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> to perform preparations before drawing. An example of such an implementation would be OpenGLGraphics.</para>
<para>NOTE: You will never need to call this function yourself. <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> will do it for you.</para>
<para><simplesect kind="see"><para><ref refid="classgcn_1_1SDLGraphics_1a1ec61016736b34271f60e3a88d65c1b7" kindref="member">_endDraw</ref>, <ref refid="classgcn_1_1Gui_1ad231f982fb8182b16ecf11075054f4ac" kindref="member">Gui::draw</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="107" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="82" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1a1ec61016736b34271f60e3a88d65c1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::_endDraw</definition>
        <argsstring>()</argsstring>
        <name>_endDraw</name>
        <reimplements refid="classgcn_1_1Graphics_1af6b9381e34ec34f10e9bbf77b7b00c78">_endDraw</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deinitializes drawing. Called by the <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> when a <ref refid="classgcn_1_1Gui_1ad231f982fb8182b16ecf11075054f4ac" kindref="member">Gui::draw()</ref> is done. done. It should reset any state changes made by <ref refid="classgcn_1_1SDLGraphics_1a8a551d5159bb79dd7d77cd081f5d9c78" kindref="member">_beginDraw()</ref>.</para>
<para>NOTE: You will never need to call this function yourself. <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> will do it for you.</para>
<para><simplesect kind="see"><para><ref refid="classgcn_1_1SDLGraphics_1a8a551d5159bb79dd7d77cd081f5d9c78" kindref="member">_beginDraw</ref>, <ref refid="classgcn_1_1Gui_1ad231f982fb8182b16ecf11075054f4ac" kindref="member">Gui::draw</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="109" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1a1fbd23bf7540f15bb9e07ee378d60e25" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool gcn::SDLGraphics::pushClipArea</definition>
        <argsstring>(Rectangle area)</argsstring>
        <name>pushClipArea</name>
        <reimplements refid="classgcn_1_1Graphics_1ab8f8773da6aa70f5fb554c2a2815c496">pushClipArea</reimplements>
        <param>
          <type><ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref></type>
          <declname>area</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pushes a clip area onto the stack. The x and y coordinates in the <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref> will be relative to the last pushed clip area. If the new area falls outside the current clip area, it will be clipped as necessary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para>the clip area to be pushed onto the stack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if the the new area lays totally outside the current clip area. Note that an empty clip area will be pused in this case. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="111" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="102" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1a6876d1027cb3feb4a413e3e854812a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::popClipArea</definition>
        <argsstring>()</argsstring>
        <name>popClipArea</name>
        <reimplements refid="classgcn_1_1Graphics_1a11a3be7969db7490df8a02cb4549b443">popClipArea</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the topmost clip area from the stack.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgcn_1_1Exception" kindref="compound">Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the stack is empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="113" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="118" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1adaaf65022086f36b9aa4d9190fd092f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::drawImage</definition>
        <argsstring>(const Image *image, int srcX, int srcY, int dstX, int dstY, int width, int height)</argsstring>
        <name>drawImage</name>
        <reimplements refid="classgcn_1_1Graphics_1aeb284b30f59d5cfa4c4e25130f4c164e">drawImage</reimplements>
        <param>
          <type>const <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srcX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srcY</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstY</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a part of an <ref refid="classgcn_1_1Image" kindref="compound">Image</ref>.</para>
<para>NOTE: Width and height arguments will not scale the <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> but specifies the size of the part to be drawn. If you want to draw the whole <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> there is a simplified version of this function.</para>
<para>EXAMPLE:<programlisting><codeline><highlight class="normal">drawImage(myImage,<sp/>10,<sp/>10,<sp/>20,<sp/>20,<sp/>40,<sp/>40);<sp/></highlight></codeline>
</programlisting> Will draw a rectangular piece of myImage starting at coordinate (10, 10) in myImage, with width and height 40. The piece will be drawn with it&apos;s top left corner at coordinate (20, 20).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcX</parametername>
</parameternamelist>
<parameterdescription>
<para>source <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcY</parametername>
</parameternamelist>
<parameterdescription>
<para>source <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> y coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstX</parametername>
</parameternamelist>
<parameterdescription>
<para>destination x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstY</parametername>
</parameternamelist>
<parameterdescription>
<para>destination y coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the piece. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the piece. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="115" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="137" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1a5f670d60ecbf4b716f005db098363915" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::drawPoint</definition>
        <argsstring>(int x, int y)</argsstring>
        <name>drawPoint</name>
        <reimplements refid="classgcn_1_1Graphics_1adfd989a2a8c6771c6368b25f3977ecf4">drawPoint</reimplements>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a single point/pixel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="119" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="204" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1adcb7d5d91da928a92c82ad1fc5fba273" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::drawLine</definition>
        <argsstring>(int x1, int y1, int x2, int y2)</argsstring>
        <name>drawLine</name>
        <reimplements refid="classgcn_1_1Graphics_1a92af7e5f5ed6ebf692803bc1bd1d5db5">drawLine</reimplements>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ddraws a line.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first y coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second y coordinate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="121" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="323" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1a17607f95e7af8fc9c55d112753ef9873" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::drawRectangle</definition>
        <argsstring>(const Rectangle &amp;rectangle)</argsstring>
        <name>drawRectangle</name>
        <reimplements refid="classgcn_1_1Graphics_1a8ffb254f53931ce3809a6f10307fcbf2">drawRectangle</reimplements>
        <param>
          <type>const <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref> &amp;</type>
          <declname>rectangle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a simple, non-filled, <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref> with one pixel width.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rectangle</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref> to draw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="123" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="309" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1a8d3fba4fa40d9d5ef436b836dfd25804" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::fillRectangle</definition>
        <argsstring>(const Rectangle &amp;rectangle)</argsstring>
        <name>fillRectangle</name>
        <reimplements refid="classgcn_1_1Graphics_1a5caac226a94ecf8fdfee1da7cd14f0df">fillRectangle</reimplements>
        <param>
          <type>const <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref> &amp;</type>
          <declname>rectangle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a filled <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rectangle</parametername>
</parameternamelist>
<parameterdescription>
<para>the filled <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref> to draw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="125" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="163" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1a26298c36c21fc6e16b02a932627adae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::setColor</definition>
        <argsstring>(const Color &amp;color)</argsstring>
        <name>setColor</name>
        <reimplements refid="classgcn_1_1Graphics_1a7f438ae2b4cc09c66d77a9b9cb591e7c">setColor</reimplements>
        <param>
          <type>const <ref refid="classgcn_1_1Color" kindref="compound">Color</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classgcn_1_1Color" kindref="compound">Color</ref> to use when drawing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classgcn_1_1Color" kindref="compound">Color</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="127" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="493" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1a64363f22dce7278007350cfab8569d58" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classgcn_1_1Color" kindref="compound">Color</ref> &amp;</type>
        <definition>const Color &amp; gcn::SDLGraphics::getColor</definition>
        <argsstring>()</argsstring>
        <name>getColor</name>
        <reimplements refid="classgcn_1_1Graphics_1a509769aaeb7356cd0f595f3ddb962e49">getColor</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the <ref refid="classgcn_1_1Color" kindref="compound">Color</ref> to use when drawing.</para>
<para><simplesect kind="return"><para>the <ref refid="classgcn_1_1Color" kindref="compound">Color</ref> used when drawing. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="129" column="29" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="500" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1aeb284b30f59d5cfa4c4e25130f4c164e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::Graphics::drawImage</definition>
        <argsstring>(const Image *image, int srcX, int srcY, int dstX, int dstY, int width, int height)=0</argsstring>
        <name>drawImage</name>
        <param>
          <type>const <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srcX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srcY</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstY</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a part of an <ref refid="classgcn_1_1Image" kindref="compound">Image</ref>.</para>
<para>NOTE: Width and height arguments will not scale the <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> but specifies the size of the part to be drawn. If you want to draw the whole <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> there is a simplified version of this function.</para>
<para>EXAMPLE:<programlisting><codeline><highlight class="normal">drawImage(myImage,<sp/>10,<sp/>10,<sp/>20,<sp/>20,<sp/>40,<sp/>40);<sp/></highlight></codeline>
</programlisting> Will draw a rectangular piece of myImage starting at coordinate (10, 10) in myImage, with width and height 40. The piece will be drawn with it&apos;s top left corner at coordinate (20, 20).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcX</parametername>
</parameternamelist>
<parameterdescription>
<para>source <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcY</parametername>
</parameternamelist>
<parameterdescription>
<para>source <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> y coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstX</parametername>
</parameternamelist>
<parameterdescription>
<para>destination x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstY</parametername>
</parameternamelist>
<parameterdescription>
<para>destination y coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the piece. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the piece. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="78" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1aed30c3aa213a2d225b1c119b3f5f8d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Graphics::drawImage</definition>
        <argsstring>(const Image *image, int dstX, int dstY)</argsstring>
        <name>drawImage</name>
        <param>
          <type>const <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws an image. A simplified version of the other drawImage. It will draw a whole image at the coordinate you specify. It is equivalent to calling: <programlisting><codeline><highlight class="normal">drawImage(myImage,<sp/>0,<sp/>0,<sp/>dstX,<sp/>dstY,<sp/>image-&gt;getWidth(),<sp/>image-&gt;getHeight());<sp/></highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="78" column="9" bodyfile="src/guichan/graphics.cpp" bodystart="122" bodyend="125"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1ade0cc714be37c6a845a0e80737f848a0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::drawHLine</definition>
        <argsstring>(int x1, int y, int x2)</argsstring>
        <name>drawHLine</name>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a horizontal line.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>the start coordinate of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>the end coordinate of the line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="139" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="223" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1SDLGraphics_1a425d9b80490169dddfaf37ba3d6724cf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::SDLGraphics::drawVLine</definition>
        <argsstring>(int x, int y1, int y2)</argsstring>
        <name>drawVLine</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a vertical line.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>the start coordinate of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y2</parametername>
</parameternamelist>
<parameterdescription>
<para>the end coordinate of the line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="148" column="22" bodyfile="src/guichan/sdl/sdlgraphics.cpp" bodystart="266" bodyend="307"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>SDL implementation of the <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>gcn::Graphics</label>
        <link refid="classgcn_1_1Graphics"/>
      </node>
      <node id="1">
        <label>gcn::SDLGraphics</label>
        <link refid="classgcn_1_1SDLGraphics"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>gcn::Graphics</label>
        <link refid="classgcn_1_1Graphics"/>
        <childnode refid="3" relation="usage">
          <edgelabel>mFont</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>gcn::Color</label>
        <link refid="classgcn_1_1Color"/>
      </node>
      <node id="1">
        <label>gcn::SDLGraphics</label>
        <link refid="classgcn_1_1SDLGraphics"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>mColor</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>gcn::Font</label>
        <link refid="classgcn_1_1Font"/>
      </node>
    </collaborationgraph>
    <location file="src/guichan/include/guichan/sdl/sdlgraphics.h" line="74" column="1" bodyfile="src/guichan/include/guichan/sdl/sdlgraphics.h" bodystart="73" bodyend="153"/>
    <listofallmembers>
      <member refid="classgcn_1_1SDLGraphics_1a8a551d5159bb79dd7d77cd081f5d9c78" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>_beginDraw</name></member>
      <member refid="classgcn_1_1SDLGraphics_1a1ec61016736b34271f60e3a88d65c1b7" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>_endDraw</name></member>
      <member refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba922f83bc619a6d5c9dd3cf322157d505" prot="public" virt="non-virtual"><scope>gcn::SDLGraphics</scope><name>CENTER</name></member>
      <member refid="classgcn_1_1SDLGraphics_1ade0cc714be37c6a845a0e80737f848a0" prot="protected" virt="virtual"><scope>gcn::SDLGraphics</scope><name>drawHLine</name></member>
      <member refid="classgcn_1_1SDLGraphics_1adaaf65022086f36b9aa4d9190fd092f0" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>drawImage</name></member>
      <member refid="classgcn_1_1SDLGraphics_1aeb284b30f59d5cfa4c4e25130f4c164e" prot="public" virt="non-virtual"><scope>gcn::SDLGraphics</scope><name>drawImage</name></member>
      <member refid="classgcn_1_1SDLGraphics_1aed30c3aa213a2d225b1c119b3f5f8d60" prot="public" virt="non-virtual"><scope>gcn::SDLGraphics</scope><name>drawImage</name></member>
      <member refid="classgcn_1_1Graphics_1aed30c3aa213a2d225b1c119b3f5f8d60" prot="public" virt="virtual" ambiguityscope="gcn::Graphics::"><scope>gcn::SDLGraphics</scope><name>drawImage</name></member>
      <member refid="classgcn_1_1SDLGraphics_1adcb7d5d91da928a92c82ad1fc5fba273" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>drawLine</name></member>
      <member refid="classgcn_1_1SDLGraphics_1a5f670d60ecbf4b716f005db098363915" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>drawPoint</name></member>
      <member refid="classgcn_1_1SDLGraphics_1a17607f95e7af8fc9c55d112753ef9873" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>drawRectangle</name></member>
      <member refid="classgcn_1_1SDLGraphics_1a38369ee1d6be599abecdaa7cf17aaba4" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>drawSDLSurface</name></member>
      <member refid="classgcn_1_1Graphics_1a7401dbf1191fbcb377ad67a9cc0a78be" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>drawText</name></member>
      <member refid="classgcn_1_1SDLGraphics_1a425d9b80490169dddfaf37ba3d6724cf" prot="protected" virt="virtual"><scope>gcn::SDLGraphics</scope><name>drawVLine</name></member>
      <member refid="classgcn_1_1SDLGraphics_1a8d3fba4fa40d9d5ef436b836dfd25804" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>fillRectangle</name></member>
      <member refid="classgcn_1_1SDLGraphics_1a64363f22dce7278007350cfab8569d58" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>getColor</name></member>
      <member refid="classgcn_1_1Graphics_1a642535039e421b0530bd85d71b8f7151" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>getCurrentClipArea</name></member>
      <member refid="classgcn_1_1Graphics_1ac999502b315af8b5d974506cdb1e2dcc" prot="public" virt="non-virtual"><scope>gcn::SDLGraphics</scope><name>Graphics</name></member>
      <member refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba6d4805f8b61e596e250ea9ad61fadfdc" prot="public" virt="non-virtual"><scope>gcn::SDLGraphics</scope><name>LEFT</name></member>
      <member refid="classgcn_1_1SDLGraphics_1ac56f362fd6f04bd5f02390d6536e6f47" prot="protected" virt="non-virtual"><scope>gcn::SDLGraphics</scope><name>mAlpha</name></member>
      <member refid="classgcn_1_1Graphics_1a08be42a39b774cd0ee449a8cc76cc84b" prot="protected" virt="non-virtual"><scope>gcn::SDLGraphics</scope><name>mClipStack</name></member>
      <member refid="classgcn_1_1SDLGraphics_1a2801f09228c3d44c104172a2a94c5249" prot="protected" virt="non-virtual"><scope>gcn::SDLGraphics</scope><name>mColor</name></member>
      <member refid="classgcn_1_1Graphics_1af58494bcfd95382cb7af4f0d573b8b1a" prot="protected" virt="non-virtual"><scope>gcn::SDLGraphics</scope><name>mFont</name></member>
      <member refid="classgcn_1_1SDLGraphics_1ad5a72b1f93b771ee76f2cf95226a3385" prot="protected" virt="non-virtual"><scope>gcn::SDLGraphics</scope><name>mTarget</name></member>
      <member refid="classgcn_1_1SDLGraphics_1a6876d1027cb3feb4a413e3e854812a4b" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>popClipArea</name></member>
      <member refid="classgcn_1_1SDLGraphics_1a1fbd23bf7540f15bb9e07ee378d60e25" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>pushClipArea</name></member>
      <member refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba6c47ce9c7f1438059e8e6b7eef671cc8" prot="public" virt="non-virtual"><scope>gcn::SDLGraphics</scope><name>RIGHT</name></member>
      <member refid="classgcn_1_1SDLGraphics_1a20ad9e8fcb2fe68894ade3f48f2e6853" prot="public" virt="non-virtual"><scope>gcn::SDLGraphics</scope><name>SDLGraphics</name></member>
      <member refid="classgcn_1_1SDLGraphics_1a26298c36c21fc6e16b02a932627adae6" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>setColor</name></member>
      <member refid="classgcn_1_1Graphics_1a7415290eb8b075fae0b4a6fce3912f4e" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>setFont</name></member>
      <member refid="classgcn_1_1SDLGraphics_1aeac0b18c4bc8238bdebdf2b98a9e9771" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>setTarget</name></member>
      <member refid="classgcn_1_1Graphics_1ab33d3ad4b19455171d22fa1dccae9591" prot="public" virt="virtual"><scope>gcn::SDLGraphics</scope><name>~Graphics</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
