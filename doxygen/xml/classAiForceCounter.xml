<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classAiForceCounter" kind="class" language="C++" prot="public">
    <compoundname>AiForceCounter</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classAiForceCounter_1a82fc32d82dfc6770abc575a59ede9a3b" prot="private" static="no" mutable="no">
        <type>unsigned int *</type>
        <definition>unsigned int* AiForceCounter::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_force.cpp" line="313" column="14" bodyfile="src/ai/ai_force.cpp" bodystart="313" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classAiForceCounter_1ab13400df049513078d2a7407ee14ab74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>AiForceCounter::AiForceCounter</definition>
        <argsstring>(CUnitCache &amp;units, unsigned int *d, const size_t len)</argsstring>
        <name>AiForceCounter</name>
        <param>
          <type><ref refid="classCUnitCache" kindref="compound">CUnitCache</ref> &amp;</type>
          <declname>units</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_force.cpp" line="303" column="1" bodyfile="src/ai/ai_force.cpp" bodystart="303" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classAiForceCounter_1a03a0a1bc839765d9cc002506b2bc0e92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiForceCounter::operator()</definition>
        <argsstring>(const CUnit *const unit) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> *const</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_force.cpp" line="308" column="13" bodyfile="src/ai/ai_force.cpp" bodystart="308" bodyend="311"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/ai/ai_force.cpp" line="301" column="1" bodyfile="src/ai/ai_force.cpp" bodystart="300" bodyend="314"/>
    <listofallmembers>
      <member refid="classAiForceCounter_1ab13400df049513078d2a7407ee14ab74" prot="public" virt="non-virtual"><scope>AiForceCounter</scope><name>AiForceCounter</name></member>
      <member refid="classAiForceCounter_1a82fc32d82dfc6770abc575a59ede9a3b" prot="private" virt="non-virtual"><scope>AiForceCounter</scope><name>data</name></member>
      <member refid="classAiForceCounter_1a03a0a1bc839765d9cc002506b2bc0e92" prot="public" virt="non-virtual"><scope>AiForceCounter</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
