<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="font_8cpp" kind="file" language="C++">
    <compoundname>font.cpp</compoundname>
    <includes refid="stratagus_8h" local="yes">stratagus.h</includes>
    <includes local="yes">font.h</includes>
    <includes refid="intern__video_8h" local="yes">intern_video.h</includes>
    <includes refid="video_8h" local="yes">video.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">map</includes>
    <incdepgraph>
      <node id="28">
        <label>list</label>
      </node>
      <node id="10">
        <label>intern_video.h</label>
        <link refid="intern__video_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>guichan/widgets/label.h</label>
        <link refid="label_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>video.h</label>
        <link refid="video_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>guichan/widgets/textfield.h</label>
        <link refid="textfield_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>guichan/widgets/textbox.h</label>
        <link refid="textbox_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>guichan/font.h</label>
        <link refid="guichan_2include_2guichan_2font_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>SDL.h</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="4">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>guichan/exception.h</label>
        <link refid="exception_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>font.h</label>
      </node>
      <node id="57">
        <label>stdint.h</label>
      </node>
      <node id="45">
        <label>guichan/widgets/dropdown.h</label>
        <link refid="dropdown_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>guichan/widgets/window.h</label>
        <link refid="window_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="48">
        <label>guichan/widgets/icon.h</label>
        <link refid="icon_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>guichan/imagefont.h</label>
        <link refid="imagefont_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>guichan/platform.h</label>
        <link refid="platform_8h"/>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="39">
        <label>map</label>
      </node>
      <node id="1">
        <label>src/video/font.cpp</label>
        <link refid="font_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>guichan/defaultfont.h</label>
        <link refid="defaultfont_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>guichan.h</label>
        <link refid="guichan_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>guichan/widgets/scrollarea.h</label>
        <link refid="scrollarea_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>guichan/rectangle.h</label>
        <link refid="rectangle_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>guichan/imageloader.h</label>
        <link refid="imageloader_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>guichan/mouseinput.h</label>
        <link refid="mouseinput_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>guichan/mouselistener.h</label>
        <link refid="mouselistener_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>libmng.h</label>
      </node>
      <node id="42">
        <label>guichan/widgets/checkbox.h</label>
        <link refid="checkbox_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>guichan/listmodel.h</label>
        <link refid="listmodel_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
      <node id="20">
        <label>guichan/cliprectangle.h</label>
        <link refid="cliprectangle_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>guichan/graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>ctime</label>
      </node>
      <node id="26">
        <label>guichan/focushandler.h</label>
        <link refid="focushandler_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>guichan/key.h</label>
        <link refid="key_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>guichan/input.h</label>
        <link refid="input_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>guichan/color.h</label>
        <link refid="guichan_2include_2guichan_2color_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>stack</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="44">
        <label>guichan/basiccontainer.h</label>
        <link refid="basiccontainer_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>guichan/gui.h</label>
        <link refid="gui_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stratagus.h</label>
        <link refid="stratagus_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>guichan/widgets/slider.h</label>
        <link refid="slider_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>color.h</label>
        <link refid="include_2color_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>guichan/keyinput.h</label>
        <link refid="keyinput_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>guichan/widgets/radiobutton.h</label>
        <link refid="radiobutton_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstdlib</label>
      </node>
      <node id="14">
        <label>shaders.h</label>
        <link refid="shaders_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>guichan/image.h</label>
        <link refid="image_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>guichan/widgets/button.h</label>
        <link refid="button_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>vec2i.h</label>
        <link refid="vec2i_8h"/>
      </node>
      <node id="33">
        <label>guichan/keylistener.h</label>
        <link refid="keylistener_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>guichan/widgets/container.h</label>
        <link refid="container_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>guichan/widget.h</label>
        <link refid="widget_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>guichan/widgets/listbox.h</label>
        <link refid="listbox_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>guichan/actionlistener.h</label>
        <link refid="actionlistener_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <header>font.cpp - The color fonts.</header>
      <memberdef kind="typedef" id="font_8cpp_1a857a18ba0c1763452ff7bc2f584776d9" prot="public" static="no">
        <type>std::map&lt; std::string, <ref refid="classCFont" kindref="compound">CFont</ref> * &gt;</type>
        <definition>typedef std::map&lt;std::string, CFont *&gt; FontMap</definition>
        <argsstring></argsstring>
        <name>FontMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="50" column="18" bodyfile="src/video/font.cpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="font_8cpp_1ad26f8577091f8c4bea64a7ceaa03c9ed" prot="public" static="no">
        <type>std::map&lt; std::string, <ref refid="classCFontColor" kindref="compound">CFontColor</ref> * &gt;</type>
        <definition>typedef std::map&lt;std::string, CFontColor *&gt; FontColorMap</definition>
        <argsstring></argsstring>
        <name>FontColorMap</name>
        <briefdescription>
<para>Font mappings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="53" column="18" bodyfile="src/video/font.cpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="font_8cpp_1aacf72c740a62b6c0a55767bcdccec71a" prot="public" static="no">
        <type>std::map&lt; const <ref refid="classCFontColor" kindref="compound">CFontColor</ref> *, <ref refid="classCGraphic" kindref="compound">CGraphic</ref> * &gt;</type>
        <definition>typedef std::map&lt;const CFontColor *, CGraphic *&gt; FontColorGraphicMap</definition>
        <argsstring></argsstring>
        <name>FontColorGraphicMap</name>
        <briefdescription>
<para>Default reverse color index. </para>
        </briefdescription>
        <detaileddescription>
<para>Font color graphics Usage: FontColorGraphics[<ref refid="classCFont" kindref="compound">CFont</ref> *font][<ref refid="classCFontColor" kindref="compound">CFontColor</ref> *color] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="68" column="18" bodyfile="src/video/font.cpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="font_8cpp_1aee04a50dbe69165b8996436034ff5366" prot="public" static="yes" mutable="no">
        <type><ref refid="font_8cpp_1a857a18ba0c1763452ff7bc2f584776d9" kindref="member">FontMap</ref></type>
        <definition>FontMap Fonts</definition>
        <argsstring></argsstring>
        <name>Fonts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="51" column="16" bodyfile="src/video/font.cpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="font_8cpp_1ab636dae852337bf170e37822d09a5705" prot="public" static="yes" mutable="no">
        <type><ref refid="font_8cpp_1ad26f8577091f8c4bea64a7ceaa03c9ed" kindref="member">FontColorMap</ref></type>
        <definition>FontColorMap FontColors</definition>
        <argsstring></argsstring>
        <name>FontColors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="54" column="21" bodyfile="src/video/font.cpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="font_8cpp_1ade502390383f4f8aed0e1e91d1d7bf08" prot="public" static="yes" mutable="no">
        <type><ref refid="classCFontColor" kindref="compound">CFontColor</ref> *</type>
        <definition>CFontColor* FontColor</definition>
        <argsstring></argsstring>
        <name>FontColor</name>
        <briefdescription>
<para>Map of ident to font color. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="56" column="19" bodyfile="src/video/font.cpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="font_8cpp_1a1c8b814da90ff0c8ff50b06ae8cabe2f" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classCFontColor" kindref="compound">CFontColor</ref> *</type>
        <definition>const CFontColor* LastTextColor</definition>
        <argsstring></argsstring>
        <name>LastTextColor</name>
        <briefdescription>
<para>Current font color. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="58" column="25" bodyfile="src/video/font.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="font_8cpp_1a4dff137df4b4f6c22d5eb334d0a7fc8b" prot="public" static="yes" mutable="no">
        <type><ref refid="classCFontColor" kindref="compound">CFontColor</ref> *</type>
        <definition>CFontColor* DefaultTextColor</definition>
        <argsstring></argsstring>
        <name>DefaultTextColor</name>
        <briefdescription>
<para>Last text color. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="59" column="19" bodyfile="src/video/font.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="font_8cpp_1a238f401f657bf6eb5caa8c3aec55f8c9" prot="public" static="yes" mutable="no">
        <type><ref refid="classCFontColor" kindref="compound">CFontColor</ref> *</type>
        <definition>CFontColor* ReverseTextColor</definition>
        <argsstring></argsstring>
        <name>ReverseTextColor</name>
        <briefdescription>
<para>Default text color. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="60" column="19" bodyfile="src/video/font.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="font_8cpp_1a66b11470cd633712d6f3a1358c705380" prot="public" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string DefaultNormalColorIndex</definition>
        <argsstring></argsstring>
        <name>DefaultNormalColorIndex</name>
        <briefdescription>
<para>Reverse text color. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="61" column="20" bodyfile="src/video/font.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="font_8cpp_1a2cd94b2bbb048a468d98ad13acc98ec1" prot="public" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string DefaultReverseColorIndex</definition>
        <argsstring></argsstring>
        <name>DefaultReverseColorIndex</name>
        <briefdescription>
<para>Default normal color index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="62" column="20" bodyfile="src/video/font.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="font_8cpp_1a29fc5499609451bf5d2517de4c4ab6b9" prot="public" static="yes" mutable="no">
        <type>std::map&lt; const <ref refid="classCFont" kindref="compound">CFont</ref> *, <ref refid="font_8cpp_1aacf72c740a62b6c0a55767bcdccec71a" kindref="member">FontColorGraphicMap</ref> &gt;</type>
        <definition>std::map&lt;const CFont *, FontColorGraphicMap&gt; FontColorGraphics</definition>
        <argsstring></argsstring>
        <name>FontColorGraphics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="69" column="17" bodyfile="src/video/font.cpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="font_8cpp_1a3a1412c320eee1e5739a5b1aa25158c1" prot="public" static="yes" mutable="no">
        <type><ref refid="classCFont" kindref="compound">CFont</ref> *</type>
        <definition>CFont* SmallFont</definition>
        <argsstring></argsstring>
        <name>SmallFont</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="72" column="14" bodyfile="src/video/font.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="font_8cpp_1a1c55c2ec0b14a0287c4aede92b2e8e25" prot="public" static="yes" mutable="no">
        <type><ref refid="classCFont" kindref="compound">CFont</ref> *</type>
        <definition>CFont* GameFont</definition>
        <argsstring></argsstring>
        <name>GameFont</name>
        <briefdescription>
<para>Small font used in stats. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="73" column="14" bodyfile="src/video/font.cpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1a4a19be5c0eb8d692b3ce717d0c29dad5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int FormatNumber</definition>
        <argsstring>(int number, char *buf)</argsstring>
        <name>FormatNumber</name>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Normal font used in game. </para>
        </briefdescription>
        <detaileddescription>
<para>Format a number using commas</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to be formatted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to save the formatted number to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The real length of the Formated Number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="682" column="12" bodyfile="src/video/font.cpp" bodystart="682" bodyend="698" declfile="src/video/font.cpp" declline="75" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1a9c8f2249309b0b04ce2e2c5d3096aa7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCFont" kindref="compound">CFont</ref> &amp;</type>
        <definition>CFont&amp; GetSmallFont</definition>
        <argsstring>()</argsstring>
        <name>GetSmallFont</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Font selector for the font functions. FIXME: should be moved to lua </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="78" column="7" bodyfile="src/video/font.cpp" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1ace32afb03c93199e4ddfaefdccee886b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsGameFontReady</definition>
        <argsstring>()</argsstring>
        <name>IsGameFontReady</name>
        <briefdescription>
<para>Normal font used in game. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="87" column="6" bodyfile="src/video/font.cpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1a9ea88411556e3012f56ce747f8ed1089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCFont" kindref="compound">CFont</ref> &amp;</type>
        <definition>CFont&amp; GetGameFont</definition>
        <argsstring>()</argsstring>
        <name>GetGameFont</name>
        <briefdescription>
<para>Small font used in stats. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="92" column="7" bodyfile="src/video/font.cpp" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1a34315fe423ab45d9c8d1eba900c85397" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>static void VideoDrawChar</definition>
        <argsstring>(const CGraphic &amp;g, int gx, int gy, int w, int h, int x, int y, const CFontColor &amp;fc)</argsstring>
        <name>VideoDrawChar</name>
        <param>
          <type>const <ref refid="classCGraphic" kindref="compound">CGraphic</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classCFontColor" kindref="compound">CFontColor</ref> &amp;</type>
          <declname>fc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw character with current color.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gx</parametername>
</parameternamelist>
<parameterdescription>
<para>X offset into object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gy</parametername>
</parameternamelist>
<parameterdescription>
<para>Y offset into object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>width to display </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>height to display </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X screen position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y screen position </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="138" column="13" bodyfile="src/video/font.cpp" bodystart="138" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1a457d4ec96d92b4d1d8c8eefe6900c85c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SetDefaultTextColors</definition>
        <argsstring>(const std::string &amp;normal, const std::string &amp;reverse)</argsstring>
        <name>SetDefaultTextColors</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
<para>true when GameFont is provided </para>
        </briefdescription>
        <detaileddescription>
<para>Set the default text colors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>normal</parametername>
</parameternamelist>
<parameterdescription>
<para>Normal text color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Reverse text color. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="154" column="6" bodyfile="src/video/font.cpp" bodystart="154" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1adabe0ecb3e31de822b4aba50ebaf888f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void GetDefaultTextColors</definition>
        <argsstring>(std::string &amp;normalp, std::string &amp;reversep)</argsstring>
        <name>GetDefaultTextColors</name>
        <param>
          <type>std::string &amp;</type>
          <declname>normalp</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>reversep</declname>
        </param>
        <briefdescription>
<para>Get the default text colors for normal and reverse text. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the default text colors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>normalp</parametername>
</parameternamelist>
<parameterdescription>
<para>Normal text color pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reversep</parametername>
</parameternamelist>
<parameterdescription>
<para>Reverse text color pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="168" column="6" bodyfile="src/video/font.cpp" bodystart="168" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1a3d617ea14f90fd5b3e2c07bda447bd5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool GetUTF8</definition>
        <argsstring>(const std::string &amp;text, size_t &amp;pos, int &amp;utf8)</argsstring>
        <name>GetUTF8</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>utf8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the next utf8 character from a string </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="177" column="13" bodyfile="src/video/font.cpp" bodystart="177" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1ac4b08d6da4258efcc967f14233a07cf4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool GetUTF8</definition>
        <argsstring>(const char text[], const size_t len, size_t &amp;pos, int &amp;utf8)</argsstring>
        <name>GetUTF8</name>
        <param>
          <type>const char</type>
          <declname>text</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>utf8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the next utf8 character from an array of chars </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="228" column="13" bodyfile="src/video/font.cpp" bodystart="228" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1af2bb9f84b19e5a95d3a86610a3ea13da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int convertKey</definition>
        <argsstring>(const char *key)</argsstring>
        <name>convertKey</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="383" column="12" bodyfile="src/guichan/widget.cpp" bodystart="71" bodyend="78" declfile="src/video/font.cpp" declline="383" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1af806c44daa4964580ad64fc4b2d32318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetHotKey</definition>
        <argsstring>(const std::string &amp;text)</argsstring>
        <name>GetHotKey</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Get the hot key from a string. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the hot key from a string </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="388" column="5" bodyfile="src/video/font.cpp" bodystart="388" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1a4f4b35b9dd558474325c454b4bd2611d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>static void VideoDrawCharClip</definition>
        <argsstring>(const CGraphic &amp;g, int gx, int gy, int w, int h, int x, int y, const CFontColor &amp;fc)</argsstring>
        <name>VideoDrawCharClip</name>
        <param>
          <type>const <ref refid="classCGraphic" kindref="compound">CGraphic</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classCFontColor" kindref="compound">CFontColor</ref> &amp;</type>
          <declname>fc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw character with current color clipped into 8 bit framebuffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gx</parametername>
</parameternamelist>
<parameterdescription>
<para>X offset into object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gy</parametername>
</parameternamelist>
<parameterdescription>
<para>Y offset into object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>width to display </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>height to display </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X screen position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y screen position </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="421" column="13" bodyfile="src/video/font.cpp" bodystart="421" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1afea3a6fc04539aa665c1f6838fc7a45d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int strchrlen</definition>
        <argsstring>(const std::string &amp;s, char c, unsigned int maxlen, const CFont *font)</argsstring>
        <name>strchrlen</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxlen</declname>
        </param>
        <param>
          <type>const <ref refid="classCFont" kindref="compound">CFont</ref> *</type>
          <declname>font</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the index of first occurrence of c in [s- s + maxlen]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>original string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>character to find. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>size limit of the search. (0 means unlimited). (in char if font == NULL else in pixels). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>if specified use font-&gt;Width() instead of strlen.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>computed value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="710" column="12" bodyfile="src/video/font.cpp" bodystart="710" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1a82d8ae3cc6a815a9fb6d736962f113d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GetLineFont</definition>
        <argsstring>(unsigned int line, const std::string &amp;s, unsigned int maxlen, const CFont *font)</argsstring>
        <name>GetLineFont</name>
        <param>
          <type>unsigned int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxlen</declname>
        </param>
        <param>
          <type>const <ref refid="classCFont" kindref="compound">CFont</ref> *</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Return the &apos;line&apos; line of the string &apos;s&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the &apos;line&apos; line of the string &apos;s&apos;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>line number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>multiline string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>max length of the string (0 : unlimited) (in char if font == NULL else in pixels). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>if specified use font-&gt;Width() instead of strlen.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>computed value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="754" column="13" bodyfile="src/video/font.cpp" bodystart="754" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1a4ae352d369f170e4cc09acf16c6dfcb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void LoadFonts</definition>
        <argsstring>()</argsstring>
        <name>LoadFonts</name>
        <briefdescription>
<para>Load and initialize the fonts. </para>
        </briefdescription>
        <detaileddescription>
<para>Load all fonts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="838" column="6" bodyfile="src/video/font.cpp" bodystart="838" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1a1d6c4719482ed9e33477a25e109829e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void ReloadFonts</definition>
        <argsstring>()</argsstring>
        <name>ReloadFonts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reload fonts </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="867" column="6" bodyfile="src/video/font.cpp" bodystart="867" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="font_8cpp_1ab59fa10e7064a523e106b8e5e92ac866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CleanFonts</definition>
        <argsstring>()</argsstring>
        <name>CleanFonts</name>
        <briefdescription>
<para>Cleanup the font module. </para>
        </briefdescription>
        <detaileddescription>
<para>Clean up the font module. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/video/font.cpp" line="969" column="6" bodyfile="src/video/font.cpp" bodystart="969" bodyend="986"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/video/font.cpp"/>
  </compounddef>
</doxygen>
