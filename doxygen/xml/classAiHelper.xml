<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classAiHelper" kind="class" language="C++" prot="public">
    <compoundname>AiHelper</compoundname>
    <includes refid="ai__local_8h" local="no">ai_local.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classAiHelper_1ae9327eba3ce578d5f99c2cec261351d3" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classCUnitType" kindref="compound">CUnitType</ref> * &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;CUnitType *&gt; &gt; AiHelper::Train</definition>
        <argsstring></argsstring>
        <name>Train</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The index is the unit that should be trained, giving a table of all units/buildings which could train this unit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_local.h" line="335" column="13" bodyfile="src/ai/ai_local.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classAiHelper_1acadf3eb9e47b02c1ea0f72b0cc9618d6" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classCUnitType" kindref="compound">CUnitType</ref> * &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;CUnitType *&gt; &gt; AiHelper::Build</definition>
        <argsstring></argsstring>
        <name>Build</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The index is the unit that should be build, giving a table of all units/buildings which could build this unit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_local.h" line="340" column="13" bodyfile="src/ai/ai_local.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classAiHelper_1a62e373f33e7e1c5b612e8d1d120281ec" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classCUnitType" kindref="compound">CUnitType</ref> * &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;CUnitType *&gt; &gt; AiHelper::Upgrade</definition>
        <argsstring></argsstring>
        <name>Upgrade</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The index is the upgrade that should be made, giving a table of all units/buildings which could do the upgrade. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_local.h" line="345" column="13" bodyfile="src/ai/ai_local.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classAiHelper_1a407f3031e66ef22c9cba204d4042b60b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classCUnitType" kindref="compound">CUnitType</ref> * &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;CUnitType *&gt; &gt; AiHelper::Research</definition>
        <argsstring></argsstring>
        <name>Research</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The index is the research that should be made, giving a table of all units/buildings which could research this upgrade. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_local.h" line="350" column="13" bodyfile="src/ai/ai_local.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classAiHelper_1a90d1bf55e2a5a46f39c600644fae9c2b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classCUnitType" kindref="compound">CUnitType</ref> * &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;CUnitType *&gt; &gt; AiHelper::Repair</definition>
        <argsstring></argsstring>
        <name>Repair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The index is the unit that should be repaired, giving a table of all units/buildings which could repair this unit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_local.h" line="355" column="13" bodyfile="src/ai/ai_local.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classAiHelper_1a970438f20cbf3e753be2fb84e2a6b789" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classCUnitType" kindref="compound">CUnitType</ref> * &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;CUnitType *&gt; &gt; AiHelper::UnitLimit</definition>
        <argsstring></argsstring>
        <name>UnitLimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The index is the unit-limit that should be solved, giving a table of all units/buildings which could reduce this unit-limit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_local.h" line="360" column="13" bodyfile="src/ai/ai_local.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classAiHelper_1a8abf7799eda8e3ad7c998c6c21844d83" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classCUnitType" kindref="compound">CUnitType</ref> * &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;CUnitType *&gt; &gt; AiHelper::Equiv</definition>
        <argsstring></argsstring>
        <name>Equiv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The index is the unit that should be made, giving a table of all units/buildings which are equivalent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_local.h" line="365" column="13" bodyfile="src/ai/ai_local.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classAiHelper_1ae2d698391da5228611bd7a93b7131913" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classCUnitType" kindref="compound">CUnitType</ref> * &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;CUnitType *&gt; &gt; AiHelper::Refinery</definition>
        <argsstring></argsstring>
        <name>Refinery</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The index is the resource id - 1 (we can&apos;t mine TIME), giving a table of all units/buildings/mines which can harvest this resource. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_local.h" line="371" column="13" bodyfile="src/ai/ai_local.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classAiHelper_1ab589b0aae5c5754b85c607d32fe723b0" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classCUnitType" kindref="compound">CUnitType</ref> * &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;CUnitType *&gt; &gt; AiHelper::Depots</definition>
        <argsstring></argsstring>
        <name>Depots</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The index is the resource id - 1 (we can&apos;t store TIME), giving a table of all units/buildings/mines which can store this resource. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_local.h" line="377" column="13" bodyfile="src/ai/ai_local.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>AI Helper.</para>
<para>Contains information needed for the AI. If the AI needs an unit or building or upgrade or spell, it could lookup in this tables to find where it could be trained, built or researched. </para>
    </detaileddescription>
    <location file="src/ai/ai_local.h" line="329" column="1" bodyfile="src/ai/ai_local.h" bodystart="328" bodyend="378"/>
    <listofallmembers>
      <member refid="classAiHelper_1acadf3eb9e47b02c1ea0f72b0cc9618d6" prot="public" virt="non-virtual"><scope>AiHelper</scope><name>Build</name></member>
      <member refid="classAiHelper_1ab589b0aae5c5754b85c607d32fe723b0" prot="public" virt="non-virtual"><scope>AiHelper</scope><name>Depots</name></member>
      <member refid="classAiHelper_1a8abf7799eda8e3ad7c998c6c21844d83" prot="public" virt="non-virtual"><scope>AiHelper</scope><name>Equiv</name></member>
      <member refid="classAiHelper_1ae2d698391da5228611bd7a93b7131913" prot="public" virt="non-virtual"><scope>AiHelper</scope><name>Refinery</name></member>
      <member refid="classAiHelper_1a90d1bf55e2a5a46f39c600644fae9c2b" prot="public" virt="non-virtual"><scope>AiHelper</scope><name>Repair</name></member>
      <member refid="classAiHelper_1a407f3031e66ef22c9cba204d4042b60b" prot="public" virt="non-virtual"><scope>AiHelper</scope><name>Research</name></member>
      <member refid="classAiHelper_1ae9327eba3ce578d5f99c2cec261351d3" prot="public" virt="non-virtual"><scope>AiHelper</scope><name>Train</name></member>
      <member refid="classAiHelper_1a970438f20cbf3e753be2fb84e2a6b789" prot="public" virt="non-virtual"><scope>AiHelper</scope><name>UnitLimit</name></member>
      <member refid="classAiHelper_1a62e373f33e7e1c5b612e8d1d120281ec" prot="public" virt="non-virtual"><scope>AiHelper</scope><name>Upgrade</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
