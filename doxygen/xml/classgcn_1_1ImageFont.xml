<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgcn_1_1ImageFont" kind="class" language="C++" prot="public">
    <compoundname>gcn::ImageFont</compoundname>
    <basecompoundref refid="classgcn_1_1Font" prot="public" virt="non-virtual">gcn::Font</basecompoundref>
    <includes refid="imagefont_8h" local="no">imagefont.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgcn_1_1ImageFont_1abba14f56fa98e464b7a839e432d3c02b" prot="protected" static="no" mutable="no">
        <type><ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref></type>
        <definition>Rectangle gcn::ImageFont::mGlyph[256]</definition>
        <argsstring>[256]</argsstring>
        <name>mGlyph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="197" column="19" bodyfile="src/guichan/include/guichan/imagefont.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1ImageFont_1ad3d7d7cf93af238d8937b23034061e61" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int gcn::ImageFont::mHeight</definition>
        <argsstring></argsstring>
        <name>mHeight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="198" column="13" bodyfile="src/guichan/include/guichan/imagefont.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1ImageFont_1afb4b350fd417e7dba6ce8f8c14a3b105" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int gcn::ImageFont::mGlyphSpacing</definition>
        <argsstring></argsstring>
        <name>mGlyphSpacing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="199" column="13" bodyfile="src/guichan/include/guichan/imagefont.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1ImageFont_1ab0a6729c8ff035e2755a3215cadfec74" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int gcn::ImageFont::mRowSpacing</definition>
        <argsstring></argsstring>
        <name>mRowSpacing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="200" column="13" bodyfile="src/guichan/include/guichan/imagefont.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1ImageFont_1a13409336f029a03e4a5ffe7634854ce3" prot="protected" static="no" mutable="no">
        <type><ref refid="classgcn_1_1Image" kindref="compound">Image</ref> *</type>
        <definition>Image* gcn::ImageFont::mImage</definition>
        <argsstring></argsstring>
        <name>mImage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="201" column="15" bodyfile="src/guichan/include/guichan/imagefont.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1ImageFont_1ac5ed59920e10fe0d137e365baaf7c568" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string gcn::ImageFont::mFilename</definition>
        <argsstring></argsstring>
        <name>mFilename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="202" column="21" bodyfile="src/guichan/include/guichan/imagefont.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgcn_1_1ImageFont_1a43a623be5f18290c0ba8d6ce886d74b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gcn::ImageFont::ImageFont</definition>
        <argsstring>(const std::string &amp;filename, const std::string &amp;glyphs)</argsstring>
        <name>ImageFont</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>glyphs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor which takes an image file containing the font and a string containing the glyphs. The glyphs in the string should be in the same order as they appear in the font image.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>glyphs</parametername>
</parameternamelist>
<parameterdescription>
<para>the glyphs found in the image. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgcn_1_1Exception" kindref="compound">Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when glyph list is incorrect or the font file is corrupt or if no <ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> exists. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="106" column="9" bodyfile="src/guichan/imagefont.cpp" bodystart="67" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageFont_1a663a7535d33714c4dac20518e41a3653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gcn::ImageFont::ImageFont</definition>
        <argsstring>(const std::string &amp;filename, unsigned char glyphsFrom=32, unsigned char glyphsTo=126)</argsstring>
        <name>ImageFont</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>glyphsFrom</declname>
          <defval>32</defval>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>glyphsTo</declname>
          <defval>126</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor which takes an image file containing the font and two boundaries of ASCII values. The font image should include all glyphs specified with the boundaries in increasing ASCII order. The boundaries are inclusive.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>glyphsFrom</parametername>
</parameternamelist>
<parameterdescription>
<para>the ASCII value of the first glyph found in the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>glyphsTo</parametername>
</parameternamelist>
<parameterdescription>
<para>the ASCII value of the last glyph found in the image. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgcn_1_1Exception" kindref="compound">Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when glyph bondaries are incorrect or the font file is corrupt or if no <ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> exists. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="122" column="9" bodyfile="src/guichan/imagefont.cpp" bodystart="120" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageFont_1aa65f1677811e42ecdc747a4196806ea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>gcn::ImageFont::~ImageFont</definition>
        <argsstring>()</argsstring>
        <name>~ImageFont</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="127" column="17" bodyfile="src/guichan/imagefont.cpp" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageFont_1ab7c08a441ed8046320c600d7eee77bde" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int gcn::ImageFont::drawGlyph</definition>
        <argsstring>(Graphics *graphics, unsigned char glyph, int x, int y)</argsstring>
        <name>drawGlyph</name>
        <param>
          <type><ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> *</type>
          <declname>graphics</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>glyph</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a glyph.</para>
<para>NOTE: You normally won&apos;t use this function to draw text since the <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> class contains better functions for drawing text.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics</parametername>
</parameternamelist>
<parameterdescription>
<para>a graphics object to be used for drawing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>glyph</parametername>
</parameternamelist>
<parameterdescription>
<para>a glyph to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate where to draw the glyph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate where to draw the glyph. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the width of the glyph in pixels. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="143" column="21" bodyfile="src/guichan/imagefont.cpp" bodystart="192" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageFont_1a6fce0fdaa92f10d9e198311e18e1cea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::ImageFont::setRowSpacing</definition>
        <argsstring>(int spacing)</argsstring>
        <name>setRowSpacing</name>
        <param>
          <type>int</type>
          <declname>spacing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the spacing between rows in pixels. Default is 0 pixels. The spacing can be negative.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spacing</parametername>
</parameternamelist>
<parameterdescription>
<para>the spacing in pixels. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="151" column="22" bodyfile="src/guichan/imagefont.cpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageFont_1abd478dc1dc02a683775a465f21a56cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int gcn::ImageFont::getRowSpacing</definition>
        <argsstring>()</argsstring>
        <name>getRowSpacing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the spacing between rows in pixels.</para>
<para><simplesect kind="return"><para>the spacing. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="158" column="21" bodyfile="src/guichan/imagefont.cpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageFont_1aca8cc062c7b9d232dec6d994a726958e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::ImageFont::setGlyphSpacing</definition>
        <argsstring>(int spacing)</argsstring>
        <name>setGlyphSpacing</name>
        <param>
          <type>int</type>
          <declname>spacing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the spacing between letters in pixels. Default is 0 pixels. The spacing can be negative.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spacing</parametername>
</parameternamelist>
<parameterdescription>
<para>the spacing in pixels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="166" column="22" bodyfile="src/guichan/imagefont.cpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageFont_1a3e8595cfdf106632bbc3b55b026d47a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int gcn::ImageFont::getGlyphSpacing</definition>
        <argsstring>()</argsstring>
        <name>getGlyphSpacing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the spacing between letters in pixels.</para>
<para><simplesect kind="return"><para>the spacing. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="173" column="21" bodyfile="src/guichan/imagefont.cpp" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageFont_1aa79c3fdb8e311fa8c3dbc3f4b1d4a86c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int gcn::ImageFont::getWidth</definition>
        <argsstring>(unsigned char glyph) const</argsstring>
        <name>getWidth</name>
        <param>
          <type>unsigned char</type>
          <declname>glyph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a width of a glyph.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>glyph</parametername>
</parameternamelist>
<parameterdescription>
<para>the glyph which width will be returned </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the width of a glyph </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="181" column="21" bodyfile="src/guichan/imagefont.cpp" bodystart="177" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageFont_1a5fe7b1ccce9cad41f05dab418c5d4464" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int gcn::ImageFont::getWidth</definition>
        <argsstring>(const std::string &amp;text) const</argsstring>
        <name>getWidth</name>
        <reimplements refid="classgcn_1_1Font_1abb88894b1ebeda28edcac75c537f8e0f">getWidth</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the width of a string. The width of a string is not necesserily the sum of all the widths of it&apos;s glyphs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to return the width of. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the width of a string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="186" column="21" bodyfile="src/guichan/imagefont.cpp" bodystart="303" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageFont_1acad2ea859f5efeb41a2bfb79abb13c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::ImageFont::drawString</definition>
        <argsstring>(Graphics *graphics, const std::string &amp;text, int x, int y, bool is_normal=true)</argsstring>
        <name>drawString</name>
        <reimplements refid="classgcn_1_1Font_1af26545b835fa5afd4f20d6a6bbab29b5">drawString</reimplements>
        <param>
          <type><ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> *</type>
          <declname>graphics</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_normal</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a string.</para>
<para>NOTE: You normally won&apos;t use this function to draw text since <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> contains better functions for drawing text.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object to use for drawing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate where to draw the string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate where to draw the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="188" column="22" bodyfile="src/guichan/imagefont.cpp" bodystart="211" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageFont_1a10e2558a87f2520c7dbff9ea3d04169f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int gcn::ImageFont::getHeight</definition>
        <argsstring>() const</argsstring>
        <name>getHeight</name>
        <reimplements refid="classgcn_1_1Font_1aa270d8934a16d4065143e3617b1fa926">getHeight</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the height of the glyphs in the font.</para>
<para><simplesect kind="return"><para>the height of the glyphs int the font. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="190" column="21" bodyfile="src/guichan/imagefont.cpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1ImageFont_1a5b0e7a7a7acdcb9fadb232f63608b354" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int gcn::ImageFont::getStringIndexAt</definition>
        <argsstring>(const std::string &amp;text, int x)</argsstring>
        <name>getStringIndexAt</name>
        <reimplements refid="classgcn_1_1Font_1a3210f4c53424ade4b188b8dfb1f686a4">getStringIndexAt</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a string index in a string providing an x coordinate. Used to retrive a string index (for a character in a string) at a certain x position. It is especially useful when a mouse clicks in a <ref refid="classgcn_1_1TextField" kindref="compound">TextField</ref> and you want to know which character was clicked.</para>
<para><simplesect kind="return"><para>a string index in a string providing an x coordinate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="192" column="21" bodyfile="src/guichan/imagefont.cpp" bodystart="316" bodyend="332"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classgcn_1_1ImageFont_1a05f3206435b4b746206ba5f8dc6748ca" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::ImageFont::addGlyph</definition>
        <argsstring>(unsigned char c, int &amp;x, int &amp;y, const Color &amp;separator)</argsstring>
        <name>addGlyph</name>
        <param>
          <type>unsigned char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classgcn_1_1Color" kindref="compound">Color</ref> &amp;</type>
          <declname>separator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/imagefont.h" line="195" column="14" bodyfile="src/guichan/imagefont.cpp" bodystart="242" bodyend="301"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>   A font using an image containing the font data. It implements the font
   class. You can use any filetype for the font data as long as it can be
   loaded with your ImageLoader.

   This are two examples of an image containing a font.
    \image html imagefontexample.bmp
    \image html imagefontexample2.bmp

   The Image font format works like this: The first pixel, the pixal at
   coordinate (0,0), tells which color to look for when seperating glyphs.
   You create an image with your glyphs and simple separates them with
   the seperation color. When you create your ImageFont you supply the
   constructor with the glyphs present in your image. When creating an
   ImageFont for the image data in the first example above, the following
   constructor call would be used.
   @code gcn::ImageFont imageFont(&quot;fixedfont_big.bmp&quot;,&quot; abcdefghijklmno\
</verbatim> pqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");  Noteworthy is that the first glyph actually gives the width of space. Glyphs can, as seen in the second example above, be seperated with horizontal lines making it possible to draw glyphs on more then one line in the image. However, these vertical lines must be of one pixel size! </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>gcn::ImageFont</label>
        <link refid="classgcn_1_1ImageFont"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>gcn::Font</label>
        <link refid="classgcn_1_1Font"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>string</label>
      </node>
      <node id="1">
        <label>gcn::ImageFont</label>
        <link refid="classgcn_1_1ImageFont"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mImage</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mFilename</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mGlyph</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>gcn::ImageLoader</label>
        <link refid="classgcn_1_1ImageLoader"/>
      </node>
      <node id="3">
        <label>gcn::Image</label>
        <link refid="classgcn_1_1Image"/>
        <childnode refid="4" relation="usage">
          <edgelabel>mImageLoader</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>gcn::Rectangle</label>
        <link refid="classgcn_1_1Rectangle"/>
      </node>
      <node id="2">
        <label>gcn::Font</label>
        <link refid="classgcn_1_1Font"/>
      </node>
    </collaborationgraph>
    <location file="src/guichan/include/guichan/imagefont.h" line="93" column="1" bodyfile="src/guichan/include/guichan/imagefont.h" bodystart="92" bodyend="203"/>
    <listofallmembers>
      <member refid="classgcn_1_1ImageFont_1a05f3206435b4b746206ba5f8dc6748ca" prot="protected" virt="non-virtual"><scope>gcn::ImageFont</scope><name>addGlyph</name></member>
      <member refid="classgcn_1_1ImageFont_1ab7c08a441ed8046320c600d7eee77bde" prot="public" virt="virtual"><scope>gcn::ImageFont</scope><name>drawGlyph</name></member>
      <member refid="classgcn_1_1ImageFont_1acad2ea859f5efeb41a2bfb79abb13c18" prot="public" virt="virtual"><scope>gcn::ImageFont</scope><name>drawString</name></member>
      <member refid="classgcn_1_1ImageFont_1a3e8595cfdf106632bbc3b55b026d47a5" prot="public" virt="virtual"><scope>gcn::ImageFont</scope><name>getGlyphSpacing</name></member>
      <member refid="classgcn_1_1ImageFont_1a10e2558a87f2520c7dbff9ea3d04169f" prot="public" virt="virtual"><scope>gcn::ImageFont</scope><name>getHeight</name></member>
      <member refid="classgcn_1_1ImageFont_1abd478dc1dc02a683775a465f21a56cfc" prot="public" virt="virtual"><scope>gcn::ImageFont</scope><name>getRowSpacing</name></member>
      <member refid="classgcn_1_1ImageFont_1a5b0e7a7a7acdcb9fadb232f63608b354" prot="public" virt="virtual"><scope>gcn::ImageFont</scope><name>getStringIndexAt</name></member>
      <member refid="classgcn_1_1ImageFont_1aa79c3fdb8e311fa8c3dbc3f4b1d4a86c" prot="public" virt="virtual"><scope>gcn::ImageFont</scope><name>getWidth</name></member>
      <member refid="classgcn_1_1ImageFont_1a5fe7b1ccce9cad41f05dab418c5d4464" prot="public" virt="virtual"><scope>gcn::ImageFont</scope><name>getWidth</name></member>
      <member refid="classgcn_1_1ImageFont_1a43a623be5f18290c0ba8d6ce886d74b0" prot="public" virt="non-virtual"><scope>gcn::ImageFont</scope><name>ImageFont</name></member>
      <member refid="classgcn_1_1ImageFont_1a663a7535d33714c4dac20518e41a3653" prot="public" virt="non-virtual"><scope>gcn::ImageFont</scope><name>ImageFont</name></member>
      <member refid="classgcn_1_1ImageFont_1ac5ed59920e10fe0d137e365baaf7c568" prot="protected" virt="non-virtual"><scope>gcn::ImageFont</scope><name>mFilename</name></member>
      <member refid="classgcn_1_1ImageFont_1abba14f56fa98e464b7a839e432d3c02b" prot="protected" virt="non-virtual"><scope>gcn::ImageFont</scope><name>mGlyph</name></member>
      <member refid="classgcn_1_1ImageFont_1afb4b350fd417e7dba6ce8f8c14a3b105" prot="protected" virt="non-virtual"><scope>gcn::ImageFont</scope><name>mGlyphSpacing</name></member>
      <member refid="classgcn_1_1ImageFont_1ad3d7d7cf93af238d8937b23034061e61" prot="protected" virt="non-virtual"><scope>gcn::ImageFont</scope><name>mHeight</name></member>
      <member refid="classgcn_1_1ImageFont_1a13409336f029a03e4a5ffe7634854ce3" prot="protected" virt="non-virtual"><scope>gcn::ImageFont</scope><name>mImage</name></member>
      <member refid="classgcn_1_1ImageFont_1ab0a6729c8ff035e2755a3215cadfec74" prot="protected" virt="non-virtual"><scope>gcn::ImageFont</scope><name>mRowSpacing</name></member>
      <member refid="classgcn_1_1ImageFont_1aca8cc062c7b9d232dec6d994a726958e" prot="public" virt="virtual"><scope>gcn::ImageFont</scope><name>setGlyphSpacing</name></member>
      <member refid="classgcn_1_1ImageFont_1a6fce0fdaa92f10d9e198311e18e1cea3" prot="public" virt="virtual"><scope>gcn::ImageFont</scope><name>setRowSpacing</name></member>
      <member refid="classgcn_1_1Font_1ab3bd1c57c092fe0ad1d027c4076e463d" prot="public" virt="virtual"><scope>gcn::ImageFont</scope><name>~Font</name></member>
      <member refid="classgcn_1_1ImageFont_1aa65f1677811e42ecdc747a4196806ea7" prot="public" virt="virtual"><scope>gcn::ImageFont</scope><name>~ImageFont</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
