<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgcn_1_1Gui" kind="class" language="C++" prot="public">
    <compoundname>gcn::Gui</compoundname>
    <includes refid="gui_8h" local="no">gui.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgcn_1_1Gui_1a23d7cb3158ea0c5adb81ea2b7925d6a2" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gcn::Gui::mTopHasMouse</definition>
        <argsstring></argsstring>
        <name>mTopHasMouse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="184" column="14" bodyfile="src/guichan/include/guichan/gui.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Gui_1a1cb20f54584e46d504fabaeca4937991" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gcn::Gui::mTabbing</definition>
        <argsstring></argsstring>
        <name>mTabbing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="185" column="14" bodyfile="src/guichan/include/guichan/gui.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Gui_1a604a47aac29b2b2d102fb9adf33046dd" prot="protected" static="no" mutable="no">
        <type><ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> *</type>
        <definition>Widget* gcn::Gui::mTop</definition>
        <argsstring></argsstring>
        <name>mTop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="187" column="16" bodyfile="src/guichan/include/guichan/gui.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Gui_1abf24a26828a0714cb5b35874f1aeb2aa" prot="protected" static="no" mutable="no">
        <type><ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> *</type>
        <definition>Graphics* gcn::Gui::mGraphics</definition>
        <argsstring></argsstring>
        <name>mGraphics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="188" column="18" bodyfile="src/guichan/include/guichan/gui.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Gui_1a3a5628dce778c217e817b40e552c1dd4" prot="protected" static="no" mutable="no">
        <type><ref refid="classgcn_1_1Input" kindref="compound">Input</ref> *</type>
        <definition>Input* gcn::Gui::mInput</definition>
        <argsstring></argsstring>
        <name>mInput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="189" column="15" bodyfile="src/guichan/include/guichan/gui.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Gui_1a6d52184d92b5fb94c9e431310e822bb9" prot="protected" static="no" mutable="no">
        <type><ref refid="classgcn_1_1FocusHandler" kindref="compound">FocusHandler</ref> *</type>
        <definition>FocusHandler* gcn::Gui::mFocusHandler</definition>
        <argsstring></argsstring>
        <name>mFocusHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="190" column="22" bodyfile="src/guichan/include/guichan/gui.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Gui_1a7b6e5c9651a45bfc5a439fda90d6ac2f" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gcn::Gui::mUseDirtyDrawing</definition>
        <argsstring></argsstring>
        <name>mUseDirtyDrawing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="191" column="6" bodyfile="src/guichan/include/guichan/gui.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgcn_1_1Gui_1ada0ae56b26099a1bbb70fc4bb8d77da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gcn::Gui::Gui</definition>
        <argsstring>()</argsstring>
        <name>Gui</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="90" column="9" bodyfile="src/guichan/gui.cpp" bodystart="66" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1a89c4b4fafd6bc85646f90f6d03826d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>gcn::Gui::~Gui</definition>
        <argsstring>()</argsstring>
        <name>~Gui</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="95" column="17" bodyfile="src/guichan/gui.cpp" bodystart="77" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1a69ce39ec8962ae93f428a01ffec677de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Gui::setTop</definition>
        <argsstring>(Widget *top)</argsstring>
        <name>setTop</name>
        <param>
          <type><ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> *</type>
          <declname>top</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the top <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>the top <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="102" column="22" bodyfile="src/guichan/gui.cpp" bodystart="87" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1ae165a60a9e56c113e712440ce509d6f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> *</type>
        <definition>Widget * gcn::Gui::getTop</definition>
        <argsstring>() const</argsstring>
        <name>getTop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the top <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref>.</para>
<para><simplesect kind="return"><para>the top widget. NULL if no top widget has been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="109" column="24" bodyfile="src/guichan/gui.cpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1af8583f7e03da6cfe63794d05e185e1c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Gui::setGraphics</definition>
        <argsstring>(Graphics *graphics)</argsstring>
        <name>setGraphics</name>
        <param>
          <type><ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> *</type>
          <declname>graphics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object to use for drawing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object to use for drawing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgcn_1_1SDLGraphics" kindref="compound">SDLGraphics</ref>, OpenGLGraphics, AllegroGraphics </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="117" column="22" bodyfile="src/guichan/gui.cpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1a9f44f974ee72ba23187d5f9b25841eff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> *</type>
        <definition>Graphics * gcn::Gui::getGraphics</definition>
        <argsstring>() const</argsstring>
        <name>getGraphics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object used for drawing.</para>
<para><simplesect kind="return"><para>the <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object used for drawing. NULL if no <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object has been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="125" column="26" bodyfile="src/guichan/gui.cpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1a317e8327dc9aee497f2a9ce1033d16c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Gui::setInput</definition>
        <argsstring>(Input *input)</argsstring>
        <name>setInput</name>
        <param>
          <type><ref refid="classgcn_1_1Input" kindref="compound">Input</ref> *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classgcn_1_1Input" kindref="compound">Input</ref> object to use for input handling.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Input" kindref="compound">Input</ref> object to use for input handling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgcn_1_1SDLInput" kindref="compound">SDLInput</ref>, AllegroInput </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="133" column="22" bodyfile="src/guichan/gui.cpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1a0780e3809e71b56ab61569850f710942" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classgcn_1_1Input" kindref="compound">Input</ref> *</type>
        <definition>Input * gcn::Gui::getInput</definition>
        <argsstring>() const</argsstring>
        <name>getInput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the <ref refid="classgcn_1_1Input" kindref="compound">Input</ref> object being used for input handling.</para>
<para><simplesect kind="return"><para>the <ref refid="classgcn_1_1Input" kindref="compound">Input</ref> object used for handling input. NULL if no <ref refid="classgcn_1_1Input" kindref="compound">Input</ref> object has been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="141" column="23" bodyfile="src/guichan/gui.cpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1a66744ebd628213d574bb6a7010781b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Gui::logic</definition>
        <argsstring>()</argsstring>
        <name>logic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs the <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> logic. By calling this function all logic functions down in the <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> heirarchy will be called. What performs in Logic can be just about anything like adjusting a Widgets size or doing some calculations.</para>
<para>NOTE: Logic also deals with user input (Mouse and Keyboard) for Widgets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="152" column="22" bodyfile="src/guichan/gui.cpp" bodystart="127" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1ad231f982fb8182b16ecf11075054f4ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Gui::draw</definition>
        <argsstring>()</argsstring>
        <name>draw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws the <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref>. By calling this funcion all draw functions down in the <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> hierarchy will be called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="158" column="22" bodyfile="src/guichan/gui.cpp" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1aaab4921bf23667157f09c3bbaaa724a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Gui::draw</definition>
        <argsstring>(Widget *top)</argsstring>
        <name>draw</name>
        <param>
          <type><ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> *</type>
          <declname>top</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="159" column="14" bodyfile="src/guichan/gui.cpp" bodystart="246" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1a273aa54779ea4d7b2f58e4a6b5907f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Gui::focusNone</definition>
        <argsstring>()</argsstring>
        <name>focusNone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Focus none of the Widgets in the <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="164" column="22" bodyfile="src/guichan/gui.cpp" bodystart="291" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1a5d2546bd8c6dbe288640163b85e94194" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Gui::setTabbingEnabled</definition>
        <argsstring>(bool tabbing)</argsstring>
        <name>setTabbingEnabled</name>
        <param>
          <type>bool</type>
          <declname>tabbing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Toggles the use of the tab key to focus Widgets. By default, tabbing is enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tabbing</parametername>
</parameternamelist>
<parameterdescription>
<para>set to false if you want to disable tabbing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="172" column="22" bodyfile="src/guichan/gui.cpp" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1aa77a86f825e8d03ea461e58a449b0179" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool gcn::Gui::isTabbingEnabled</definition>
        <argsstring>()</argsstring>
        <name>isTabbingEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if tabbing is enabled.</para>
<para><simplesect kind="return"><para>true if tabbing is enabled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="179" column="22" bodyfile="src/guichan/gui.cpp" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Gui_1a3c411fc56e067defe5fa42d760fc4886" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Gui::setUseDirtyDrawing</definition>
        <argsstring>(bool useDirtyDrawing)</argsstring>
        <name>setUseDirtyDrawing</name>
        <param>
          <type>bool</type>
          <declname>useDirtyDrawing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/gui.h" line="181" column="14" bodyfile="src/guichan/gui.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="index_1Introduction">
<title>Introduction</title>
<para>This documentation is mostly intended as a reference to the API. If you want to get started with Guichan, we suggest you check out the programs in the examples directory of the Guichan release. <linebreak/>
<linebreak/>
This documentation is, and will always be, work in progress. If you find any errors, typos or inconsistencies, or if you feel something needs to be explained in more detail - don&apos;t hesitate to tell us. <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> core class. Contains a special widget called the top widget. If you want to be able to have more then one <ref refid="classgcn_1_1Widget" kindref="compound">Widget</ref> in your <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref>, the top widget should be a <ref refid="classgcn_1_1Container" kindref="compound">Container</ref>.</para>
<para>NOTE: For the <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> to function properly you need to set a <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object to use and an <ref refid="classgcn_1_1Input" kindref="compound">Input</ref> object to use. </para>
</sect1>
    </detaileddescription>
    <collaborationgraph>
      <node id="10">
        <label>gcn::Input</label>
        <link refid="classgcn_1_1Input"/>
      </node>
      <node id="1">
        <label>gcn::Gui</label>
        <link refid="classgcn_1_1Gui"/>
        <childnode refid="2" relation="usage">
          <edgelabel>mTop</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>mInput</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mGraphics</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mFocusHandler</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="11">
        <label>gcn::Graphics</label>
        <link refid="classgcn_1_1Graphics"/>
        <childnode refid="4" relation="usage">
          <edgelabel>mFont</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>gcn::DefaultFont</label>
        <link refid="classgcn_1_1DefaultFont"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>gcn::Rectangle</label>
        <link refid="classgcn_1_1Rectangle"/>
      </node>
      <node id="7">
        <label>gcn::Color</label>
        <link refid="classgcn_1_1Color"/>
      </node>
      <node id="9">
        <label>gcn::FocusHandler</label>
        <link refid="classgcn_1_1FocusHandler"/>
        <childnode refid="2" relation="usage">
          <edgelabel>mDraggedWidget</edgelabel>
          <edgelabel>mToBeDragged</edgelabel>
          <edgelabel>mToBeFocused</edgelabel>
          <edgelabel>mFocusedWidget</edgelabel>
          <edgelabel>mModalFocusedWidget</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>gcn::Widget</label>
        <link refid="classgcn_1_1Widget"/>
        <childnode refid="3" relation="usage">
          <edgelabel>mDefaultFont</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>mCurrentFont</edgelabel>
          <edgelabel>mGlobalFont</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParent</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mEventId</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mBaseColor</edgelabel>
          <edgelabel>mBackgroundColor</edgelabel>
          <edgelabel>mDisabledColor</edgelabel>
          <edgelabel>mForegroundColor</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>mDimension</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mFocusHandler</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>gcn::Font</label>
        <link refid="classgcn_1_1Font"/>
      </node>
      <node id="5">
        <label>gcn::BasicContainer</label>
        <link refid="classgcn_1_1BasicContainer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/guichan/include/guichan/gui.h" line="84" column="1" bodyfile="src/guichan/include/guichan/gui.h" bodystart="83" bodyend="192"/>
    <listofallmembers>
      <member refid="classgcn_1_1Gui_1ad231f982fb8182b16ecf11075054f4ac" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>draw</name></member>
      <member refid="classgcn_1_1Gui_1aaab4921bf23667157f09c3bbaaa724a5" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>draw</name></member>
      <member refid="classgcn_1_1Gui_1a273aa54779ea4d7b2f58e4a6b5907f48" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>focusNone</name></member>
      <member refid="classgcn_1_1Gui_1a9f44f974ee72ba23187d5f9b25841eff" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>getGraphics</name></member>
      <member refid="classgcn_1_1Gui_1a0780e3809e71b56ab61569850f710942" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>getInput</name></member>
      <member refid="classgcn_1_1Gui_1ae165a60a9e56c113e712440ce509d6f3" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>getTop</name></member>
      <member refid="classgcn_1_1Gui_1ada0ae56b26099a1bbb70fc4bb8d77da1" prot="public" virt="non-virtual"><scope>gcn::Gui</scope><name>Gui</name></member>
      <member refid="classgcn_1_1Gui_1aa77a86f825e8d03ea461e58a449b0179" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>isTabbingEnabled</name></member>
      <member refid="classgcn_1_1Gui_1a66744ebd628213d574bb6a7010781b1f" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>logic</name></member>
      <member refid="classgcn_1_1Gui_1a6d52184d92b5fb94c9e431310e822bb9" prot="protected" virt="non-virtual"><scope>gcn::Gui</scope><name>mFocusHandler</name></member>
      <member refid="classgcn_1_1Gui_1abf24a26828a0714cb5b35874f1aeb2aa" prot="protected" virt="non-virtual"><scope>gcn::Gui</scope><name>mGraphics</name></member>
      <member refid="classgcn_1_1Gui_1a3a5628dce778c217e817b40e552c1dd4" prot="protected" virt="non-virtual"><scope>gcn::Gui</scope><name>mInput</name></member>
      <member refid="classgcn_1_1Gui_1a1cb20f54584e46d504fabaeca4937991" prot="protected" virt="non-virtual"><scope>gcn::Gui</scope><name>mTabbing</name></member>
      <member refid="classgcn_1_1Gui_1a604a47aac29b2b2d102fb9adf33046dd" prot="protected" virt="non-virtual"><scope>gcn::Gui</scope><name>mTop</name></member>
      <member refid="classgcn_1_1Gui_1a23d7cb3158ea0c5adb81ea2b7925d6a2" prot="protected" virt="non-virtual"><scope>gcn::Gui</scope><name>mTopHasMouse</name></member>
      <member refid="classgcn_1_1Gui_1a7b6e5c9651a45bfc5a439fda90d6ac2f" prot="protected" virt="non-virtual"><scope>gcn::Gui</scope><name>mUseDirtyDrawing</name></member>
      <member refid="classgcn_1_1Gui_1af8583f7e03da6cfe63794d05e185e1c0" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>setGraphics</name></member>
      <member refid="classgcn_1_1Gui_1a317e8327dc9aee497f2a9ce1033d16c7" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>setInput</name></member>
      <member refid="classgcn_1_1Gui_1a5d2546bd8c6dbe288640163b85e94194" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>setTabbingEnabled</name></member>
      <member refid="classgcn_1_1Gui_1a69ce39ec8962ae93f428a01ffec677de" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>setTop</name></member>
      <member refid="classgcn_1_1Gui_1a3c411fc56e067defe5fa42d760fc4886" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>setUseDirtyDrawing</name></member>
      <member refid="classgcn_1_1Gui_1a89c4b4fafd6bc85646f90f6d03826d48" prot="public" virt="virtual"><scope>gcn::Gui</scope><name>~Gui</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
