<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ai_8h" kind="file" language="C++">
    <compoundname>ai.h</compoundname>
    <includedby refid="action__build_8cpp" local="yes">src/action/action_build.cpp</includedby>
    <includedby refid="action__built_8cpp" local="yes">src/action/action_built.cpp</includedby>
    <includedby refid="action__move_8cpp" local="yes">src/action/action_move.cpp</includedby>
    <includedby refid="action__research_8cpp" local="yes">src/action/action_research.cpp</includedby>
    <includedby refid="action__resource_8cpp" local="yes">src/action/action_resource.cpp</includedby>
    <includedby refid="action__train_8cpp" local="yes">src/action/action_train.cpp</includedby>
    <includedby refid="action__upgradeto_8cpp" local="yes">src/action/action_upgradeto.cpp</includedby>
    <includedby refid="ai_8cpp" local="yes">src/ai/ai.cpp</includedby>
    <includedby refid="script__ai_8cpp" local="yes">src/ai/script_ai.cpp</includedby>
    <includedby refid="game_8cpp" local="yes">src/game/game.cpp</includedby>
    <includedby refid="loadgame_8cpp" local="yes">src/game/loadgame.cpp</includedby>
    <includedby refid="savegame_8cpp" local="yes">src/game/savegame.cpp</includedby>
    <includedby refid="player_8cpp" local="yes">src/stratagus/player.cpp</includedby>
    <includedby refid="script__player_8cpp" local="yes">src/stratagus/script_player.cpp</includedby>
    <includedby refid="stratagus_8cpp" local="yes">src/stratagus/stratagus.cpp</includedby>
    <includedby refid="interface_8cpp" local="yes">src/ui/interface.cpp</includedby>
    <includedby refid="unit_8cpp" local="yes">src/unit/unit.cpp</includedby>
    <includedby refid="tolua_8cpp" local="yes">build/tolua.cpp</includedby>
    <invincdepgraph>
      <node id="10">
        <label>src/ai/script_ai.cpp</label>
        <link refid="script__ai_8cpp"/>
      </node>
      <node id="8">
        <label>src/action/action_upgradeto.cpp</label>
        <link refid="action__upgradeto_8cpp"/>
      </node>
      <node id="5">
        <label>src/action/action_research.cpp</label>
        <link refid="action__research_8cpp"/>
      </node>
      <node id="1">
        <label>src/include/ai.h</label>
        <link refid="ai_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/action/action_build.cpp</label>
        <link refid="action__build_8cpp"/>
      </node>
      <node id="9">
        <label>src/ai/ai.cpp</label>
        <link refid="ai_8cpp"/>
      </node>
      <node id="11">
        <label>src/game/game.cpp</label>
        <link refid="game_8cpp"/>
      </node>
      <node id="19">
        <label>build/tolua.cpp</label>
        <link refid="tolua_8cpp"/>
      </node>
      <node id="18">
        <label>src/unit/unit.cpp</label>
        <link refid="unit_8cpp"/>
      </node>
      <node id="7">
        <label>src/action/action_train.cpp</label>
        <link refid="action__train_8cpp"/>
      </node>
      <node id="12">
        <label>src/game/loadgame.cpp</label>
        <link refid="loadgame_8cpp"/>
      </node>
      <node id="17">
        <label>src/ui/interface.cpp</label>
        <link refid="interface_8cpp"/>
      </node>
      <node id="15">
        <label>src/stratagus/script_player.cpp</label>
        <link refid="script__player_8cpp"/>
      </node>
      <node id="4">
        <label>src/action/action_move.cpp</label>
        <link refid="action__move_8cpp"/>
      </node>
      <node id="14">
        <label>src/stratagus/player.cpp</label>
        <link refid="player_8cpp"/>
      </node>
      <node id="16">
        <label>src/stratagus/stratagus.cpp</label>
        <link refid="stratagus_8cpp"/>
      </node>
      <node id="6">
        <label>src/action/action_resource.cpp</label>
        <link refid="action__resource_8cpp"/>
      </node>
      <node id="3">
        <label>src/action/action_built.cpp</label>
        <link refid="action__built_8cpp"/>
      </node>
      <node id="13">
        <label>src/game/savegame.cpp</label>
        <link refid="savegame_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <header>ai.h - The ai headerfile.</header>
      <memberdef kind="variable" id="ai_8h_1a49a81070cba57ddab0a23757fa831925" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int AiSleepCycles</definition>
        <argsstring></argsstring>
        <name>AiSleepCycles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="49" column="12" bodyfile="src/ai/ai.cpp" bodystart="162" bodyend="-1" declfile="src/include/ai.h" declline="49" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a7085819c47e26151bc163ed67ea64835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiEachCycle</definition>
        <argsstring>(CPlayer &amp;player)</argsstring>
        <name>AiEachCycle</name>
        <param>
          <type><ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>player</declname>
        </param>
        <briefdescription>
<para>Ai sleeps # cycles. </para>
        </briefdescription>
        <detaileddescription>
<para>This is called for each player, each game cycle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>The player structure pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="55" column="13" bodyfile="src/ai/ai.cpp" bodystart="1004" bodyend="1007" declfile="src/include/ai.h" declline="55" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a0d1e6ec244182fe1f05c46f49c54ba41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiEachSecond</definition>
        <argsstring>(CPlayer &amp;player)</argsstring>
        <name>AiEachSecond</name>
        <param>
          <type><ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>player</declname>
        </param>
        <briefdescription>
<para>Called each game cycle. </para>
        </briefdescription>
        <detaileddescription>
<para>This is called for each player each second.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>The player structure pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="56" column="13" bodyfile="src/ai/ai.cpp" bodystart="1014" bodyend="1042" declfile="src/include/ai.h" declline="56" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1aa3fd8a732614c1956d2b1961a5ee8d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void InitAiModule</definition>
        <argsstring>()</argsstring>
        <name>InitAiModule</name>
        <briefdescription>
<para>Called each second. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize global structures of the AI </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="58" column="13" bodyfile="src/ai/ai.cpp" bodystart="486" bodyend="489" declfile="src/include/ai.h" declline="58" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a56c725a0f0dd77d3a2ad650c6d57c849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiInit</definition>
        <argsstring>(CPlayer &amp;player)</argsstring>
        <name>AiInit</name>
        <param>
          <type><ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>player</declname>
        </param>
        <briefdescription>
<para>Init AI global structures. </para>
        </briefdescription>
        <detaileddescription>
<para>Setup all at start.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>The player structure pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="59" column="13" bodyfile="src/ai/ai.cpp" bodystart="428" bodyend="481" declfile="src/include/ai.h" declline="59" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a8123cbd5d95a217900789de7f05bb21c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CleanAi</definition>
        <argsstring>()</argsstring>
        <name>CleanAi</name>
        <briefdescription>
<para>Init AI for this player. </para>
        </briefdescription>
        <detaileddescription>
<para>Cleanup the AI in order to enable to restart a game. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="60" column="13" bodyfile="src/ai/ai.cpp" bodystart="495" bodyend="501" declfile="src/include/ai.h" declline="60" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a8b85d45a0ef3aa4f30522848e1a54740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void FreeAi</definition>
        <argsstring>()</argsstring>
        <name>FreeAi</name>
        <briefdescription>
<para>Cleanup the AI module. </para>
        </briefdescription>
        <detaileddescription>
<para>Free all AI resources. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="61" column="13" bodyfile="src/ai/ai.cpp" bodystart="507" bodyend="531" declfile="src/include/ai.h" declline="61" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1ae9fa09d52f5b74a930c4ae466144eff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SaveAi</definition>
        <argsstring>(CFile &amp;file)</argsstring>
        <name>SaveAi</name>
        <param>
          <type><ref refid="classCFile" kindref="compound">CFile</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Free the AI resources. </para>
        </briefdescription>
        <detaileddescription>
<para>Save state of AI to file.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Output file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="62" column="13" bodyfile="src/ai/ai.cpp" bodystart="410" bodyend="421" declfile="src/include/ai.h" declline="62" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1ac5d801d52ede4ec912059bfd52d9f866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiCclRegister</definition>
        <argsstring>()</argsstring>
        <name>AiCclRegister</name>
        <briefdescription>
<para>Save the AI state. </para>
        </briefdescription>
        <detaileddescription>
<para>Register CCL features for unit-type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="64" column="13" bodyfile="src/ai/script_ai.cpp" bodystart="1543" bodyend="1589" declfile="src/include/ai.h" declline="64" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a87cebc10782b5a340b45ed89840707a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiAttackWithForceAt</definition>
        <argsstring>(unsigned int force, int x, int y)</argsstring>
        <name>AiAttackWithForceAt</name>
        <param>
          <type>unsigned int</type>
          <declname>force</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Register ccl features. </para>
        </briefdescription>
        <detaileddescription>
<para>Attack with force at position</para>
<para>Register ccl features.</para>
<para>Attack at position with force.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>Force number to attack with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X tile map position to be attacked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y tile map position to be attacked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="67" column="13" bodyfile="src/ai/ai_force.cpp" bodystart="737" bodyend="752" declfile="src/include/ai.h" declline="67" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a46069cc4862a8493d9472abd80df8dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiAttackWithForce</definition>
        <argsstring>(unsigned int force)</argsstring>
        <name>AiAttackWithForce</name>
        <param>
          <type>unsigned int</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Attack with force. </para>
        </briefdescription>
        <detaileddescription>
<para>Attack opponent with force.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>Force number to attack with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="69" column="13" bodyfile="src/ai/ai_force.cpp" bodystart="759" bodyend="795" declfile="src/include/ai.h" declline="69" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a87bcafc04e7889aa0322f7c9c3340ff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiHelpMe</definition>
        <argsstring>(const CUnit *attacker, CUnit &amp;defender)</argsstring>
        <name>AiHelpMe</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>attacker</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>defender</declname>
        </param>
        <briefdescription>
<para>Called if AI unit is attacked. </para>
        </briefdescription>
        <detaileddescription>
<para>Called if a Unit is Attacked</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attacker</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to attacker unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defender</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit that is being attacked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="76" column="13" bodyfile="src/ai/ai.cpp" bodystart="645" bodyend="735" declfile="src/include/ai.h" declline="76" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a06b314a1812af6faa95a2691eb73ea1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiUnitKilled</definition>
        <argsstring>(CUnit &amp;unit)</argsstring>
        <name>AiUnitKilled</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Called if AI unit is killed. </para>
        </briefdescription>
        <detaileddescription>
<para>Called if a unit is killed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="78" column="13" bodyfile="src/ai/ai.cpp" bodystart="742" bodyend="764" declfile="src/include/ai.h" declline="78" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a8bb477337402981b764f8447ff3138c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiNeedMoreSupply</definition>
        <argsstring>(const CPlayer &amp;player)</argsstring>
        <name>AiNeedMoreSupply</name>
        <param>
          <type>const <ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>player</declname>
        </param>
        <briefdescription>
<para>Called if AI needs more farms. </para>
        </briefdescription>
        <detaileddescription>
<para>Called if the AI needs more farms.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>player which need supply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="80" column="13" bodyfile="src/ai/ai.cpp" bodystart="940" bodyend="944" declfile="src/include/ai.h" declline="80" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1ae45ab9f63e29e49ec2190f3df492c899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiWorkComplete</definition>
        <argsstring>(CUnit *unit, CUnit &amp;what)</argsstring>
        <name>AiWorkComplete</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Called if AI unit has completed work. </para>
        </briefdescription>
        <detaileddescription>
<para>Called if work complete (Buildings).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit that builds the building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit building that was built. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="82" column="13" bodyfile="src/ai/ai.cpp" bodystart="772" bodyend="785" declfile="src/include/ai.h" declline="82" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a4320bc05a6f9a1049a2d2b3764276b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiCanNotBuild</definition>
        <argsstring>(const CUnit &amp;unit, const CUnitType &amp;what)</argsstring>
        <name>AiCanNotBuild</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Called if AI unit can&apos;t build. </para>
        </briefdescription>
        <detaileddescription>
<para>Called if building can&apos;t be build.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit what builds the building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit-type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="84" column="13" bodyfile="src/ai/ai.cpp" bodystart="793" bodyend="801" declfile="src/include/ai.h" declline="84" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a859b26c4eea3360f9c8ac8edc6769050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiCanNotReach</definition>
        <argsstring>(CUnit &amp;unit, const CUnitType &amp;what)</argsstring>
        <name>AiCanNotReach</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Called if AI unit can&apos;t reach building place. </para>
        </briefdescription>
        <detaileddescription>
<para>Called if building place can&apos;t be reached.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit what builds the building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit-type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="86" column="13" bodyfile="src/ai/ai.cpp" bodystart="809" bodyend="813" declfile="src/include/ai.h" declline="86" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1aa5b60b7727564e401afae4bf34aa7a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiCanNotMove</definition>
        <argsstring>(CUnit &amp;unit)</argsstring>
        <name>AiCanNotMove</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Called if an AI unit can&apos;t move. </para>
        </briefdescription>
        <detaileddescription>
<para>Called if a unit can&apos;t move. Try to move unit in the way</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit what builds the building. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="88" column="13" bodyfile="src/ai/ai.cpp" bodystart="922" bodyend="933" declfile="src/include/ai.h" declline="88" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1af046955a5aadd4d99a4dfdacc00947ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiTrainingComplete</definition>
        <argsstring>(CUnit &amp;unit, CUnit &amp;what)</argsstring>
        <name>AiTrainingComplete</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Called if AI unit has completed training. </para>
        </briefdescription>
        <detaileddescription>
<para>Called if training of a unit is completed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit making. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to new ready trained unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="90" column="13" bodyfile="src/ai/ai.cpp" bodystart="952" bodyend="965" declfile="src/include/ai.h" declline="90" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a922a4b4b97d02779521335976215f05c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiUpgradeToComplete</definition>
        <argsstring>(CUnit &amp;unit, const CUnitType &amp;what)</argsstring>
        <name>AiUpgradeToComplete</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Called if AI unit has completed upgrade to. </para>
        </briefdescription>
        <detaileddescription>
<para>Called if upgrading of an unit is completed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit working. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the new unit-type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="92" column="13" bodyfile="src/ai/ai.cpp" bodystart="973" bodyend="980" declfile="src/include/ai.h" declline="92" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ai_8h_1a7121ccbb4813a0eb2daa33edd3403c7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void AiResearchComplete</definition>
        <argsstring>(CUnit &amp;unit, const CUpgrade *what)</argsstring>
        <name>AiResearchComplete</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="classCUpgrade" kindref="compound">CUpgrade</ref> *</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Called if AI unit has completed research. </para>
        </briefdescription>
        <detaileddescription>
<para>Called if reseaching of an unit is completed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit working. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the new upgrade. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/ai.h" line="94" column="13" bodyfile="src/ai/ai.cpp" bodystart="988" bodyend="997" declfile="src/include/ai.h" declline="94" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/include/ai.h"/>
  </compounddef>
</doxygen>
