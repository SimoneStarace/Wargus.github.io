<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgcn_1_1DefaultFont" kind="class" language="C++" prot="public">
    <compoundname>gcn::DefaultFont</compoundname>
    <basecompoundref refid="classgcn_1_1Font" prot="public" virt="non-virtual">gcn::Font</basecompoundref>
    <includes refid="defaultfont_8h" local="no">defaultfont.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgcn_1_1DefaultFont_1ab606ee0708758b5fafd19cfc8938b624" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual gcn::DefaultFont::~DefaultFont</definition>
        <argsstring>()</argsstring>
        <name>~DefaultFont</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/defaultfont.h" line="74" column="17" bodyfile="src/guichan/include/guichan/defaultfont.h" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1DefaultFont_1a5b6ab73374e18e7f22696b7b2a1afa08" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int gcn::DefaultFont::drawGlyph</definition>
        <argsstring>(Graphics *graphics, unsigned char glyph, int x, int y)</argsstring>
        <name>drawGlyph</name>
        <param>
          <type><ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> *</type>
          <declname>graphics</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>glyph</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a glyph as a rectangle. The glyphs always be drawn as rectangles no matter the glyph.</para>
<para>NOTE: You normally won&apos;t use this function to draw text since the <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> class contains better functions for drawing text.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object to be used for drawing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>glyph</parametername>
</parameternamelist>
<parameterdescription>
<para>a glyph to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate where to draw the glyph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate where to draw the glyph. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the width of the glyph in pixels. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/defaultfont.h" line="90" column="21" bodyfile="src/guichan/defaultfont.cpp" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1DefaultFont_1a6a56662a4326a6a1b5597cca0767d1be" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::DefaultFont::drawString</definition>
        <argsstring>(Graphics *graphics, const std::string &amp;text, int x, int y, bool is_normal)</argsstring>
        <name>drawString</name>
        <reimplements refid="classgcn_1_1Font_1af26545b835fa5afd4f20d6a6bbab29b5">drawString</reimplements>
        <param>
          <type><ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> *</type>
          <declname>graphics</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_normal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a string.</para>
<para>NOTE: You normally won&apos;t use this function to draw text since <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> contains better functions for drawing text.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object to use for drawing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate where to draw the string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate where to draw the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/defaultfont.h" line="95" column="22" bodyfile="src/guichan/defaultfont.cpp" bodystart="81" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1DefaultFont_1a8e9f9e2bde2f11186aac6d6c6e9f878e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int gcn::DefaultFont::getWidth</definition>
        <argsstring>(const std::string &amp;text) const</argsstring>
        <name>getWidth</name>
        <reimplements refid="classgcn_1_1Font_1abb88894b1ebeda28edcac75c537f8e0f">getWidth</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the width of a string. The width of a string is not necesserily the sum of all the widths of it&apos;s glyphs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to return the width of. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the width of a string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/defaultfont.h" line="97" column="21" bodyfile="src/guichan/defaultfont.cpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1DefaultFont_1a857d9f299fe7f8b7b1eb027937fa6622" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int gcn::DefaultFont::getHeight</definition>
        <argsstring>() const</argsstring>
        <name>getHeight</name>
        <reimplements refid="classgcn_1_1Font_1aa270d8934a16d4065143e3617b1fa926">getHeight</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the height of the glyphs in the font.</para>
<para><simplesect kind="return"><para>the height of the glyphs int the font. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/defaultfont.h" line="99" column="21" bodyfile="src/guichan/defaultfont.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1DefaultFont_1a10b802c51de668171c2255f2e11fc063" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int gcn::DefaultFont::getStringIndexAt</definition>
        <argsstring>(const std::string &amp;text, int x)</argsstring>
        <name>getStringIndexAt</name>
        <reimplements refid="classgcn_1_1Font_1a3210f4c53424ade4b188b8dfb1f686a4">getStringIndexAt</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a string index in a string providing an x coordinate. Used to retrive a string index (for a character in a string) at a certain x position. It is especially useful when a mouse clicks in a <ref refid="classgcn_1_1TextField" kindref="compound">TextField</ref> and you want to know which character was clicked.</para>
<para><simplesect kind="return"><para>a string index in a string providing an x coordinate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/defaultfont.h" line="101" column="21" bodyfile="src/guichan/defaultfont.cpp" bodystart="92" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A font only capable of drawing rectangles. It is used by default merely to show that no font have been set. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>gcn::DefaultFont</label>
        <link refid="classgcn_1_1DefaultFont"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>gcn::Font</label>
        <link refid="classgcn_1_1Font"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>gcn::DefaultFont</label>
        <link refid="classgcn_1_1DefaultFont"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>gcn::Font</label>
        <link refid="classgcn_1_1Font"/>
      </node>
    </collaborationgraph>
    <location file="src/guichan/include/guichan/defaultfont.h" line="68" column="1" bodyfile="src/guichan/include/guichan/defaultfont.h" bodystart="67" bodyend="102"/>
    <listofallmembers>
      <member refid="classgcn_1_1DefaultFont_1a5b6ab73374e18e7f22696b7b2a1afa08" prot="public" virt="virtual"><scope>gcn::DefaultFont</scope><name>drawGlyph</name></member>
      <member refid="classgcn_1_1DefaultFont_1a6a56662a4326a6a1b5597cca0767d1be" prot="public" virt="virtual"><scope>gcn::DefaultFont</scope><name>drawString</name></member>
      <member refid="classgcn_1_1DefaultFont_1a857d9f299fe7f8b7b1eb027937fa6622" prot="public" virt="virtual"><scope>gcn::DefaultFont</scope><name>getHeight</name></member>
      <member refid="classgcn_1_1DefaultFont_1a10b802c51de668171c2255f2e11fc063" prot="public" virt="virtual"><scope>gcn::DefaultFont</scope><name>getStringIndexAt</name></member>
      <member refid="classgcn_1_1DefaultFont_1a8e9f9e2bde2f11186aac6d6c6e9f878e" prot="public" virt="virtual"><scope>gcn::DefaultFont</scope><name>getWidth</name></member>
      <member refid="classgcn_1_1DefaultFont_1ab606ee0708758b5fafd19cfc8938b624" prot="public" virt="virtual"><scope>gcn::DefaultFont</scope><name>~DefaultFont</name></member>
      <member refid="classgcn_1_1Font_1ab3bd1c57c092fe0ad1d027c4076e463d" prot="public" virt="virtual"><scope>gcn::DefaultFont</scope><name>~Font</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
