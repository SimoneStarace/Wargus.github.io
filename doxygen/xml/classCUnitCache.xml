<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classCUnitCache" kind="class" language="C++" prot="public">
    <compoundname>CUnitCache</compoundname>
    <includes refid="unit__cache_8h" local="no">unit_cache.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classCUnitCache_1ae1b1202e62521456ff58a5f8a406a86f" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classCUnit" kindref="compound">CUnit</ref> * &gt;::<ref refid="classCUnitCache_1ae1b1202e62521456ff58a5f8a406a86f" kindref="member">iterator</ref></type>
        <definition>typedef std::vector&lt;CUnit *&gt;::iterator CUnitCache::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="53" column="32" bodyfile="src/include/unit_cache.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classCUnitCache_1af450d68a0f577aa0ce494548c8ca8f2e" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classCUnit" kindref="compound">CUnit</ref> * &gt;::<ref refid="classCUnitCache_1af450d68a0f577aa0ce494548c8ca8f2e" kindref="member">const_iterator</ref></type>
        <definition>typedef std::vector&lt;CUnit *&gt;::const_iterator CUnitCache::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="54" column="38" bodyfile="src/include/unit_cache.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classCUnitCache_1a81035f9462bd9c4c2f653a46ad8df69b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classCUnit" kindref="compound">CUnit</ref> * &gt;</type>
        <definition>std::vector&lt;CUnit *&gt; CUnitCache::Units</definition>
        <argsstring></argsstring>
        <name>Units</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="227" column="13" bodyfile="src/include/unit_cache.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCUnitCache_1a1ad4ae0a27d1646c41bae7e86da96903" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CUnitCache::CUnitCache</definition>
        <argsstring>()</argsstring>
        <name>CUnitCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="57" column="1" bodyfile="src/include/unit_cache.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1aa4df2f53249033029040d51edb290b57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t CUnitCache::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="59" column="8" bodyfile="src/include/unit_cache.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1a8382c5651c4ea74d759a2e3d773f2e81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CUnitCache::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="61" column="6" bodyfile="src/include/unit_cache.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1ad32a87db309ffb5b7ea836b61854b982" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCUnitCache_1af450d68a0f577aa0ce494548c8ca8f2e" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CUnitCache::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="63" column="16" bodyfile="src/include/unit_cache.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1a6e81067bb6a0af1fdc0f34567a2d5e05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCUnitCache_1ae1b1202e62521456ff58a5f8a406a86f" kindref="member">iterator</ref></type>
        <definition>iterator CUnitCache::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="64" column="10" bodyfile="src/include/unit_cache.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1a71e3b8d76cf1b526814a4f40bc03ba2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCUnitCache_1af450d68a0f577aa0ce494548c8ca8f2e" kindref="member">const_iterator</ref></type>
        <definition>const_iterator CUnitCache::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="65" column="16" bodyfile="src/include/unit_cache.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1a2b115ecf44f73fb87bacf9ca7df3f1a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCUnitCache_1ae1b1202e62521456ff58a5f8a406a86f" kindref="member">iterator</ref></type>
        <definition>iterator CUnitCache::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="66" column="10" bodyfile="src/include/unit_cache.h" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1aaa1ef752dbc83b8a151c8b0dd3e63218" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* CUnitCache::operator[]</definition>
        <argsstring>(const unsigned int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="68" column="7" bodyfile="src/include/unit_cache.h" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1a9175d7aeeba92f97e8fb763b2cfb22ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* CUnitCache::operator[]</definition>
        <argsstring>(const unsigned int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="73" column="7" bodyfile="src/include/unit_cache.h" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1a2ccefd4a91a6d6de6ecac01e099d540e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* CUnitCache::find</definition>
        <argsstring>(const _T &amp;pred) const</argsstring>
        <name>find</name>
        <param>
          <type>const _T &amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
<para>Find the first unit in a tile cache for which a predicate is true. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pred</parametername>
</parameternamelist>
<parameterdescription>
<para>A predicate object vith bool operator()(const CUnit *). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The first unit u in the cache such that <computeroutput>pred(u)</computeroutput> is true, or NULL if no such unit exists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="86" column="7" bodyfile="src/include/unit_cache.h" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1a785e8a2591fd3d758b2abf0d92483eb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _T</type>
          </param>
        </templateparamlist>
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CUnitCache::for_each</definition>
        <argsstring>(const _T functor)</argsstring>
        <name>for_each</name>
        <param>
          <type>const _T</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
<para>Apply a function to every element of a cache. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functor</parametername>
</parameternamelist>
<parameterdescription>
<para>A unary function object vith void operator()(CUnit *). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>count of visited element.</para>
</simplesect>
Applies the function object <computeroutput>f</computeroutput> to each element in the cache. <computeroutput>functor</computeroutput> must not modify the order of the cache. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="102" column="6" bodyfile="src/include/unit_cache.h" bodystart="102" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1a8f0e4e8501e4d699dd202e914ca91739" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int CUnitCache::for_each_if</definition>
        <argsstring>(const _T &amp;functor)</argsstring>
        <name>for_each_if</name>
        <param>
          <type>const _T &amp;</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
<para>Apply a function to every element of a cache. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functor</parametername>
</parameternamelist>
<parameterdescription>
<para>A unary function object vith bool operator()(CUnit *). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>count of visited element.</para>
</simplesect>
Applies the function object <computeroutput>f</computeroutput> to each element in the cache. <computeroutput>functor</computeroutput> must not modify the order of the cache. If <computeroutput>functor</computeroutput> return false then loop is exited. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="121" column="5" bodyfile="src/include/unit_cache.h" bodystart="121" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1acc020e46eef8f59d4c648907edb3dced" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>CUnit* CUnitCache::Remove</definition>
        <argsstring>(const unsigned int index)</argsstring>
        <name>Remove</name>
        <param>
          <type>const unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove unit on index from unit cache.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit index to remove from container. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to removed element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="140" column="7" bodyfile="src/include/unit_cache.h" bodystart="140" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1aa67b6e999bc6434038a8492718f87760" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CUnitCache::Remove</definition>
        <argsstring>(CUnit *const unit)</argsstring>
        <name>Remove</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *const</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove unit from unit cache.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit pointer to remove from container. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="157" column="6" bodyfile="src/include/unit_cache.h" bodystart="157" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1a24174fe38a196dea79923c028834e4b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CUnitCache::RemoveS</definition>
        <argsstring>(CUnit *const unit)</argsstring>
        <name>RemoveS</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *const</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove unit from unit cache.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit pointer to remove from container. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="190" column="6" bodyfile="src/include/unit_cache.h" bodystart="190" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1a2f3d373be76c81b97997f711f0e2a3b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CUnitCache::InsertS</definition>
        <argsstring>(CUnit *unit)</argsstring>
        <name>InsertS</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert new unit into tile cache. Sorted version for binary searching.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit pointer to place in cache. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if unit is already in cache and nothing is added. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="207" column="6" bodyfile="src/include/unit_cache.h" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classCUnitCache_1ac2782d884342abd4eb9ffbe8a89ca0f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CUnitCache::Insert</definition>
        <argsstring>(CUnit *unit)</argsstring>
        <name>Insert</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert new unit into tile cache.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit pointer to place in cache. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/unit_cache.h" line="221" column="6" bodyfile="src/include/unit_cache.h" bodystart="221" bodyend="224"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Unit cache </para>
    </detaileddescription>
    <location file="src/include/unit_cache.h" line="51" column="1" bodyfile="src/include/unit_cache.h" bodystart="50" bodyend="228"/>
    <listofallmembers>
      <member refid="classCUnitCache_1ad32a87db309ffb5b7ea836b61854b982" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>begin</name></member>
      <member refid="classCUnitCache_1a6e81067bb6a0af1fdc0f34567a2d5e05" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>begin</name></member>
      <member refid="classCUnitCache_1a8382c5651c4ea74d759a2e3d773f2e81" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>clear</name></member>
      <member refid="classCUnitCache_1af450d68a0f577aa0ce494548c8ca8f2e" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>const_iterator</name></member>
      <member refid="classCUnitCache_1a1ad4ae0a27d1646c41bae7e86da96903" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>CUnitCache</name></member>
      <member refid="classCUnitCache_1a71e3b8d76cf1b526814a4f40bc03ba2b" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>end</name></member>
      <member refid="classCUnitCache_1a2b115ecf44f73fb87bacf9ca7df3f1a7" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>end</name></member>
      <member refid="classCUnitCache_1a2ccefd4a91a6d6de6ecac01e099d540e" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>find</name></member>
      <member refid="classCUnitCache_1a785e8a2591fd3d758b2abf0d92483eb5" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>for_each</name></member>
      <member refid="classCUnitCache_1a8f0e4e8501e4d699dd202e914ca91739" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>for_each_if</name></member>
      <member refid="classCUnitCache_1ac2782d884342abd4eb9ffbe8a89ca0f4" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>Insert</name></member>
      <member refid="classCUnitCache_1a2f3d373be76c81b97997f711f0e2a3b2" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>InsertS</name></member>
      <member refid="classCUnitCache_1ae1b1202e62521456ff58a5f8a406a86f" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>iterator</name></member>
      <member refid="classCUnitCache_1aaa1ef752dbc83b8a151c8b0dd3e63218" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>operator[]</name></member>
      <member refid="classCUnitCache_1a9175d7aeeba92f97e8fb763b2cfb22ba" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>operator[]</name></member>
      <member refid="classCUnitCache_1acc020e46eef8f59d4c648907edb3dced" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>Remove</name></member>
      <member refid="classCUnitCache_1aa67b6e999bc6434038a8492718f87760" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>Remove</name></member>
      <member refid="classCUnitCache_1a24174fe38a196dea79923c028834e4b4" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>RemoveS</name></member>
      <member refid="classCUnitCache_1aa4df2f53249033029040d51edb290b57" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>size</name></member>
      <member refid="classCUnitCache_1a81035f9462bd9c4c2f653a46ad8df69b" prot="public" virt="non-virtual"><scope>CUnitCache</scope><name>Units</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
