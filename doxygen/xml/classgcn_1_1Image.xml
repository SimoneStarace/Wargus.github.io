<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgcn_1_1Image" kind="class" language="C++" prot="public">
    <compoundname>gcn::Image</compoundname>
    <derivedcompoundref refid="classCGraphic" prot="public" virt="non-virtual">CGraphic</derivedcompoundref>
    <derivedcompoundref refid="classMng" prot="public" virt="non-virtual">Mng</derivedcompoundref>
    <derivedcompoundref refid="classMovie" prot="public" virt="non-virtual">Movie</derivedcompoundref>
    <includes refid="image_8h" local="no">image.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgcn_1_1Image_1a84c8af438a681f25fe717394fcf582da" prot="protected" static="no" mutable="no">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
        <definition>void* gcn::Image::mData</definition>
        <argsstring></argsstring>
        <name>mData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="154" column="14" bodyfile="src/guichan/include/guichan/image.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Image_1a9cf1dea27f7dee81ec7a1a7241e4a39b" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int gcn::Image::mWidth</definition>
        <argsstring></argsstring>
        <name>mWidth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="155" column="13" bodyfile="src/guichan/include/guichan/image.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Image_1ae012fbcf0cb9dcda897318f5fcb412e8" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int gcn::Image::mHeight</definition>
        <argsstring></argsstring>
        <name>mHeight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="156" column="13" bodyfile="src/guichan/include/guichan/image.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Image_1aac1200617b4ff587ba63a278a5c2c137" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gcn::Image::mLoadedWithImageLoader</definition>
        <argsstring></argsstring>
        <name>mLoadedWithImageLoader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="157" column="14" bodyfile="src/guichan/include/guichan/image.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classgcn_1_1Image_1aa6c69d9bbc2e6c2282361c5e59a8a7a9" prot="protected" static="yes" mutable="no">
        <type><ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> *</type>
        <definition>ImageLoader * Image::mImageLoader</definition>
        <argsstring></argsstring>
        <name>mImageLoader</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="158" column="28" bodyfile="src/guichan/include/guichan/image.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgcn_1_1Image_1ad80e64dd5f3afc3f738c0ce528567f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Image::Image</definition>
        <argsstring>(void *data, int width, int height)</argsstring>
        <name>Image</name>
        <param>
          <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the image. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="87" column="9" bodyfile="src/guichan/image.cpp" bodystart="72" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Image_1a81e88caba6ef6c0ed639bf1f25e9d441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Image::Image</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>Image</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename of the image. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgcn_1_1Exception" kindref="compound">Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when no <ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> exists. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="95" column="9" bodyfile="src/guichan/image.cpp" bodystart="80" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Image_1a0294f63700543e11c0f0da85601c7ae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Image::~Image</definition>
        <argsstring>()</argsstring>
        <name>~Image</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. Unloads the image with the <ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref>, if it was loaded with it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="101" column="17" bodyfile="src/guichan/image.cpp" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Image_1a36bcae4838228d574738249a87dc4464" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int Image::getWidth</definition>
        <argsstring>() const</argsstring>
        <name>getWidth</name>
        <reimplementedby refid="classMovie_1aec8a961a5acd7d6b158daebb15a72ef4">getWidth</reimplementedby>
        <reimplementedby refid="classCGraphic_1a79b46b2b9c1adfe5563987660e028fab">getWidth</reimplementedby>
        <reimplementedby refid="classMng_1a99c5a75b3c4fe1ca5b260f9992286518">getWidth</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the width of the <ref refid="classgcn_1_1Image" kindref="compound">Image</ref>.</para>
<para><simplesect kind="return"><para>the image width </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="108" column="21" bodyfile="src/guichan/image.cpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Image_1a1cd7587f88b6932b5269051d1ba08ff9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int Image::getHeight</definition>
        <argsstring>() const</argsstring>
        <name>getHeight</name>
        <reimplementedby refid="classMovie_1a29d50e71b75eb2208244d94b1047d67d">getHeight</reimplementedby>
        <reimplementedby refid="classCGraphic_1a3ffcf58c7ef0a6527ca6b7623375da00">getHeight</reimplementedby>
        <reimplementedby refid="classMng_1a54b95e46f939960e5924de2b8148fbab">getHeight</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the height of the <ref refid="classgcn_1_1Image" kindref="compound">Image</ref>.</para>
<para><simplesect kind="return"><para>the image height </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="115" column="21" bodyfile="src/guichan/image.cpp" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Image_1aefcd57a2e530f2daca972188fdda65ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref> *</type>
        <definition>void * Image::_getData</definition>
        <argsstring>() const</argsstring>
        <name>_getData</name>
        <reimplementedby refid="classMovie_1afcb55852a8ac4e8dfac404a9ffce938b">_getData</reimplementedby>
        <reimplementedby refid="classCGraphic_1ab4a4f69d95917d1db11001c30988f0ad">_getData</reimplementedby>
        <reimplementedby refid="classMng_1a273f2c28e9d78d6aac55fceac69d9de5">_getData</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the data of the <ref refid="classgcn_1_1Image" kindref="compound">Image</ref>. <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> data can be different things depending on what <ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> you use. If you for instance use the <ref refid="classgcn_1_1SDLImageLoader" kindref="compound">SDLImageLoader</ref> then an SDL_Surface will be returned.</para>
<para><simplesect kind="return"><para>a void pointer to the <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> data. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classgcn_1_1SDLImageLoader" kindref="compound">SDLImageLoader</ref>, AllegroImageLoader </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="125" column="22" bodyfile="src/guichan/image.cpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Image_1abbe772bb6faebbbe6dc8c55969f5ba4a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool gcn::Image::isDirty</definition>
        <argsstring>() const</argsstring>
        <name>isDirty</name>
        <reimplementedby refid="classMovie_1afca213fb942ead397356c74f4cccb726">isDirty</reimplementedby>
        <reimplementedby refid="classMng_1ae45df8918a0ade9f3da3b239e8ff81c8">isDirty</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="127" column="22" bodyfile="src/guichan/include/guichan/image.h" bodystart="127" bodyend="127"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgcn_1_1Image_1a5c25b4d5b2b5d7d7597ebe410bc3c3ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> *</type>
        <definition>ImageLoader * Image::_getImageLoader</definition>
        <argsstring>()</argsstring>
        <name>_getImageLoader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the <ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> used for loading Images.</para>
<para><simplesect kind="return"><para>the <ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> used for loading Images. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classgcn_1_1SDLImageLoader" kindref="compound">SDLImageLoader</ref>, AllegroImageLoader </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="135" column="28" bodyfile="src/guichan/image.cpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Image_1a3206d37614fd1dd7893137f2e21c64f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void Image::setImageLoader</definition>
        <argsstring>(ImageLoader *imageLoader)</argsstring>
        <name>setImageLoader</name>
        <param>
          <type><ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> *</type>
          <declname>imageLoader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> to be used for loading images.</para>
<para>IMPORTANT: The <ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> is static and MUST be set before loading images!</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imageLoader</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> to be used for loading images. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classgcn_1_1SDLImageLoader" kindref="compound">SDLImageLoader</ref>, AllegroImageLoader </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="146" column="21" bodyfile="src/guichan/image.cpp" bodystart="118" bodyend="121"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classgcn_1_1Image_1a58edd1c45b4faeb5f789b0d036d02313" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Image::Image</definition>
        <argsstring>()</argsstring>
        <name>Image</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. It is protected so you can inherit from this class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/image.h" line="153" column="9" bodyfile="src/guichan/image.cpp" bodystart="67" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Holds an image. To be able to use this class you must first set an <ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> in <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> by calling <programlisting><codeline><highlight class="normal">Image::setImageLoader(myImageLoader)<sp/></highlight></codeline>
</programlisting> The function is static. If this is not done, the constructor taking a filename will throw an exception. The <ref refid="classgcn_1_1ImageLoader" kindref="compound">ImageLoader</ref> you use must be compatible with the <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> object you use.</para>
<para>EXAMPLE: If you use <ref refid="classgcn_1_1SDLGraphics" kindref="compound">SDLGraphics</ref> you should use <ref refid="classgcn_1_1SDLImageLoader" kindref="compound">SDLImageLoader</ref>. Otherwise your program will crash in a most bizarre way. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>CPlayerColorGraphic</label>
        <link refid="classCPlayerColorGraphic"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>gcn::Image</label>
        <link refid="classgcn_1_1Image"/>
      </node>
      <node id="2">
        <label>CGraphic</label>
        <link refid="classCGraphic"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Mng</label>
        <link refid="classMng"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Movie</label>
        <link refid="classMovie"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>gcn::ImageLoader</label>
        <link refid="classgcn_1_1ImageLoader"/>
      </node>
      <node id="1">
        <label>gcn::Image</label>
        <link refid="classgcn_1_1Image"/>
        <childnode refid="2" relation="usage">
          <edgelabel>mImageLoader</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/guichan/include/guichan/image.h" line="77" column="1" bodyfile="src/guichan/include/guichan/image.h" bodystart="76" bodyend="159"/>
    <listofallmembers>
      <member refid="classgcn_1_1Image_1aefcd57a2e530f2daca972188fdda65ef" prot="public" virt="virtual"><scope>gcn::Image</scope><name>_getData</name></member>
      <member refid="classgcn_1_1Image_1a5c25b4d5b2b5d7d7597ebe410bc3c3ef" prot="public" virt="non-virtual"><scope>gcn::Image</scope><name>_getImageLoader</name></member>
      <member refid="classgcn_1_1Image_1a1cd7587f88b6932b5269051d1ba08ff9" prot="public" virt="virtual"><scope>gcn::Image</scope><name>getHeight</name></member>
      <member refid="classgcn_1_1Image_1a36bcae4838228d574738249a87dc4464" prot="public" virt="virtual"><scope>gcn::Image</scope><name>getWidth</name></member>
      <member refid="classgcn_1_1Image_1ad80e64dd5f3afc3f738c0ce528567f94" prot="public" virt="non-virtual"><scope>gcn::Image</scope><name>Image</name></member>
      <member refid="classgcn_1_1Image_1a81e88caba6ef6c0ed639bf1f25e9d441" prot="public" virt="non-virtual"><scope>gcn::Image</scope><name>Image</name></member>
      <member refid="classgcn_1_1Image_1a58edd1c45b4faeb5f789b0d036d02313" prot="protected" virt="non-virtual"><scope>gcn::Image</scope><name>Image</name></member>
      <member refid="classgcn_1_1Image_1abbe772bb6faebbbe6dc8c55969f5ba4a" prot="public" virt="virtual"><scope>gcn::Image</scope><name>isDirty</name></member>
      <member refid="classgcn_1_1Image_1a84c8af438a681f25fe717394fcf582da" prot="protected" virt="non-virtual"><scope>gcn::Image</scope><name>mData</name></member>
      <member refid="classgcn_1_1Image_1ae012fbcf0cb9dcda897318f5fcb412e8" prot="protected" virt="non-virtual"><scope>gcn::Image</scope><name>mHeight</name></member>
      <member refid="classgcn_1_1Image_1aa6c69d9bbc2e6c2282361c5e59a8a7a9" prot="protected" virt="non-virtual"><scope>gcn::Image</scope><name>mImageLoader</name></member>
      <member refid="classgcn_1_1Image_1aac1200617b4ff587ba63a278a5c2c137" prot="protected" virt="non-virtual"><scope>gcn::Image</scope><name>mLoadedWithImageLoader</name></member>
      <member refid="classgcn_1_1Image_1a9cf1dea27f7dee81ec7a1a7241e4a39b" prot="protected" virt="non-virtual"><scope>gcn::Image</scope><name>mWidth</name></member>
      <member refid="classgcn_1_1Image_1a3206d37614fd1dd7893137f2e21c64f4" prot="public" virt="non-virtual"><scope>gcn::Image</scope><name>setImageLoader</name></member>
      <member refid="classgcn_1_1Image_1a0294f63700543e11c0f0da85601c7ae5" prot="public" virt="virtual"><scope>gcn::Image</scope><name>~Image</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
