<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="depend_8cpp" kind="file" language="C++">
    <compoundname>depend.cpp</compoundname>
    <includes refid="stratagus_8h" local="yes">stratagus.h</includes>
    <includes refid="depend_8h" local="yes">depend.h</includes>
    <includes refid="interface_8h" local="yes">interface.h</includes>
    <includes refid="player_8h" local="yes">player.h</includes>
    <includes refid="script_8h" local="yes">script.h</includes>
    <includes refid="translate_8h" local="yes">translate.h</includes>
    <includes refid="trigger_8h" local="yes">trigger.h</includes>
    <includes refid="unit_8h" local="yes">unit.h</includes>
    <includes refid="unittype_8h" local="yes">unittype.h</includes>
    <includes refid="upgrade__structs_8h" local="yes">upgrade_structs.h</includes>
    <includes refid="upgrade_8h" local="yes">upgrade.h</includes>
    <incdepgraph>
      <node id="14">
        <label>upgrade_structs.h</label>
        <link refid="upgrade__structs_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>script.h</label>
        <link refid="script_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>translate.h</label>
        <link refid="translate_8h"/>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="4">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>lua.h</label>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="31">
        <label>map</label>
      </node>
      <node id="32">
        <label>upgrade.h</label>
        <link refid="upgrade_8h"/>
      </node>
      <node id="10">
        <label>interface.h</label>
        <link refid="interface_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>lauxlib.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
      <node id="28">
        <label>missileconfig.h</label>
        <link refid="missileconfig_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
      <node id="2">
        <label>stratagus.h</label>
        <link refid="stratagus_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>color.h</label>
        <link refid="include_2color_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>unitsound.h</label>
        <link refid="unitsound_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>icons.h</label>
        <link refid="icons_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstdlib</label>
      </node>
      <node id="25">
        <label>trigger.h</label>
        <link refid="trigger_8h"/>
      </node>
      <node id="1">
        <label>src/unit/depend.cpp</label>
        <link refid="depend_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>depend.h</label>
        <link refid="depend_8h"/>
      </node>
      <node id="29">
        <label>climits</label>
      </node>
      <node id="12">
        <label>vec2i.h</label>
        <link refid="vec2i_8h"/>
      </node>
      <node id="26">
        <label>unit.h</label>
        <link refid="unit_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>set</label>
      </node>
      <node id="27">
        <label>unittype.h</label>
        <link refid="unittype_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>algorithm</label>
      </node>
      <node id="16">
        <label>player.h</label>
        <link refid="player_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>lualib.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <header>depend.cpp - The units/upgrade dependencies</header>
      <memberdef kind="variable" id="depend_8cpp_1adfad1069485852fb97107e031925bebc" prot="public" static="yes" mutable="no">
        <type><ref refid="classDependRule" kindref="compound">DependRule</ref> *</type>
        <definition>DependRule* DependHash[101]</definition>
        <argsstring>[101]</argsstring>
        <name>DependHash</name>
        <briefdescription>
<para>All dependencies hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/depend.cpp" line="56" column="19" bodyfile="src/unit/depend.cpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="depend_8cpp_1a4aeac407b149834711c57400245075ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>static void AddDependency</definition>
        <argsstring>(const std::string &amp;target, const std::string &amp;required, int count, int or_flag)</argsstring>
        <name>AddDependency</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>required</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>or_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new dependency. If already exits append to and rule.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classTarget" kindref="compound">Target</ref> of the dependency. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>required</parametername>
</parameternamelist>
<parameterdescription>
<para>Requirement of the dependency. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of the required needed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>or_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Start of or rule. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/depend.cpp" line="70" column="13" bodyfile="src/unit/depend.cpp" bodystart="70" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="depend_8cpp_1ad11d6b4edd33519b3ee69f663234e174" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CheckDependByRule</definition>
        <argsstring>(const CPlayer &amp;player, DependRule &amp;rule)</argsstring>
        <name>CheckDependByRule</name>
        <param>
          <type>const <ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>player</declname>
        </param>
        <param>
          <type><ref refid="classDependRule" kindref="compound">DependRule</ref> &amp;</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if this upgrade or unit is available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>For this player available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule</parametername>
</parameternamelist>
<parameterdescription>
<para>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if available, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/depend.cpp" line="181" column="13" bodyfile="src/unit/depend.cpp" bodystart="181" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="depend_8cpp_1ac3189a609e5dcdc5fce11d4eba9bb465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string PrintDependencies</definition>
        <argsstring>(const CPlayer &amp;player, const ButtonAction &amp;button)</argsstring>
        <name>PrintDependencies</name>
        <param>
          <type>const <ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>player</declname>
        </param>
        <param>
          <type>const <ref refid="classButtonAction" kindref="compound">ButtonAction</ref> &amp;</type>
          <declname>button</declname>
        </param>
        <briefdescription>
<para>Print all unit dependencies into string. </para>
        </briefdescription>
        <detaileddescription>
<para>Check if this upgrade or unit is available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>For this player available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit or Upgrade.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if available, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/depend.cpp" line="236" column="13" bodyfile="src/unit/depend.cpp" bodystart="236" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="depend_8cpp_1a43e82a61a2add3e8a8372a54d84a58ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CheckDependByIdent</definition>
        <argsstring>(const CPlayer &amp;player, const std::string &amp;target)</argsstring>
        <name>CheckDependByIdent</name>
        <param>
          <type>const <ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>player</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Check a dependency by identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Check if this upgrade or unit is available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>For this player available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit or Upgrade.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if available, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/depend.cpp" line="326" column="6" bodyfile="src/unit/depend.cpp" bodystart="326" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="depend_8cpp_1a6683469cd01394504dd3544673cb7f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CheckDependByType</definition>
        <argsstring>(const CPlayer &amp;player, const CUnitType &amp;type)</argsstring>
        <name>CheckDependByType</name>
        <param>
          <type>const <ref refid="classCPlayer" kindref="compound">CPlayer</ref> &amp;</type>
          <declname>player</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Check a dependency by unit type. </para>
        </briefdescription>
        <detaileddescription>
<para>Check if this upgrade or unit is available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>For this player available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit or Upgrade.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if available, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/depend.cpp" line="362" column="6" bodyfile="src/unit/depend.cpp" bodystart="362" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="depend_8cpp_1a7fae18d8a62aea7d504d6ae27538cf32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void InitDependencies</definition>
        <argsstring>()</argsstring>
        <name>InitDependencies</name>
        <briefdescription>
<para>Init the dependencies. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize unit and upgrade dependencies. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/depend.cpp" line="377" column="6" bodyfile="src/unit/depend.cpp" bodystart="377" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="depend_8cpp_1af1f862707a3b4657ae105b277aaea246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CleanDependencies</definition>
        <argsstring>()</argsstring>
        <name>CleanDependencies</name>
        <briefdescription>
<para>Cleanup dependencies module. </para>
        </briefdescription>
        <detaileddescription>
<para>Clean up unit and upgrade dependencies. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/depend.cpp" line="384" column="6" bodyfile="src/unit/depend.cpp" bodystart="384" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="depend_8cpp_1a0edb5d58cbb590ebd8c3db8c4b913819" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int CclDefineDependency</definition>
        <argsstring>(lua_State *l)</argsstring>
        <name>CclDefineDependency</name>
        <param>
          <type>lua_State *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define a new dependency.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/depend.cpp" line="424" column="12" bodyfile="src/unit/depend.cpp" bodystart="424" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="depend_8cpp_1a27756ef1634284b744eda4bac766b219" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int CclGetDependency</definition>
        <argsstring>(lua_State *l)</argsstring>
        <name>CclGetDependency</name>
        <param>
          <type>lua_State *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the dependency.</para>
<para><xrefsect id="todo_1_todo000092"><xreftitle>Todo</xreftitle><xrefdescription><para>not written.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/depend.cpp" line="471" column="12" bodyfile="src/unit/depend.cpp" bodystart="471" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="depend_8cpp_1a66201eee1d18668eddaaa2b1081ada46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int CclCheckDependency</definition>
        <argsstring>(lua_State *l)</argsstring>
        <name>CclCheckDependency</name>
        <param>
          <type>lua_State *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if dependencies are met.</para>
<para><simplesect kind="return"><para>true if the dependencies are met.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua state. Argument 1: player Argument 2: object which we want to check the dependencies of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/depend.cpp" line="487" column="12" bodyfile="src/unit/depend.cpp" bodystart="487" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="depend_8cpp_1acd906971151c8787452475da67b7d673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void DependenciesCclRegister</definition>
        <argsstring>()</argsstring>
        <name>DependenciesCclRegister</name>
        <briefdescription>
<para>Register CCL features for dependencies. </para>
        </briefdescription>
        <detaileddescription>
<para>Register CCL features for dependencies. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/unit/depend.cpp" line="505" column="6" bodyfile="src/unit/depend.cpp" bodystart="505" bodyend="510"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/unit/depend.cpp"/>
  </compounddef>
</doxygen>
