<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ai__building_8cpp" kind="file" language="C++">
    <compoundname>ai_building.cpp</compoundname>
    <includes refid="stratagus_8h" local="yes">stratagus.h</includes>
    <includes refid="ai__local_8h" local="yes">ai_local.h</includes>
    <includes refid="map_8h" local="yes">map.h</includes>
    <includes refid="pathfinder_8h" local="yes">pathfinder.h</includes>
    <includes refid="player_8h" local="yes">player.h</includes>
    <includes refid="tileset_8h" local="yes">tileset.h</includes>
    <includes refid="unit_8h" local="yes">unit.h</includes>
    <includes refid="unit__find_8h" local="yes">unit_find.h</includes>
    <includes refid="unittype_8h" local="yes">unittype.h</includes>
    <incdepgraph>
      <node id="11">
        <label>upgrade_structs.h</label>
        <link refid="upgrade__structs_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>queue</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="4">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>stdint.h</label>
      </node>
      <node id="19">
        <label>pathfinder.h</label>
        <link refid="pathfinder_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="30">
        <label>map</label>
      </node>
      <node id="12">
        <label>unit_cache.h</label>
        <link refid="unit__cache_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ai_local.h</label>
        <link refid="ai__local_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
      <node id="28">
        <label>missileconfig.h</label>
        <link refid="missileconfig_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="1">
        <label>src/ai/ai_building.cpp</label>
        <link refid="ai__building_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stratagus.h</label>
        <link refid="stratagus_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>color.h</label>
        <link refid="include_2color_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>unitsound.h</label>
        <link refid="unitsound_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>icons.h</label>
        <link refid="icons_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstdlib</label>
      </node>
      <node id="29">
        <label>climits</label>
      </node>
      <node id="15">
        <label>map.h</label>
        <link refid="map_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>vec2i.h</label>
        <link refid="vec2i_8h"/>
      </node>
      <node id="24">
        <label>unit.h</label>
        <link refid="unit_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>tileset.h</label>
        <link refid="tileset_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>tile.h</label>
        <link refid="tile_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>unit_find.h</label>
        <link refid="unit__find_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>set</label>
      </node>
      <node id="25">
        <label>unittype.h</label>
        <link refid="unittype_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>algorithm</label>
      </node>
      <node id="21">
        <label>player.h</label>
        <link refid="player_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classBuildingPlaceFinder" prot="public">BuildingPlaceFinder</innerclass>
    <innerclass refid="classHallPlaceFinder" prot="public">HallPlaceFinder</innerclass>
    <innerclass refid="classLumberMillPlaceFinder" prot="public">LumberMillPlaceFinder</innerclass>
      <sectiondef kind="user-defined">
      <header>ai_building.cpp - AI building functions.</header>
      <memberdef kind="function" id="ai__building_8cpp_1af7472d35eae2dabbe8092dbc3f0de0d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsPosFree</definition>
        <argsstring>(const Vec2i &amp;pos, const CUnit &amp;exceptionUnit)</argsstring>
        <name>IsPosFree</name>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>exceptionUnit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_building.cpp" line="56" column="13" bodyfile="src/ai/ai_building.cpp" bodystart="56" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="ai__building_8cpp_1a3d4112ff6007a4a460d523a25d49890c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool AiCheckSurrounding</definition>
        <argsstring>(const CUnit &amp;worker, const CUnitType &amp;type, const Vec2i &amp;pos, bool &amp;backupok)</argsstring>
        <name>AiCheckSurrounding</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>worker</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>backupok</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the surrounding are free. Depending on the value of flag, it will check : 0: the building will not block any way 1: all surrounding is free</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker to build. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map tile position for the building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>backupok</parametername>
</parameternamelist>
<parameterdescription>
<para>Location can be used as a backup</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the surrounding is free, false otherwise.</para>
</simplesect>
<simplesect kind="note"><para>Can be faster written. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_building.cpp" line="88" column="13" bodyfile="src/ai/ai_building.cpp" bodystart="88" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="ai__building_8cpp_1a8edb5f332859669c165db6c71d7cbaf8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool AiFindBuildingPlace2</definition>
        <argsstring>(const CUnit &amp;worker, const CUnitType &amp;type, const Vec2i &amp;startPos, const CUnit *startUnit, bool checkSurround, Vec2i *resultPos)</argsstring>
        <name>AiFindBuildingPlace2</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>worker</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>startPos</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>startUnit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkSurround</declname>
        </param>
        <param>
          <type><ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> *</type>
          <declname>resultPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find free building place. (flood fill version)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker to build building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Original position to try building </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checkSurround</parametername>
</parameternamelist>
<parameterdescription>
<para>Check if the perimeter of the building is free </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultPos</parametername>
</parameternamelist>
<parameterdescription>
<para>OUT: Pointer for position returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if place found, false if no found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_building.cpp" line="203" column="13" bodyfile="src/ai/ai_building.cpp" bodystart="203" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="ai__building_8cpp_1a1bea943247b6307fdf80f49da5bcd76f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool AiFindHallPlace</definition>
        <argsstring>(const CUnit &amp;worker, const CUnitType &amp;type, const Vec2i &amp;startPos, int resource, Vec2i *resultPos)</argsstring>
        <name>AiFindHallPlace</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>worker</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>startPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>resource</declname>
        </param>
        <param>
          <type><ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> *</type>
          <declname>resultPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find building place for hall. (flood fill version)</para>
<para>The best place: 1) near to resource. !2) near to wood. !3) near to worker and must be reachable. 4) no enemy near it. 5) no hall already near !6) enough gold in mine</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker to build building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Start search position (if == -1 then unit X pos used). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>resource to be near. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultPos</parametername>
</parameternamelist>
<parameterdescription>
<para>OUT: Pointer for position returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if place found, false if not found.</para>
</simplesect>
<xrefsect id="todo_1_todo000007"><xreftitle>Todo</xreftitle><xrefdescription><para>FIXME: This is slow really slow, using two flood fills, is not a perfect solution. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_building.cpp" line="323" column="13" bodyfile="src/ai/ai_building.cpp" bodystart="323" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="ai__building_8cpp_1a02eca5139674aa248212fc415919f553" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool AiFindLumberMillPlace</definition>
        <argsstring>(const CUnit &amp;worker, const CUnitType &amp;type, const Vec2i &amp;startPos, int resource, Vec2i *resultPos)</argsstring>
        <name>AiFindLumberMillPlace</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>worker</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>startPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>resource</declname>
        </param>
        <param>
          <type><ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> *</type>
          <declname>resultPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find free building place for lumber mill. (flood fill version)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker to build building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>resource terrain to be near. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Start search X position (if == -1 then unit X pos used). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultPos</parametername>
</parameternamelist>
<parameterdescription>
<para>OUT: Pointer for position returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if place found, false if not found.</para>
</simplesect>
<xrefsect id="todo_1_todo000008"><xreftitle>Todo</xreftitle><xrefdescription><para>FIXME: This is slow really slow, using two flood fills, is not a perfect solution. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_building.cpp" line="395" column="13" bodyfile="src/ai/ai_building.cpp" bodystart="395" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="ai__building_8cpp_1af543e4aed990f28c90a6bbee60a24d12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool AiFindMiningPlace</definition>
        <argsstring>(const CUnit &amp;worker, const CUnitType &amp;type, const Vec2i &amp;startPos, int resource, Vec2i *resultPos)</argsstring>
        <name>AiFindMiningPlace</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>worker</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>startPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>resource</declname>
        </param>
        <param>
          <type><ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> *</type>
          <declname>resultPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_building.cpp" line="410" column="13" bodyfile="src/ai/ai_building.cpp" bodystart="410" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="ai__building_8cpp_1ae707944a0a8aa354fda31c55f83d301b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AiFindBuildingPlace</definition>
        <argsstring>(const CUnit &amp;worker, const CUnitType &amp;type, const Vec2i &amp;nearPos, Vec2i *resultPos)</argsstring>
        <name>AiFindBuildingPlace</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>worker</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>nearPos</declname>
        </param>
        <param>
          <type><ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> *</type>
          <declname>resultPos</declname>
        </param>
        <briefdescription>
<para>Find nice building place. </para>
        </briefdescription>
        <detaileddescription>
<para>Find free building place.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker to build building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nearPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Start search near nearPos position (or worker-&gt;X if nearPos is invalid). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer for position returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if place found, false if no found.</para>
</simplesect>
<xrefsect id="todo_1_todo000009"><xreftitle>Todo</xreftitle><xrefdescription><para>Better and faster way to find building place of oil platforms Special routines for special buildings. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ai/ai_building.cpp" line="433" column="6" bodyfile="src/ai/ai_building.cpp" bodystart="433" bodyend="465"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/ai/ai_building.cpp"/>
  </compounddef>
</doxygen>
