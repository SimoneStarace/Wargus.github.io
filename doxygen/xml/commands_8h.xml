<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="commands_8h" kind="file" language="C++">
    <compoundname>commands.h</compoundname>
    <includes refid="vec2i_8h" local="yes">vec2i.h</includes>
    <includedby refid="action__board_8cpp" local="yes">src/action/action_board.cpp</includedby>
    <includedby refid="action__built_8cpp" local="yes">src/action/action_built.cpp</includedby>
    <includedby refid="action__still_8cpp" local="yes">src/action/action_still.cpp</includedby>
    <includedby refid="actions_8cpp" local="yes">src/action/actions.cpp</includedby>
    <includedby refid="command_8cpp" local="yes">src/action/command.cpp</includedby>
    <includedby refid="ai_8cpp" local="yes">src/ai/ai.cpp</includedby>
    <includedby refid="ai__force_8cpp" local="yes">src/ai/ai_force.cpp</includedby>
    <includedby refid="ai__plan_8cpp" local="yes">src/ai/ai_plan.cpp</includedby>
    <includedby refid="ai__resource_8cpp" local="yes">src/ai/ai_resource.cpp</includedby>
    <includedby refid="animation__spawnunit_8cpp" local="yes">src/animation/animation_spawnunit.cpp</includedby>
    <includedby refid="editloop_8cpp" local="yes">src/editor/editloop.cpp</includedby>
    <includedby refid="game_8cpp" local="yes">src/game/game.cpp</includedby>
    <includedby refid="loadgame_8cpp" local="yes">src/game/loadgame.cpp</includedby>
    <includedby refid="replay_8cpp" local="yes">src/game/replay.cpp</includedby>
    <includedby refid="commands_8cpp" local="yes">src/network/commands.cpp</includedby>
    <includedby refid="network_8cpp" local="yes">src/network/network.cpp</includedby>
    <includedby refid="spell__capture_8cpp" local="yes">src/spell/spell_capture.cpp</includedby>
    <includedby refid="spell__summon_8cpp" local="yes">src/spell/spell_summon.cpp</includedby>
    <includedby refid="spells_8cpp" local="yes">src/spell/spells.cpp</includedby>
    <includedby refid="script__player_8cpp" local="yes">src/stratagus/script_player.cpp</includedby>
    <includedby refid="selection_8cpp" local="yes">src/stratagus/selection.cpp</includedby>
    <includedby refid="botpanel_8cpp" local="yes">src/ui/botpanel.cpp</includedby>
    <includedby refid="interface_8cpp" local="yes">src/ui/interface.cpp</includedby>
    <includedby refid="mouse_8cpp" local="yes">src/ui/mouse.cpp</includedby>
    <includedby refid="script__unit_8cpp" local="yes">src/unit/script_unit.cpp</includedby>
    <includedby refid="unit_8cpp" local="yes">src/unit/unit.cpp</includedby>
    <includedby refid="upgrade_8cpp" local="yes">src/unit/upgrade.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>vec2i.h</label>
        <link refid="vec2i_8h"/>
      </node>
      <node id="1">
        <label>src/include/commands.h</label>
        <link refid="commands_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="25">
        <label>src/ui/mouse.cpp</label>
        <link refid="mouse_8cpp"/>
      </node>
      <node id="4">
        <label>src/action/action_still.cpp</label>
        <link refid="action__still_8cpp"/>
      </node>
      <node id="8">
        <label>src/ai/ai_force.cpp</label>
        <link refid="ai__force_8cpp"/>
      </node>
      <node id="23">
        <label>src/ui/botpanel.cpp</label>
        <link refid="botpanel_8cpp"/>
      </node>
      <node id="19">
        <label>src/spell/spell_summon.cpp</label>
        <link refid="spell__summon_8cpp"/>
      </node>
      <node id="7">
        <label>src/ai/ai.cpp</label>
        <link refid="ai_8cpp"/>
      </node>
      <node id="13">
        <label>src/game/game.cpp</label>
        <link refid="game_8cpp"/>
      </node>
      <node id="17">
        <label>src/network/network.cpp</label>
        <link refid="network_8cpp"/>
      </node>
      <node id="20">
        <label>src/spell/spells.cpp</label>
        <link refid="spells_8cpp"/>
      </node>
      <node id="27">
        <label>src/unit/unit.cpp</label>
        <link refid="unit_8cpp"/>
      </node>
      <node id="22">
        <label>src/stratagus/selection.cpp</label>
        <link refid="selection_8cpp"/>
      </node>
      <node id="14">
        <label>src/game/loadgame.cpp</label>
        <link refid="loadgame_8cpp"/>
      </node>
      <node id="26">
        <label>src/unit/script_unit.cpp</label>
        <link refid="script__unit_8cpp"/>
      </node>
      <node id="24">
        <label>src/ui/interface.cpp</label>
        <link refid="interface_8cpp"/>
      </node>
      <node id="10">
        <label>src/ai/ai_resource.cpp</label>
        <link refid="ai__resource_8cpp"/>
      </node>
      <node id="21">
        <label>src/stratagus/script_player.cpp</label>
        <link refid="script__player_8cpp"/>
      </node>
      <node id="9">
        <label>src/ai/ai_plan.cpp</label>
        <link refid="ai__plan_8cpp"/>
      </node>
      <node id="5">
        <label>src/action/actions.cpp</label>
        <link refid="actions_8cpp"/>
      </node>
      <node id="11">
        <label>src/animation/animation_spawnunit.cpp</label>
        <link refid="animation__spawnunit_8cpp"/>
      </node>
      <node id="12">
        <label>src/editor/editloop.cpp</label>
        <link refid="editloop_8cpp"/>
      </node>
      <node id="28">
        <label>src/unit/upgrade.cpp</label>
        <link refid="upgrade_8cpp"/>
      </node>
      <node id="2">
        <label>src/action/action_board.cpp</label>
        <link refid="action__board_8cpp"/>
      </node>
      <node id="3">
        <label>src/action/action_built.cpp</label>
        <link refid="action__built_8cpp"/>
      </node>
      <node id="18">
        <label>src/spell/spell_capture.cpp</label>
        <link refid="spell__capture_8cpp"/>
      </node>
      <node id="15">
        <label>src/game/replay.cpp</label>
        <link refid="replay_8cpp"/>
      </node>
      <node id="16">
        <label>src/network/commands.cpp</label>
        <link refid="commands_8cpp"/>
      </node>
      <node id="6">
        <label>src/action/command.cpp</label>
        <link refid="command_8cpp"/>
      </node>
      <node id="1">
        <label>src/include/commands.h</label>
        <link refid="commands_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <header>commands.h - The commands header file.</header>
      <memberdef kind="define" id="commands_8h_1ae1127fd2f367b66b51ddbf8c8e2f1b83" prot="public" static="no">
        <name>FlushCommands</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="196" column="9" bodyfile="src/include/commands.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="commands_8h_1ae350cf68a702e512615ec05d9e1f6ac4" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short UnitRef</definition>
        <argsstring></argsstring>
        <name>UnitRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unit references over network, or for memory saving. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="129" column="24" bodyfile="src/include/commands.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a4b12a07f9e58bdfb64389c3335acb59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandQuit</definition>
        <argsstring>(int player)</argsstring>
        <name>CommandQuit</name>
        <param>
          <type>int</type>
          <declname>player</declname>
        </param>
        <briefdescription>
<para>Prepare command quit. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gives a unit a new command. If the command is given by the user the function with Send prefix should be used.</para>
<para>Player quit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>Player number that quit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="60" column="13" bodyfile="src/action/command.cpp" bodystart="971" bodyend="995" declfile="src/include/commands.h" declline="60" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a447e331da43b577e4088c42d374b8cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandStopUnit</definition>
        <argsstring>(CUnit &amp;unit)</argsstring>
        <name>CommandStopUnit</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Prepare command stop. </para>
        </briefdescription>
        <detaileddescription>
<para>Stop unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="62" column="13" bodyfile="src/action/command.cpp" bodystart="163" bodyend="173" declfile="src/include/commands.h" declline="62" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a0c911fb6f537a08150b861a479d6d64c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandStandGround</definition>
        <argsstring>(CUnit &amp;unit, int flush)</argsstring>
        <name>CommandStandGround</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command stand ground. </para>
        </briefdescription>
        <detaileddescription>
<para>Stand ground.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="64" column="13" bodyfile="src/action/command.cpp" bodystart="181" bodyend="196" declfile="src/include/commands.h" declline="64" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a01dd82b51e33e5cba757535c97d9b20f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandDefend</definition>
        <argsstring>(CUnit &amp;unit, CUnit &amp;dest, int flush)</argsstring>
        <name>CommandDefend</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command defend. </para>
        </briefdescription>
        <detaileddescription>
<para>Follow unit and defend it</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>unit to follow </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="66" column="13" bodyfile="src/action/command.cpp" bodystart="205" bodyend="223" declfile="src/include/commands.h" declline="66" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a2f9425cd5c83987d0d677d8bb817f531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandFollow</definition>
        <argsstring>(CUnit &amp;unit, CUnit &amp;dest, int flush)</argsstring>
        <name>CommandFollow</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command follow. </para>
        </briefdescription>
        <detaileddescription>
<para>Follow unit to new position</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>unit to be followed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="68" column="13" bodyfile="src/action/command.cpp" bodystart="232" bodyend="250" declfile="src/include/commands.h" declline="68" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1aa85837bff105908c0c9bc897fa8b980e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandMove</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, int flush)</argsstring>
        <name>CommandMove</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command move. </para>
        </briefdescription>
        <detaileddescription>
<para>Move unit to new position</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map position to move to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="70" column="13" bodyfile="src/action/command.cpp" bodystart="259" bodyend="279" declfile="src/include/commands.h" declline="70" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a12eb3ddde5ad077ce0098c8c1674512d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandRepair</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, CUnit *dest, int flush)</argsstring>
        <name>CommandRepair</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command repair. </para>
        </briefdescription>
        <detaileddescription>
<para>Repair unit</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map position to repair. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>or unit to be repaired. FIXME: not supported </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="72" column="13" bodyfile="src/action/command.cpp" bodystart="289" bodyend="311" declfile="src/include/commands.h" declline="72" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1acde207f0d6358fbb0c62dcce193be9c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandAutoRepair</definition>
        <argsstring>(CUnit &amp;unit, int on)</argsstring>
        <name>CommandAutoRepair</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>on</declname>
        </param>
        <briefdescription>
<para>Send auto repair command. </para>
        </briefdescription>
        <detaileddescription>
<para>Auto repair.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>1 for auto repair on, 0 for off. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="74" column="13" bodyfile="src/action/command.cpp" bodystart="319" bodyend="325" declfile="src/include/commands.h" declline="74" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a3d200971776180ed9d3b50d913a45d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandAttack</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, CUnit *dest, int flush)</argsstring>
        <name>CommandAttack</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>dest</declname>
          <defname>target</defname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command attack. </para>
        </briefdescription>
        <detaileddescription>
<para>Attack with unit at new position</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map position to attack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>or unit to be attacked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="76" column="13" bodyfile="src/action/command.cpp" bodystart="335" bodyend="359" declfile="src/include/commands.h" declline="76" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a152b44b9f6e7f9eefa59ee047a977c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandAttackGround</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, int flush)</argsstring>
        <name>CommandAttackGround</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command attack ground. </para>
        </briefdescription>
        <detaileddescription>
<para>Attack ground with unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map position to fire on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="78" column="13" bodyfile="src/action/command.cpp" bodystart="368" bodyend="388" declfile="src/include/commands.h" declline="78" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1aaf46039b4547e531166e0905782f2a77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandPatrolUnit</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, int flush)</argsstring>
        <name>CommandPatrolUnit</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command patrol. </para>
        </briefdescription>
        <detaileddescription>
<para>Let a unit patrol from current to new position</para>
<para>FIXME: want to support patroling between units.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map position to patrol between. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="80" column="13" bodyfile="src/action/command.cpp" bodystart="399" bodyend="433" declfile="src/include/commands.h" declline="80" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1ad14b45afc0c356a36f421a0b867bef66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandBoard</definition>
        <argsstring>(CUnit &amp;unit, CUnit &amp;dest, int flush)</argsstring>
        <name>CommandBoard</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command board. </para>
        </briefdescription>
        <detaileddescription>
<para>Board a transporter with unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>unit to be boarded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="82" column="13" bodyfile="src/action/command.cpp" bodystart="442" bodyend="463" declfile="src/include/commands.h" declline="82" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1af9e0b0f874e91291ef54a47f73ed19e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandUnload</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, CUnit *what, int flush)</argsstring>
        <name>CommandUnload</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>what</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command unload. </para>
        </briefdescription>
        <detaileddescription>
<para>Unload a transporter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map position to unload. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>unit to be unloaded, NULL for all. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="84" column="13" bodyfile="src/action/command.cpp" bodystart="473" bodyend="485" declfile="src/include/commands.h" declline="84" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a8d70f0f2532cebc26f5dcb070f021453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandBuildBuilding</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, CUnitType &amp;, int flush)</argsstring>
        <name>CommandBuildBuilding</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <defname>what</defname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command build. </para>
        </briefdescription>
        <detaileddescription>
<para>Send a unit building</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map position to build. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit type to build. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="86" column="13" bodyfile="src/action/command.cpp" bodystart="495" bodyend="513" declfile="src/include/commands.h" declline="86" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1aac16d274a815568b6daa82233e8b70d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandExplore</definition>
        <argsstring>(CUnit &amp;unit, int flush)</argsstring>
        <name>CommandExplore</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command explore. </para>
        </briefdescription>
        <detaileddescription>
<para>Send a unit exploring</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="88" column="13" bodyfile="src/action/command.cpp" bodystart="521" bodyend="540" declfile="src/include/commands.h" declline="88" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1afcbace3c8c5ccf0de600bfd92b46d2cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandDismiss</definition>
        <argsstring>(CUnit &amp;unit)</argsstring>
        <name>CommandDismiss</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Prepare command dismiss. </para>
        </briefdescription>
        <detaileddescription>
<para>Cancel the building construction, or kill a unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="90" column="13" bodyfile="src/action/command.cpp" bodystart="547" bodyend="557" declfile="src/include/commands.h" declline="90" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a5915704748125d8432735ee4c02fc9ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandResourceLoc</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, int flush)</argsstring>
        <name>CommandResourceLoc</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command resource location. </para>
        </briefdescription>
        <detaileddescription>
<para>Send unit harvest a location</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map position for harvest. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="92" column="13" bodyfile="src/action/command.cpp" bodystart="566" bodyend="588" declfile="src/include/commands.h" declline="92" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1ab1db26eb8b4196619eac025ac42ca12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandResource</definition>
        <argsstring>(CUnit &amp;unit, CUnit &amp;dest, int flush)</argsstring>
        <name>CommandResource</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command resource. </para>
        </briefdescription>
        <detaileddescription>
<para>Send unit to harvest resources</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>destination unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="94" column="13" bodyfile="src/action/command.cpp" bodystart="597" bodyend="622" declfile="src/include/commands.h" declline="94" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1ad56f5074d2d9d8f1a4e67740f8f04113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandReturnGoods</definition>
        <argsstring>(CUnit &amp;unit, CUnit *depot, int flush)</argsstring>
        <name>CommandReturnGoods</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>depot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command return. </para>
        </briefdescription>
        <detaileddescription>
<para>Let unit returning goods.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depot</parametername>
</parameternamelist>
<parameterdescription>
<para>bring goods to this depot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="96" column="13" bodyfile="src/action/command.cpp" bodystart="631" bodyend="654" declfile="src/include/commands.h" declline="96" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a339372f725fdaacb1c33b5f31a52aedf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandTrainUnit</definition>
        <argsstring>(CUnit &amp;unit, CUnitType &amp;what, int flush)</argsstring>
        <name>CommandTrainUnit</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>what</declname>
          <defname>type</defname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command train. </para>
        </briefdescription>
        <detaileddescription>
<para>Building starts training an unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>unit type to train. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="98" column="13" bodyfile="src/action/command.cpp" bodystart="663" bodyend="688" declfile="src/include/commands.h" declline="98" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a141d6dd814f21a999af6a0c8987b6d32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandCancelTraining</definition>
        <argsstring>(CUnit &amp;unit, int slot, const CUnitType *type)</argsstring>
        <name>CommandCancelTraining</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Prepare command cancel training. </para>
        </briefdescription>
        <detaileddescription>
<para>Cancel the training of an unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>slot number to cancel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit-type to cancel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="100" column="13" bodyfile="src/action/command.cpp" bodystart="697" bodyend="735" declfile="src/include/commands.h" declline="100" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1aac52972472194478178b435848d33235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandUpgradeTo</definition>
        <argsstring>(CUnit &amp;unit, CUnitType &amp;what, int flush)</argsstring>
        <name>CommandUpgradeTo</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>what</declname>
          <defname>type</defname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command upgrade to. </para>
        </briefdescription>
        <detaileddescription>
<para>Building starts upgrading to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>upgrade to type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="102" column="13" bodyfile="src/action/command.cpp" bodystart="744" bodyend="762" declfile="src/include/commands.h" declline="102" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a51f6a8eb4d941ef70c858ac8f20e7987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandTransformIntoType</definition>
        <argsstring>(CUnit &amp;unit, CUnitType &amp;type)</argsstring>
        <name>CommandTransformIntoType</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>immediate transforming into type. </para>
        </briefdescription>
        <detaileddescription>
<para>Immediate transforming unit into type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>upgrade to type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="104" column="13" bodyfile="src/action/command.cpp" bodystart="770" bodyend="778" declfile="src/include/commands.h" declline="104" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a65b6798dcd29f298cc25cbe0205ca726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandCancelUpgradeTo</definition>
        <argsstring>(CUnit &amp;unit)</argsstring>
        <name>CommandCancelUpgradeTo</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Prepare command cancel upgrade to. </para>
        </briefdescription>
        <detaileddescription>
<para>Cancel building upgrading to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="106" column="13" bodyfile="src/action/command.cpp" bodystart="785" bodyend="796" declfile="src/include/commands.h" declline="106" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1abbe0a07fe0a1c42fe1305538c662dafa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandResearch</definition>
        <argsstring>(CUnit &amp;unit, CUpgrade &amp;what, int flush)</argsstring>
        <name>CommandResearch</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUpgrade" kindref="compound">CUpgrade</ref> &amp;</type>
          <declname>what</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Prepare command research. </para>
        </briefdescription>
        <detaileddescription>
<para>Building starts researching.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>what to research. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="108" column="13" bodyfile="src/action/command.cpp" bodystart="805" bodyend="820" declfile="src/include/commands.h" declline="108" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a7353cf3ec35112fe2ccafba2dc7f2321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandCancelResearch</definition>
        <argsstring>(CUnit &amp;unit)</argsstring>
        <name>CommandCancelResearch</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Prepare command cancel research. </para>
        </briefdescription>
        <detaileddescription>
<para>Cancel Building researching.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="110" column="13" bodyfile="src/action/command.cpp" bodystart="827" bodyend="838" declfile="src/include/commands.h" declline="110" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1ad74dbac64f9d5ad51c774e8e2b5a5d2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandSpellCast</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, CUnit *dest, const SpellType &amp;spell, int flush, bool isAutocast=false)</argsstring>
        <name>CommandSpellCast</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classSpellType" kindref="compound">SpellType</ref> &amp;</type>
          <declname>spell</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isAutocast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Prepare command spellcast. </para>
        </briefdescription>
        <detaileddescription>
<para>Cast a spell at position or unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map position to spell cast on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Spell cast on unit (if exist). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spell</parametername>
</parameternamelist>
<parameterdescription>
<para>Spell type pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, flush command queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="112" column="13" bodyfile="src/action/command.cpp" bodystart="849" bodyend="867" declfile="src/include/commands.h" declline="112" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a9fed5c48e9d7ec438a2ea69683690ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandAutoSpellCast</definition>
        <argsstring>(CUnit &amp;unit, int spellid, int on)</argsstring>
        <name>CommandAutoSpellCast</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>spellid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>on</declname>
        </param>
        <briefdescription>
<para>Prepare command auto spellcast. </para>
        </briefdescription>
        <detaileddescription>
<para>Auto spell cast.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spellid</parametername>
</parameternamelist>
<parameterdescription>
<para>Spell id. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>1 for auto cast on, 0 for off. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="114" column="13" bodyfile="src/action/command.cpp" bodystart="876" bodyend="882" declfile="src/include/commands.h" declline="114" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a70e3c5c479ea8cb92ed067199391e4cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandDiplomacy</definition>
        <argsstring>(int player, int state, int opponent)</argsstring>
        <name>CommandDiplomacy</name>
        <param>
          <type>int</type>
          <declname>player</declname>
        </param>
        <param>
          <type>int</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opponent</declname>
        </param>
        <briefdescription>
<para>Prepare diplomacy command. </para>
        </briefdescription>
        <detaileddescription>
<para>Diplomacy changed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>Player which changes his state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>New diplomacy state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Opponent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="116" column="13" bodyfile="src/action/command.cpp" bodystart="891" bodyend="907" declfile="src/include/commands.h" declline="116" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a5aaedf63108fab622b22a88e467c66ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CommandSharedVision</definition>
        <argsstring>(int player, bool state, int opponent)</argsstring>
        <name>CommandSharedVision</name>
        <param>
          <type>int</type>
          <declname>player</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opponent</declname>
        </param>
        <briefdescription>
<para>Prepare shared vision command. </para>
        </briefdescription>
        <detaileddescription>
<para>Shared vision changed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>Player which changes his state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>New shared vision state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Opponent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="118" column="13" bodyfile="src/action/command.cpp" bodystart="916" bodyend="964" declfile="src/include/commands.h" declline="118" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1af23058671133f2708df7e2b22e0886d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandStopUnit</definition>
        <argsstring>(CUnit &amp;unit)</argsstring>
        <name>SendCommandStopUnit</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Send stop command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit stop.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="132" column="13" bodyfile="src/network/commands.cpp" bodystart="58" bodyend="66" declfile="src/include/commands.h" declline="132" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a9c7a5d3cf3d7b29962facefa29d19739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandStandGround</definition>
        <argsstring>(CUnit &amp;unit, int flush)</argsstring>
        <name>SendCommandStandGround</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send stand ground command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit stand ground.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="134" column="13" bodyfile="src/network/commands.cpp" bodystart="74" bodyend="82" declfile="src/include/commands.h" declline="134" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1ac25b63eb4e0e73bb70faeb3bba83e4f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandDefend</definition>
        <argsstring>(CUnit &amp;unit, CUnit &amp;dest, int flush)</argsstring>
        <name>SendCommandDefend</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send defend command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Defend some unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>defend this unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="136" column="13" bodyfile="src/network/commands.cpp" bodystart="91" bodyend="99" declfile="src/include/commands.h" declline="136" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a84e76ff4c9a2bf853abec8db3ff6a4a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandFollow</definition>
        <argsstring>(CUnit &amp;unit, CUnit &amp;dest, int flush)</argsstring>
        <name>SendCommandFollow</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send follow command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Follow unit to position.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>follow this unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="138" column="13" bodyfile="src/network/commands.cpp" bodystart="108" bodyend="116" declfile="src/include/commands.h" declline="138" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1aab29a739977262a5e50d85caf77988cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandMove</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, int flush)</argsstring>
        <name>SendCommandMove</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send move command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Move unit to position.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map tile position to move to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="140" column="13" bodyfile="src/network/commands.cpp" bodystart="125" bodyend="133" declfile="src/include/commands.h" declline="140" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1af9727005ec8f2209d3e189a5d71caae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandRepair</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, CUnit *dest, int flush)</argsstring>
        <name>SendCommandRepair</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send repair command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit repair.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map tile position to repair. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit to be repaired. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="142" column="13" bodyfile="src/network/commands.cpp" bodystart="143" bodyend="151" declfile="src/include/commands.h" declline="142" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a89b65f322033c8af7d829e96d0e414d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandAutoRepair</definition>
        <argsstring>(CUnit &amp;unit, int on)</argsstring>
        <name>SendCommandAutoRepair</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>on</declname>
        </param>
        <briefdescription>
<para>Send auto repair command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit auto repair.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>1 for auto repair on, 0 for off. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="144" column="13" bodyfile="src/network/commands.cpp" bodystart="159" bodyend="167" declfile="src/include/commands.h" declline="144" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1abde34c281ee2dbe44dff1fa67c7872ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandAttack</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, CUnit *dest, int flush)</argsstring>
        <name>SendCommandAttack</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>dest</declname>
          <defname>attack</defname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send attack command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit attack unit or at position.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map tile position to attack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attack</parametername>
</parameternamelist>
<parameterdescription>
<para>or !=NoUnitP unit to be attacked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="146" column="13" bodyfile="src/network/commands.cpp" bodystart="177" bodyend="185" declfile="src/include/commands.h" declline="146" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1aa696d48497dfebc814be913179b2c7d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandAttackGround</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, int flush)</argsstring>
        <name>SendCommandAttackGround</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send attack ground command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit attack ground.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map tile position to fire on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="148" column="13" bodyfile="src/network/commands.cpp" bodystart="194" bodyend="202" declfile="src/include/commands.h" declline="148" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a9df93f0f058853f149d601245955ff35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandPatrol</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, int flush)</argsstring>
        <name>SendCommandPatrol</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send patrol command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit patrol between current and position.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map tile position to patrol between. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="150" column="13" bodyfile="src/network/commands.cpp" bodystart="211" bodyend="219" declfile="src/include/commands.h" declline="150" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1aa8e65fabab30f6b8c629b4634d75adec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandBoard</definition>
        <argsstring>(CUnit &amp;unit, CUnit &amp;dest, int flush)</argsstring>
        <name>SendCommandBoard</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send board command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit board unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination to be boarded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="152" column="13" bodyfile="src/network/commands.cpp" bodystart="228" bodyend="236" declfile="src/include/commands.h" declline="152" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a91519843b92d1cf4265d5e5340090a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandUnload</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, CUnit *what, int flush)</argsstring>
        <name>SendCommandUnload</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>what</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send unload command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit unload unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map tile position of unload. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagier to be unloaded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="154" column="13" bodyfile="src/network/commands.cpp" bodystart="246" bodyend="254" declfile="src/include/commands.h" declline="154" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a292187ff68ff89834de46e1d0071e857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandBuildBuilding</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, CUnitType &amp;what, int flush)</argsstring>
        <name>SendCommandBuildBuilding</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>what</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send build building command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit builds building at position.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map tile position of construction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit-type of the building. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="156" column="13" bodyfile="src/network/commands.cpp" bodystart="264" bodyend="272" declfile="src/include/commands.h" declline="156" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1afeabe54b5514010dd8d70e69e76249da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandExplore</definition>
        <argsstring>(CUnit &amp;unit, int flush)</argsstring>
        <name>SendCommandExplore</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send explore command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit explores the map.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="158" column="13" bodyfile="src/network/commands.cpp" bodystart="280" bodyend="288" declfile="src/include/commands.h" declline="158" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a07ebacf4c7a1b83ebe0da03dcea7ec3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandDismiss</definition>
        <argsstring>(CUnit &amp;unit)</argsstring>
        <name>SendCommandDismiss</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Send cancel building command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Cancel this building construction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="160" column="13" bodyfile="src/network/commands.cpp" bodystart="295" bodyend="304" declfile="src/include/commands.h" declline="160" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a5deeee5c302def9f67eb7005732486d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandResourceLoc</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, int flush)</argsstring>
        <name>SendCommandResourceLoc</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send harvest location command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit harvests a location (wood for now).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map tile position where to harvest. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="162" column="13" bodyfile="src/network/commands.cpp" bodystart="313" bodyend="321" declfile="src/include/commands.h" declline="162" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1ac76207be80e748d646b0f835d5b48d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandResource</definition>
        <argsstring>(CUnit &amp;unit, CUnit &amp;dest, int flush)</argsstring>
        <name>SendCommandResource</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send harvest command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit harvest resources</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination (oil-platform,gold mine). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="164" column="13" bodyfile="src/network/commands.cpp" bodystart="330" bodyend="338" declfile="src/include/commands.h" declline="164" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a0a140302afc683b9bc8a7261c40bd657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandReturnGoods</definition>
        <argsstring>(CUnit &amp;unit, CUnit *dest, int flush)</argsstring>
        <name>SendCommandReturnGoods</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>dest</declname>
          <defname>goal</defname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send return goods command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit return goods.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goal</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination of the goods. (NULL=search best) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="166" column="13" bodyfile="src/network/commands.cpp" bodystart="347" bodyend="355" declfile="src/include/commands.h" declline="166" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1abed42e82ce2e88370f69205a3d35465a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandTrainUnit</definition>
        <argsstring>(CUnit &amp;unit, CUnitType &amp;what, int flush)</argsstring>
        <name>SendCommandTrainUnit</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>what</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send train command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Building/unit train new unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit-type of the unit to be trained. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="168" column="13" bodyfile="src/network/commands.cpp" bodystart="364" bodyend="372" declfile="src/include/commands.h" declline="168" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1ad5dc529fba89294e0ffc0bc5bb1196cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandCancelTraining</definition>
        <argsstring>(CUnit &amp;unit, int slot, const CUnitType *type)</argsstring>
        <name>SendCommandCancelTraining</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>const <ref refid="classCUnitType" kindref="compound">CUnitType</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Send cancel training command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Cancel training.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>Slot of training queue to cancel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit-type of unit to cancel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="170" column="13" bodyfile="src/network/commands.cpp" bodystart="381" bodyend="391" declfile="src/include/commands.h" declline="170" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a5f3058610d8b7bac20482045aa63806d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandUpgradeTo</definition>
        <argsstring>(CUnit &amp;unit, CUnitType &amp;what, int flush)</argsstring>
        <name>SendCommandUpgradeTo</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUnitType" kindref="compound">CUnitType</ref> &amp;</type>
          <declname>what</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send upgrade to command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Building starts upgrading to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit-type of the unit upgrade. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="172" column="13" bodyfile="src/network/commands.cpp" bodystart="400" bodyend="408" declfile="src/include/commands.h" declline="172" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a3e6aa81c059948974b422faee74d014b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandCancelUpgradeTo</definition>
        <argsstring>(CUnit &amp;unit)</argsstring>
        <name>SendCommandCancelUpgradeTo</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Send cancel upgrade to command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Cancel building upgrading to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="174" column="13" bodyfile="src/network/commands.cpp" bodystart="415" bodyend="424" declfile="src/include/commands.h" declline="174" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1ab3ebd28fdc227195361f73bb7531c01c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandResearch</definition>
        <argsstring>(CUnit &amp;unit, CUpgrade &amp;what, int flush)</argsstring>
        <name>SendCommandResearch</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type><ref refid="classCUpgrade" kindref="compound">CUpgrade</ref> &amp;</type>
          <declname>what</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send research command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Building/unit research.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>research-type of the research. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="176" column="13" bodyfile="src/network/commands.cpp" bodystart="433" bodyend="442" declfile="src/include/commands.h" declline="176" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a4fb8d7a7bf313b6775acc1bf6d38f032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandCancelResearch</definition>
        <argsstring>(CUnit &amp;unit)</argsstring>
        <name>SendCommandCancelResearch</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Send cancel research command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Cancel Building/unit research.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="178" column="13" bodyfile="src/network/commands.cpp" bodystart="449" bodyend="458" declfile="src/include/commands.h" declline="178" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a34310f20ff3c2bdcb34e2437cb0532f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandSpellCast</definition>
        <argsstring>(CUnit &amp;unit, const Vec2i &amp;pos, CUnit *dest, int spellid, int flush)</argsstring>
        <name>SendCommandSpellCast</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const <ref refid="vec2i_8h_1a5824c689f07870d960ebe92af31f90a8" kindref="member">Vec2i</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>spellid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Send spell cast command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit spell cast on position/unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>map tile position where to cast spell. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Cast spell on unit (if exist). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spellid</parametername>
</parameternamelist>
<parameterdescription>
<para>Spell type id. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag flush all pending commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="180" column="13" bodyfile="src/network/commands.cpp" bodystart="469" bodyend="478" declfile="src/include/commands.h" declline="180" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1ae7a32870273c78546528ff23ffd75f54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandAutoSpellCast</definition>
        <argsstring>(CUnit &amp;unit, int spellid, int on)</argsstring>
        <name>SendCommandAutoSpellCast</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>spellid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>on</declname>
        </param>
        <briefdescription>
<para>Send auto spell cast command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Unit auto spell cast.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spellid</parametername>
</parameternamelist>
<parameterdescription>
<para>Spell type id. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>1 for auto cast on, 0 for off. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="182" column="13" bodyfile="src/network/commands.cpp" bodystart="487" bodyend="496" declfile="src/include/commands.h" declline="182" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a5265701c7163656719c320b17955e9fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandDiplomacy</definition>
        <argsstring>(int player, int state, int opponent)</argsstring>
        <name>SendCommandDiplomacy</name>
        <param>
          <type>int</type>
          <declname>player</declname>
        </param>
        <param>
          <type>int</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opponent</declname>
        </param>
        <briefdescription>
<para>Send diplomacy command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Diplomacy changed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>Player which changes his state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>New diplomacy state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Opponent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="184" column="13" bodyfile="src/network/commands.cpp" bodystart="505" bodyend="531" declfile="src/include/commands.h" declline="184" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a827f5d47d71a65ec49ceaaaefdb63f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void SendCommandSharedVision</definition>
        <argsstring>(int player, bool state, int opponent)</argsstring>
        <name>SendCommandSharedVision</name>
        <param>
          <type>int</type>
          <declname>player</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opponent</declname>
        </param>
        <briefdescription>
<para>Send shared vision command. </para>
        </briefdescription>
        <detaileddescription>
<para>Send command: Shared vision changed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>Player which changes his state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>New shared vision state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Opponent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="186" column="13" bodyfile="src/network/commands.cpp" bodystart="540" bodyend="555" declfile="src/include/commands.h" declline="186" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a467056fce89206da8807a420887eddb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void ExecCommand</definition>
        <argsstring>(unsigned char type, UnitRef unum, unsigned short x, unsigned short y, UnitRef dest)</argsstring>
        <name>ExecCommand</name>
        <param>
          <type>unsigned char</type>
          <declname>type</declname>
          <defname>msgnr</defname>
        </param>
        <param>
          <type><ref refid="commands_8h_1ae350cf68a702e512615ec05d9e1f6ac4" kindref="member">UnitRef</ref></type>
          <declname>unum</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>x</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="commands_8h_1ae350cf68a702e512615ec05d9e1f6ac4" kindref="member">UnitRef</ref></type>
          <declname>dest</declname>
          <defname>dstnr</defname>
        </param>
        <briefdescription>
<para>Execute a command (from network). </para>
        </briefdescription>
        <detaileddescription>
<para>Execute a command (from network).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Network message type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unum</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit number (slot) that receive the command. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>optional X map position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>optional y map position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstnr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional destination unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="189" column="13" bodyfile="src/network/commands.cpp" bodystart="575" bodyend="764" declfile="src/include/commands.h" declline="189" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a87d5e795dceba1c43abd5247a05f59a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void ExecExtendedCommand</definition>
        <argsstring>(unsigned char type, int status, unsigned char arg1, unsigned short arg2, unsigned short arg3, unsigned short arg4)</argsstring>
        <name>ExecExtendedCommand</name>
        <param>
          <type>unsigned char</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>arg2</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>arg3</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>arg4</declname>
        </param>
        <briefdescription>
<para>Execute an extended command (from network). </para>
        </briefdescription>
        <detaileddescription>
<para>Execute an extended command (from network).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Network extended message type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit 7 of message type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>Messe argument 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Messe argument 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg3</parametername>
</parameternamelist>
<parameterdescription>
<para>Messe argument 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg4</parametername>
</parameternamelist>
<parameterdescription>
<para>Messe argument 4 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/commands.h" line="192" column="13" bodyfile="src/network/commands.cpp" bodystart="784" bodyend="811" declfile="src/include/commands.h" declline="192" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/include/commands.h"/>
  </compounddef>
</doxygen>
