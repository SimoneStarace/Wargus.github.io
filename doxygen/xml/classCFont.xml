<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classCFont" kind="class" language="C++" prot="public">
    <compoundname>CFont</compoundname>
    <basecompoundref refid="classgcn_1_1Font" prot="public" virt="non-virtual">gcn::Font</basecompoundref>
    <includes refid="include_2font_8h" local="no">font.h</includes>
      <sectiondef kind="user-defined">
      <header>font.cpp - The color fonts.</header>
      <memberdef kind="function" id="classCFont_1a0ce15035dd095a1e9ce67d3e18639cd8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CFont::MeasureWidths</definition>
        <argsstring>()</argsstring>
        <name>MeasureWidths</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the width of each character </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="109" column="6" bodyfile="src/video/font.cpp" bodystart="776" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1a1e1d2d4b4d14c7004289291785d75728" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>CFont::~CFont</definition>
        <argsstring>()</argsstring>
        <name>~CFont</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="83" column="9" bodyfile="src/video/font.cpp" bodystart="402" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1afd83ea369191be1b4be0b35bd3255ce1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CFont::Height</definition>
        <argsstring>() const</argsstring>
        <name>Height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="88" column="5" bodyfile="src/video/font.cpp" bodystart="277" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1a5fd2d498f2f0d746e1302fe6062b9089" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CFont::Width</definition>
        <argsstring>(const std::string &amp;text) const</argsstring>
        <name>Width</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pixel width of text.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Text to calculate the width of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The width in pixels of the text. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="89" column="5" bodyfile="src/video/font.cpp" bodystart="345" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1a545de70a23bcf7e149410d3b2ac89885" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CFont::Width</definition>
        <argsstring>(const int number) const</argsstring>
        <name>Width</name>
        <param>
          <type>const int</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pixel width of text.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Text to calculate the width of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The width in pixels of the text. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="90" column="5" bodyfile="src/video/font.cpp" bodystart="295" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1aa077e80dfe0a9ce1cbc2fb2a3c264925" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CFont::IsLoaded</definition>
        <argsstring>() const</argsstring>
        <name>IsLoaded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="91" column="6" bodyfile="src/video/font.cpp" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1aa17a43babee3a8629a9bb6c525bd0caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CFont::drawString</definition>
        <argsstring>(gcn::Graphics *graphics, const std::string &amp;text, int x, int y, bool is_normal=true)</argsstring>
        <name>drawString</name>
        <reimplements refid="classgcn_1_1Font_1af26545b835fa5afd4f20d6a6bbab29b5">drawString</reimplements>
        <param>
          <type><ref refid="classgcn_1_1Graphics" kindref="compound">gcn::Graphics</ref> *</type>
          <declname>graphics</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_normal</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a string.</para>
<para>NOTE: You normally won&apos;t use this function to draw text since Graphics contains better functions for drawing text.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graphics</parametername>
</parameternamelist>
<parameterdescription>
<para>a Graphics object to use for drawing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate where to draw the string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate where to draw the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="95" column="14" bodyfile="src/video/font.cpp" bodystart="106" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1a1f3e41b9b38c23e15dfa5648b7e80ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CFont::Load</definition>
        <argsstring>()</argsstring>
        <name>Load</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="97" column="6" bodyfile="src/video/font.cpp" bodystart="813" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1a1ce97cb365f64c998a3851d488ea5fb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CFont::Reload</definition>
        <argsstring>() const</argsstring>
        <name>Reload</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="98" column="6" bodyfile="src/video/font.cpp" bodystart="850" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1a043f79e3ef43dacd6eba3aeec8aa4c57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CFont::Clean</definition>
        <argsstring>()</argsstring>
        <name>Clean</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="99" column="6" bodyfile="src/video/font.cpp" bodystart="962" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1a7fae81a246f9d1fc7147f149f1755295" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCGraphic" kindref="compound">CGraphic</ref> *</type>
        <definition>CGraphic * CFont::GetFontColorGraphic</definition>
        <argsstring>(const CFontColor &amp;fontColor) const</argsstring>
        <name>GetFontColorGraphic</name>
        <param>
          <type>const <ref refid="classCFontColor" kindref="compound">CFontColor</ref> &amp;</type>
          <declname>fontColor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="101" column="10" bodyfile="src/video/font.cpp" bodystart="455" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1ade2c502cefd51ca954e7fbb69644884f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>CLIP</declname>
            <defname>CLIP</defname>
          </param>
        </templateparamlist>
        <type>unsigned int</type>
        <definition>unsigned int CFont::DrawChar</definition>
        <argsstring>(CGraphic &amp;g, int utf8, int x, int y, const CFontColor &amp;fc) const</argsstring>
        <name>DrawChar</name>
        <param>
          <type><ref refid="classCGraphic" kindref="compound">CGraphic</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>utf8</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classCFontColor" kindref="compound">CFontColor</ref> &amp;</type>
          <declname>fc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="104" column="14" bodyfile="src/video/font.cpp" bodystart="434" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1af49d1fa7feb9a7c0e212e505d4120b4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void CFont::DynamicLoad</definition>
        <argsstring>() const</argsstring>
        <name>DynamicLoad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="106" column="6" bodyfile="src/video/font.cpp" bodystart="826" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1a188bf3156facce6de50b8686266ce3d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCFont" kindref="compound">CFont</ref> *</type>
        <definition>CFont * CFont::New</definition>
        <argsstring>(const std::string &amp;ident, CGraphic *g)</argsstring>
        <name>New</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>ident</declname>
        </param>
        <param>
          <type><ref refid="classCGraphic" kindref="compound">CGraphic</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new font</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ident</parametername>
</parameternamelist>
<parameterdescription>
<para>Font identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Graphic</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New font </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="85" column="14" bodyfile="src/video/font.cpp" bodystart="884" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1a34f9631233b0e9e9175b02ec27511db8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCFont" kindref="compound">CFont</ref> *</type>
        <definition>CFont * CFont::Get</definition>
        <argsstring>(const std::string &amp;ident)</argsstring>
        <name>Get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>ident</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a font</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ident</parametername>
</parameternamelist>
<parameterdescription>
<para>Font identifier</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The font </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="86" column="14" bodyfile="src/video/font.cpp" bodystart="905" bodyend="918"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCFont_1a78e82ab01191a4360cfab28efbb0f350" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string CFont::Ident</definition>
        <argsstring></argsstring>
        <name>Ident</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="112" column="13" bodyfile="src/include/font.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCFont_1a7a1e2656704ba3173d3e82a57adb4f89" prot="private" static="no" mutable="no">
        <type>char *</type>
        <definition>char* CFont::CharWidth</definition>
        <argsstring></argsstring>
        <name>CharWidth</name>
        <briefdescription>
<para>Ident of the font. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="113" column="6" bodyfile="src/include/font.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCFont_1a28a830500c2c3f3c8523fea027e60757" prot="private" static="no" mutable="no">
        <type><ref refid="classCGraphic" kindref="compound">CGraphic</ref> *</type>
        <definition>CGraphic* CFont::G</definition>
        <argsstring></argsstring>
        <name>G</name>
        <briefdescription>
<para>Real font width (starting with &apos; &apos;) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="114" column="10" bodyfile="src/include/font.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classCFont_1a9fb51b5e797c4e35a97384e4baf76f7d" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CFont::CFont</definition>
        <argsstring>(const std::string &amp;ident)</argsstring>
        <name>CFont</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>ident</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="76" column="10" bodyfile="src/include/font.h" bodystart="76" bodyend="80"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCFont_1a02eb32c5dc2e2cd05971fd9139d082bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int CFont::getHeight</definition>
        <argsstring>() const</argsstring>
        <name>getHeight</name>
        <reimplements refid="classgcn_1_1Font_1aa270d8934a16d4065143e3617b1fa926">getHeight</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the height of the glyphs in the font.</para>
<para><simplesect kind="return"><para>the height of the glyphs int the font. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="93" column="13" bodyfile="src/include/font.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classCFont_1af60eb2e89eeaf6b5045511a7d06081e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int CFont::getWidth</definition>
        <argsstring>(const std::string &amp;text) const</argsstring>
        <name>getWidth</name>
        <reimplements refid="classgcn_1_1Font_1abb88894b1ebeda28edcac75c537f8e0f">getWidth</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the width of a string. The width of a string is not necesserily the sum of all the widths of it&apos;s glyphs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to return the width of. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the width of a string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/font.h" line="94" column="13" bodyfile="src/include/font.h" bodystart="94" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Font definition. </para>
    </briefdescription>
    <detaileddescription>
<para>#include &quot;font.h&quot;</para>
<para>Defines the fonts used in the Stratagus engine. We support proportional multicolor fonts of 9 colors. (Currently the fonts aren&apos;t packed)</para>
<para>CFont::CharWidth[]</para>
<para>The width of each font glyph in pixels. The index 0 is the width of the SPACE (&apos; &apos;, 0x20).</para>
<para>CFont::G</para>
<para>Contains the graphics of the font, Only 9 colors are supported. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>CFont</label>
        <link refid="classCFont"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>gcn::Font</label>
        <link refid="classgcn_1_1Font"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>CFont</label>
        <link refid="classCFont"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>gcn::Font</label>
        <link refid="classgcn_1_1Font"/>
      </node>
    </collaborationgraph>
    <location file="src/include/font.h" line="74" column="1" bodyfile="src/include/font.h" bodystart="73" bodyend="115"/>
    <listofallmembers>
      <member refid="classCFont_1a9fb51b5e797c4e35a97384e4baf76f7d" prot="private" virt="non-virtual"><scope>CFont</scope><name>CFont</name></member>
      <member refid="classCFont_1a7a1e2656704ba3173d3e82a57adb4f89" prot="private" virt="non-virtual"><scope>CFont</scope><name>CharWidth</name></member>
      <member refid="classCFont_1a043f79e3ef43dacd6eba3aeec8aa4c57" prot="public" virt="non-virtual"><scope>CFont</scope><name>Clean</name></member>
      <member refid="classCFont_1ade2c502cefd51ca954e7fbb69644884f" prot="public" virt="non-virtual"><scope>CFont</scope><name>DrawChar</name></member>
      <member refid="classCFont_1aa17a43babee3a8629a9bb6c525bd0caa" prot="public" virt="virtual"><scope>CFont</scope><name>drawString</name></member>
      <member refid="classCFont_1af49d1fa7feb9a7c0e212e505d4120b4a" prot="public" virt="non-virtual"><scope>CFont</scope><name>DynamicLoad</name></member>
      <member refid="classCFont_1a28a830500c2c3f3c8523fea027e60757" prot="private" virt="non-virtual"><scope>CFont</scope><name>G</name></member>
      <member refid="classCFont_1a34f9631233b0e9e9175b02ec27511db8" prot="public" virt="non-virtual"><scope>CFont</scope><name>Get</name></member>
      <member refid="classCFont_1a7fae81a246f9d1fc7147f149f1755295" prot="public" virt="non-virtual"><scope>CFont</scope><name>GetFontColorGraphic</name></member>
      <member refid="classCFont_1a02eb32c5dc2e2cd05971fd9139d082bc" prot="public" virt="virtual"><scope>CFont</scope><name>getHeight</name></member>
      <member refid="classgcn_1_1Font_1a3210f4c53424ade4b188b8dfb1f686a4" prot="public" virt="virtual"><scope>CFont</scope><name>getStringIndexAt</name></member>
      <member refid="classCFont_1af60eb2e89eeaf6b5045511a7d06081e1" prot="public" virt="virtual"><scope>CFont</scope><name>getWidth</name></member>
      <member refid="classCFont_1afd83ea369191be1b4be0b35bd3255ce1" prot="public" virt="non-virtual"><scope>CFont</scope><name>Height</name></member>
      <member refid="classCFont_1a78e82ab01191a4360cfab28efbb0f350" prot="private" virt="non-virtual"><scope>CFont</scope><name>Ident</name></member>
      <member refid="classCFont_1aa077e80dfe0a9ce1cbc2fb2a3c264925" prot="public" virt="non-virtual"><scope>CFont</scope><name>IsLoaded</name></member>
      <member refid="classCFont_1a1f3e41b9b38c23e15dfa5648b7e80ef2" prot="public" virt="non-virtual"><scope>CFont</scope><name>Load</name></member>
      <member refid="classCFont_1a0ce15035dd095a1e9ce67d3e18639cd8" prot="private" virt="non-virtual"><scope>CFont</scope><name>MeasureWidths</name></member>
      <member refid="classCFont_1a188bf3156facce6de50b8686266ce3d5" prot="public" virt="non-virtual"><scope>CFont</scope><name>New</name></member>
      <member refid="classCFont_1a1ce97cb365f64c998a3851d488ea5fb5" prot="public" virt="non-virtual"><scope>CFont</scope><name>Reload</name></member>
      <member refid="classCFont_1a5fd2d498f2f0d746e1302fe6062b9089" prot="public" virt="non-virtual"><scope>CFont</scope><name>Width</name></member>
      <member refid="classCFont_1a545de70a23bcf7e149410d3b2ac89885" prot="public" virt="non-virtual"><scope>CFont</scope><name>Width</name></member>
      <member refid="classCFont_1a1e1d2d4b4d14c7004289291785d75728" prot="public" virt="virtual"><scope>CFont</scope><name>~CFont</name></member>
      <member refid="classgcn_1_1Font_1ab3bd1c57c092fe0ad1d027c4076e463d" prot="public" virt="virtual"><scope>CFont</scope><name>~Font</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
