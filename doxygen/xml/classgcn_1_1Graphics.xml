<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgcn_1_1Graphics" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>gcn::Graphics</compoundname>
    <derivedcompoundref refid="classgcn_1_1SDLGraphics" prot="public" virt="non-virtual">gcn::SDLGraphics</derivedcompoundref>
    <includes refid="graphics_8h" local="no">graphics.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeb" prot="public" static="no" strong="no">
        <type></type>
        <name>@5</name>
        <enumvalue id="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba6d4805f8b61e596e250ea9ad61fadfdc" prot="public">
          <name>LEFT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba922f83bc619a6d5c9dd3cf322157d505" prot="public">
          <name>CENTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba6c47ce9c7f1438059e8e6b7eef671cc8" prot="public">
          <name>RIGHT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alignments for text drawing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="255" column="9" bodyfile="src/guichan/include/guichan/graphics.h" bodystart="254" bodyend="259"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgcn_1_1Graphics_1a08be42a39b774cd0ee449a8cc76cc84b" prot="protected" static="no" mutable="no">
        <type>std::stack&lt; <ref refid="classgcn_1_1ClipRectangle" kindref="compound">ClipRectangle</ref> &gt;</type>
        <definition>std::stack&lt;ClipRectangle&gt; gcn::Graphics::mClipStack</definition>
        <argsstring></argsstring>
        <name>mClipStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="262" column="20" bodyfile="src/guichan/include/guichan/graphics.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgcn_1_1Graphics_1af58494bcfd95382cb7af4f0d573b8b1a" prot="protected" static="no" mutable="no">
        <type><ref refid="classgcn_1_1Font" kindref="compound">Font</ref> *</type>
        <definition>Font* gcn::Graphics::mFont</definition>
        <argsstring></argsstring>
        <name>mFont</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="263" column="14" bodyfile="src/guichan/include/guichan/graphics.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgcn_1_1Graphics_1ac999502b315af8b5d974506cdb1e2dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gcn::Graphics::Graphics</definition>
        <argsstring>()</argsstring>
        <name>Graphics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="100" column="9" bodyfile="src/guichan/graphics.cpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1ab33d3ad4b19455171d22fa1dccae9591" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual gcn::Graphics::~Graphics</definition>
        <argsstring>()</argsstring>
        <name>~Graphics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="102" column="17" bodyfile="src/guichan/include/guichan/graphics.h" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1a85e8107504f70fa460b844fb2259c653" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::Graphics::_beginDraw</definition>
        <argsstring>()</argsstring>
        <name>_beginDraw</name>
        <reimplementedby refid="classgcn_1_1SDLGraphics_1a8a551d5159bb79dd7d77cd081f5d9c78">_beginDraw</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes drawing. Called by the <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> when <ref refid="classgcn_1_1Gui_1ad231f982fb8182b16ecf11075054f4ac" kindref="member">Gui::draw()</ref> is called. It is needed by some implementations of <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> to perform preparations before drawing. An example of such an implementation would be OpenGLGraphics.</para>
<para>NOTE: You will never need to call this function yourself. <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> will do it for you.</para>
<para><simplesect kind="see"><para><ref refid="classgcn_1_1Graphics_1af6b9381e34ec34f10e9bbf77b7b00c78" kindref="member">_endDraw</ref>, <ref refid="classgcn_1_1Gui_1ad231f982fb8182b16ecf11075054f4ac" kindref="member">Gui::draw</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="115" column="22" bodyfile="src/guichan/include/guichan/graphics.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1af6b9381e34ec34f10e9bbf77b7b00c78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::Graphics::_endDraw</definition>
        <argsstring>()</argsstring>
        <name>_endDraw</name>
        <reimplementedby refid="classgcn_1_1SDLGraphics_1a1ec61016736b34271f60e3a88d65c1b7">_endDraw</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deinitializes drawing. Called by the <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> when a <ref refid="classgcn_1_1Gui_1ad231f982fb8182b16ecf11075054f4ac" kindref="member">Gui::draw()</ref> is done. done. It should reset any state changes made by <ref refid="classgcn_1_1Graphics_1a85e8107504f70fa460b844fb2259c653" kindref="member">_beginDraw()</ref>.</para>
<para>NOTE: You will never need to call this function yourself. <ref refid="classgcn_1_1Gui" kindref="compound">Gui</ref> will do it for you.</para>
<para><simplesect kind="see"><para><ref refid="classgcn_1_1Graphics_1a85e8107504f70fa460b844fb2259c653" kindref="member">_beginDraw</ref>, <ref refid="classgcn_1_1Gui_1ad231f982fb8182b16ecf11075054f4ac" kindref="member">Gui::draw</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="126" column="22" bodyfile="src/guichan/include/guichan/graphics.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1ab8f8773da6aa70f5fb554c2a2815c496" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool gcn::Graphics::pushClipArea</definition>
        <argsstring>(Rectangle area)</argsstring>
        <name>pushClipArea</name>
        <reimplementedby refid="classgcn_1_1SDLGraphics_1a1fbd23bf7540f15bb9e07ee378d60e25">pushClipArea</reimplementedby>
        <param>
          <type><ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref></type>
          <declname>area</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pushes a clip area onto the stack. The x and y coordinates in the <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref> will be relative to the last pushed clip area. If the new area falls outside the current clip area, it will be clipped as necessary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para>the clip area to be pushed onto the stack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if the the new area lays totally outside the current clip area. Note that an empty clip area will be pused in this case. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="139" column="22" bodyfile="src/guichan/graphics.cpp" bodystart="71" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1a11a3be7969db7490df8a02cb4549b443" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Graphics::popClipArea</definition>
        <argsstring>()</argsstring>
        <name>popClipArea</name>
        <reimplementedby refid="classgcn_1_1SDLGraphics_1a6876d1027cb3feb4a413e3e854812a4b">popClipArea</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the topmost clip area from the stack.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgcn_1_1Exception" kindref="compound">Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the stack is empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="146" column="22" bodyfile="src/guichan/graphics.cpp" bodystart="99" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1a642535039e421b0530bd85d71b8f7151" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classgcn_1_1ClipRectangle" kindref="compound">ClipRectangle</ref> &amp;</type>
        <definition>const ClipRectangle &amp; gcn::Graphics::getCurrentClipArea</definition>
        <argsstring>()</argsstring>
        <name>getCurrentClipArea</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the current ClipArea. Usefull if you want to do drawing bypassing <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref>.</para>
<para><simplesect kind="return"><para>the current ClipArea. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="154" column="37" bodyfile="src/guichan/graphics.cpp" bodystart="111" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1aeb284b30f59d5cfa4c4e25130f4c164e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::Graphics::drawImage</definition>
        <argsstring>(const Image *image, int srcX, int srcY, int dstX, int dstY, int width, int height)=0</argsstring>
        <name>drawImage</name>
        <reimplementedby refid="classgcn_1_1SDLGraphics_1adaaf65022086f36b9aa4d9190fd092f0">drawImage</reimplementedby>
        <param>
          <type>const <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srcX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srcY</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstY</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a part of an <ref refid="classgcn_1_1Image" kindref="compound">Image</ref>.</para>
<para>NOTE: Width and height arguments will not scale the <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> but specifies the size of the part to be drawn. If you want to draw the whole <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> there is a simplified version of this function.</para>
<para>EXAMPLE:<programlisting><codeline><highlight class="normal">drawImage(myImage,<sp/>10,<sp/>10,<sp/>20,<sp/>20,<sp/>40,<sp/>40);<sp/></highlight></codeline>
</programlisting> Will draw a rectangular piece of myImage starting at coordinate (10, 10) in myImage, with width and height 40. The piece will be drawn with it&apos;s top left corner at coordinate (20, 20).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcX</parametername>
</parameternamelist>
<parameterdescription>
<para>source <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcY</parametername>
</parameternamelist>
<parameterdescription>
<para>source <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> y coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstX</parametername>
</parameternamelist>
<parameterdescription>
<para>destination x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstY</parametername>
</parameternamelist>
<parameterdescription>
<para>destination y coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the piece. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the piece. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="177" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1aed30c3aa213a2d225b1c119b3f5f8d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Graphics::drawImage</definition>
        <argsstring>(const Image *image, int dstX, int dstY)</argsstring>
        <name>drawImage</name>
        <param>
          <type>const <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws an image. A simplified version of the other drawImage. It will draw a whole image at the coordinate you specify. It is equivalent to calling: <programlisting><codeline><highlight class="normal">drawImage(myImage,<sp/>0,<sp/>0,<sp/>dstX,<sp/>dstY,<sp/>image-&gt;getWidth(),<sp/>image-&gt;getHeight());<sp/></highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="186" column="22" bodyfile="src/guichan/graphics.cpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1adfd989a2a8c6771c6368b25f3977ecf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::Graphics::drawPoint</definition>
        <argsstring>(int x, int y)=0</argsstring>
        <name>drawPoint</name>
        <reimplementedby refid="classgcn_1_1SDLGraphics_1a5f670d60ecbf4b716f005db098363915">drawPoint</reimplementedby>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a single point/pixel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="194" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1a92af7e5f5ed6ebf692803bc1bd1d5db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::Graphics::drawLine</definition>
        <argsstring>(int x1, int y1, int x2, int y2)=0</argsstring>
        <name>drawLine</name>
        <reimplementedby refid="classgcn_1_1SDLGraphics_1adcb7d5d91da928a92c82ad1fc5fba273">drawLine</reimplementedby>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ddraws a line.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first y coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second x coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second y coordinate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="204" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1a8ffb254f53931ce3809a6f10307fcbf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::Graphics::drawRectangle</definition>
        <argsstring>(const Rectangle &amp;rectangle)=0</argsstring>
        <name>drawRectangle</name>
        <reimplementedby refid="classgcn_1_1SDLGraphics_1a17607f95e7af8fc9c55d112753ef9873">drawRectangle</reimplementedby>
        <param>
          <type>const <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref> &amp;</type>
          <declname>rectangle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a simple, non-filled, <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref> with one pixel width.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rectangle</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref> to draw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="211" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1a5caac226a94ecf8fdfee1da7cd14f0df" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::Graphics::fillRectangle</definition>
        <argsstring>(const Rectangle &amp;rectangle)=0</argsstring>
        <name>fillRectangle</name>
        <reimplementedby refid="classgcn_1_1SDLGraphics_1a8d3fba4fa40d9d5ef436b836dfd25804">fillRectangle</reimplementedby>
        <param>
          <type>const <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref> &amp;</type>
          <declname>rectangle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws a filled <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rectangle</parametername>
</parameternamelist>
<parameterdescription>
<para>the filled <ref refid="classgcn_1_1Rectangle" kindref="compound">Rectangle</ref> to draw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="218" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1a7f438ae2b4cc09c66d77a9b9cb591e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>virtual void gcn::Graphics::setColor</definition>
        <argsstring>(const Color &amp;color)=0</argsstring>
        <name>setColor</name>
        <reimplementedby refid="classgcn_1_1SDLGraphics_1a26298c36c21fc6e16b02a932627adae6">setColor</reimplementedby>
        <param>
          <type>const <ref refid="classgcn_1_1Color" kindref="compound">Color</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classgcn_1_1Color" kindref="compound">Color</ref> to use when drawing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classgcn_1_1Color" kindref="compound">Color</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="225" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1a509769aaeb7356cd0f595f3ddb962e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classgcn_1_1Color" kindref="compound">Color</ref> &amp;</type>
        <definition>virtual const Color&amp; gcn::Graphics::getColor</definition>
        <argsstring>()=0</argsstring>
        <name>getColor</name>
        <reimplementedby refid="classgcn_1_1SDLGraphics_1a64363f22dce7278007350cfab8569d58">getColor</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the <ref refid="classgcn_1_1Color" kindref="compound">Color</ref> to use when drawing.</para>
<para><simplesect kind="return"><para>the <ref refid="classgcn_1_1Color" kindref="compound">Color</ref> used when drawing. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="232" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1a7415290eb8b075fae0b4a6fce3912f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Graphics::setFont</definition>
        <argsstring>(Font *font)</argsstring>
        <name>setFont</name>
        <param>
          <type><ref refid="classgcn_1_1Font" kindref="compound">Font</ref> *</type>
          <declname>font</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the font to use when drawing text.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgcn_1_1Font" kindref="compound">Font</ref> to use when drawing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="239" column="22" bodyfile="src/guichan/graphics.cpp" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classgcn_1_1Graphics_1a7401dbf1191fbcb377ad67a9cc0a78be" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="shaders_8cpp_1a7206f6ae7a09ba9ca63f80e09015869c" kindref="member">void</ref></type>
        <definition>void gcn::Graphics::drawText</definition>
        <argsstring>(const std::string &amp;text, int x, int y, unsigned int alignment=LEFT, bool is_normal=true)</argsstring>
        <name>drawText</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>alignment</declname>
          <defval><ref refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba6d4805f8b61e596e250ea9ad61fadfdc" kindref="member">LEFT</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_normal</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws text.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>the text to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate where to draw the text. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate where to draw the text. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba6d4805f8b61e596e250ea9ad61fadfdc" kindref="member">Graphics::LEFT</ref>, <ref refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba922f83bc619a6d5c9dd3cf322157d505" kindref="member">Graphics::CENTER</ref> or <ref refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba6c47ce9c7f1438059e8e6b7eef671cc8" kindref="member">Graphics::RIGHT</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classgcn_1_1Exception" kindref="compound">Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>when no <ref refid="classgcn_1_1Font" kindref="compound">Font</ref> is set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/guichan/include/guichan/graphics.h" line="250" column="22" bodyfile="src/guichan/graphics.cpp" bodystart="132" bodyend="155"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Used for drawing graphics. It contains all vital functions for drawing. We include implemented <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> classes for some common platforms like the Allegro library, the OpenGL library and the SDL library. To make Guichan usable under another platform, a <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> class must be implemented.</para>
<para>In <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> you can set clip areas to limit drawing to certain areas of the screen. <ref refid="structClip" kindref="compound">Clip</ref> areas are put on a stack, which means that you can push smaller and smaller clip areas onto the stack. All coordinates will be relative to the topmost clip area. In most cases you won&apos;t have to worry about the clip areas, unless you want to implement some really complex widget. Pushing and poping of clip areas are handled automatically by container widgets when their child widgets are drawn.</para>
<para>IMPORTANT: Remember to pop each clip area that you pushed on the stack after you are done with it.</para>
<para>If you feel that <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> is to restrictive for your needs, there is no one stopping you from using your own code for drawing in Widgets. You could for instance use pure SDL in the drawing of Widgets bypassing <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref>. This might however hurt portability of your application.</para>
<para>If you implement a <ref refid="classgcn_1_1Graphics" kindref="compound">Graphics</ref> class not present in Guichan we would be very happy to add it to Guichan.</para>
<para><simplesect kind="see"><para>AllegroGraphics, OpenGLGraphics, <ref refid="classgcn_1_1SDLGraphics" kindref="compound">SDLGraphics</ref>, <ref refid="classgcn_1_1Image" kindref="compound">Image</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>gcn::Graphics</label>
        <link refid="classgcn_1_1Graphics"/>
      </node>
      <node id="2">
        <label>gcn::SDLGraphics</label>
        <link refid="classgcn_1_1SDLGraphics"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>gcn::Graphics</label>
        <link refid="classgcn_1_1Graphics"/>
        <childnode refid="2" relation="usage">
          <edgelabel>mFont</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>gcn::Font</label>
        <link refid="classgcn_1_1Font"/>
      </node>
    </collaborationgraph>
    <location file="src/guichan/include/guichan/graphics.h" line="98" column="1" bodyfile="src/guichan/include/guichan/graphics.h" bodystart="97" bodyend="264"/>
    <listofallmembers>
      <member refid="classgcn_1_1Graphics_1a85e8107504f70fa460b844fb2259c653" prot="public" virt="virtual"><scope>gcn::Graphics</scope><name>_beginDraw</name></member>
      <member refid="classgcn_1_1Graphics_1af6b9381e34ec34f10e9bbf77b7b00c78" prot="public" virt="virtual"><scope>gcn::Graphics</scope><name>_endDraw</name></member>
      <member refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba922f83bc619a6d5c9dd3cf322157d505" prot="public" virt="non-virtual"><scope>gcn::Graphics</scope><name>CENTER</name></member>
      <member refid="classgcn_1_1Graphics_1aeb284b30f59d5cfa4c4e25130f4c164e" prot="public" virt="pure-virtual"><scope>gcn::Graphics</scope><name>drawImage</name></member>
      <member refid="classgcn_1_1Graphics_1aed30c3aa213a2d225b1c119b3f5f8d60" prot="public" virt="virtual"><scope>gcn::Graphics</scope><name>drawImage</name></member>
      <member refid="classgcn_1_1Graphics_1a92af7e5f5ed6ebf692803bc1bd1d5db5" prot="public" virt="pure-virtual"><scope>gcn::Graphics</scope><name>drawLine</name></member>
      <member refid="classgcn_1_1Graphics_1adfd989a2a8c6771c6368b25f3977ecf4" prot="public" virt="pure-virtual"><scope>gcn::Graphics</scope><name>drawPoint</name></member>
      <member refid="classgcn_1_1Graphics_1a8ffb254f53931ce3809a6f10307fcbf2" prot="public" virt="pure-virtual"><scope>gcn::Graphics</scope><name>drawRectangle</name></member>
      <member refid="classgcn_1_1Graphics_1a7401dbf1191fbcb377ad67a9cc0a78be" prot="public" virt="virtual"><scope>gcn::Graphics</scope><name>drawText</name></member>
      <member refid="classgcn_1_1Graphics_1a5caac226a94ecf8fdfee1da7cd14f0df" prot="public" virt="pure-virtual"><scope>gcn::Graphics</scope><name>fillRectangle</name></member>
      <member refid="classgcn_1_1Graphics_1a509769aaeb7356cd0f595f3ddb962e49" prot="public" virt="pure-virtual"><scope>gcn::Graphics</scope><name>getColor</name></member>
      <member refid="classgcn_1_1Graphics_1a642535039e421b0530bd85d71b8f7151" prot="public" virt="virtual"><scope>gcn::Graphics</scope><name>getCurrentClipArea</name></member>
      <member refid="classgcn_1_1Graphics_1ac999502b315af8b5d974506cdb1e2dcc" prot="public" virt="non-virtual"><scope>gcn::Graphics</scope><name>Graphics</name></member>
      <member refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba6d4805f8b61e596e250ea9ad61fadfdc" prot="public" virt="non-virtual"><scope>gcn::Graphics</scope><name>LEFT</name></member>
      <member refid="classgcn_1_1Graphics_1a08be42a39b774cd0ee449a8cc76cc84b" prot="protected" virt="non-virtual"><scope>gcn::Graphics</scope><name>mClipStack</name></member>
      <member refid="classgcn_1_1Graphics_1af58494bcfd95382cb7af4f0d573b8b1a" prot="protected" virt="non-virtual"><scope>gcn::Graphics</scope><name>mFont</name></member>
      <member refid="classgcn_1_1Graphics_1a11a3be7969db7490df8a02cb4549b443" prot="public" virt="virtual"><scope>gcn::Graphics</scope><name>popClipArea</name></member>
      <member refid="classgcn_1_1Graphics_1ab8f8773da6aa70f5fb554c2a2815c496" prot="public" virt="virtual"><scope>gcn::Graphics</scope><name>pushClipArea</name></member>
      <member refid="classgcn_1_1Graphics_1a6b3e2fbfa5b64125fc09c6ea5fb47eeba6c47ce9c7f1438059e8e6b7eef671cc8" prot="public" virt="non-virtual"><scope>gcn::Graphics</scope><name>RIGHT</name></member>
      <member refid="classgcn_1_1Graphics_1a7f438ae2b4cc09c66d77a9b9cb591e7c" prot="public" virt="pure-virtual"><scope>gcn::Graphics</scope><name>setColor</name></member>
      <member refid="classgcn_1_1Graphics_1a7415290eb8b075fae0b4a6fce3912f4e" prot="public" virt="virtual"><scope>gcn::Graphics</scope><name>setFont</name></member>
      <member refid="classgcn_1_1Graphics_1ab33d3ad4b19455171d22fa1dccae9591" prot="public" virt="virtual"><scope>gcn::Graphics</scope><name>~Graphics</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
