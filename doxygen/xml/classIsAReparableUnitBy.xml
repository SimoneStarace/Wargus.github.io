<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classIsAReparableUnitBy" kind="class" language="C++" prot="public">
    <compoundname>IsAReparableUnitBy</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classIsAReparableUnitBy_1a8aedccb7732c15a2e8527a065e6c4505" prot="private" static="no" mutable="no">
        <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
        <definition>const CUnit* IsAReparableUnitBy::worker</definition>
        <argsstring></argsstring>
        <name>worker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/action/action_still.cpp" line="223" column="13" bodyfile="src/action/action_still.cpp" bodystart="223" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classIsAReparableUnitBy_1a41362f2809fa5422b4d95ddcf95fb51c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>IsAReparableUnitBy::IsAReparableUnitBy</definition>
        <argsstring>(const CUnit &amp;_worker)</argsstring>
        <name>IsAReparableUnitBy</name>
        <param>
          <type>const <ref refid="classCUnit" kindref="compound">CUnit</ref> &amp;</type>
          <declname>_worker</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/action/action_still.cpp" line="214" column="10" bodyfile="src/action/action_still.cpp" bodystart="214" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classIsAReparableUnitBy_1a90c50a79d5a5099b74e7ee9e06cb790a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsAReparableUnitBy::operator()</definition>
        <argsstring>(CUnit *unit) const</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classCUnit" kindref="compound">CUnit</ref> *</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/action/action_still.cpp" line="215" column="6" bodyfile="src/action/action_still.cpp" bodystart="215" bodyend="221"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/action/action_still.cpp" line="212" column="1" bodyfile="src/action/action_still.cpp" bodystart="211" bodyend="224"/>
    <listofallmembers>
      <member refid="classIsAReparableUnitBy_1a41362f2809fa5422b4d95ddcf95fb51c" prot="public" virt="non-virtual"><scope>IsAReparableUnitBy</scope><name>IsAReparableUnitBy</name></member>
      <member refid="classIsAReparableUnitBy_1a90c50a79d5a5099b74e7ee9e06cb790a" prot="public" virt="non-virtual"><scope>IsAReparableUnitBy</scope><name>operator()</name></member>
      <member refid="classIsAReparableUnitBy_1a8aedccb7732c15a2e8527a065e6c4505" prot="private" virt="non-virtual"><scope>IsAReparableUnitBy</scope><name>worker</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
